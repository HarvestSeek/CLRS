{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1-Fundamentals/1.1/","text":"1. \u5206\u6790\u7b97\u6cd5\uff1a \u8ba1\u7b97\u65f6\u95f4 \u2003\u4ee5\u4e0b\u7684\u6a21\u578b\u57fa\u4e8e\u5355\u5904\u7406\u5668\u8ba1\u7b97\u6a21\u578b\u2014\u2014 RAM \u6a21\u578b\u8fdb\u884c\u8ba8\u8bba\u3002\u5b83\u6ca1\u6709\u5e76\u53d1\u64cd\u4f5c\uff0c\u4e14\u6307\u4ee4\u96c6\u53ea\u5305\u542b\u4e00\u822c\u8ba1\u7b97\u673a\u7684\u5e38\u89c1\u6307\u4ee4\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u4e0e\u8f93\u5165\u89c4\u6a21\u540c\u6b65\u589e\u957f\uff0c\u6240\u4ee5\u901a\u5e38\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u6210\u5176\u8f93\u5165\u89c4\u6a21\u7684\u51fd\u6570\u3002 \u2003\u8f93\u5165\u89c4\u6a21( input size )\u7684\u6700\u4f73\u6982\u5ff5\u4f9d\u8d56\u4e8e\u6240\u7814\u7a76\u7684\u95ee\u9898\uff1b\u4e00\u4e2a\u7b97\u6cd5\u5728\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4( running time )\u6307\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6216\u6b65\u6570\u3002 \u2003\u4ee5\u63d2\u5165\u6392\u5e8f\u4e3a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 INSERTION - SORT ( A ) for j = 2 to A . length key = A [ j ] // Insert A [ j ] into the sorted sequence A [ 1 .. j - 1 ] i = j - 1 while i > 0 and A [ i ] > key A [ i + 1 ] = A [ i ] i = i - 1 A [ i + 1 ] = key \u2003\u8fd0\u884c\u65f6\u95f4\u4f30\u8ba1\uff1a \u884c\u6570 \u4ee3\u4ef7 \u6b21\u6570 1 $c_1$ $n$ 2 $c_2$ $n-1$ 4 $c_4$ $n-1$ 5 $c_5$ $\\sum_{j=2}^nt_j$ 6 $c_6$ $\\sum_{j=2}^n(t_j - 1)$ 7 $c_7$ $\\sum_{j=2}^n(t_j - 1)$ 8 $c_8$ $n-1$ \u2003\u6267\u884c\u6bcf\u884c\u4f2a\u4ee3\u7801\u9700\u8981\u5e38\u91cf\u65f6\u95f4\uff0c\u4e14\u4e0d\u540c\u884c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u4e0e RAM \u6a21\u578b\u662f\u4e00\u81f4\u7684\u3002 \u2003\u82e5\u53ea\u8003\u8651\u6700\u4f73\u60c5\u51b5\uff0c\u5373\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\uff1a $$ \\begin{aligned} T(n) & =c_1n+c_2(n-1)+c_4(n-1)+c_5(n-1)+c_8(n-1) \\\\ & =(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)\\\\ \\end{aligned} $$ 2. \u589e\u957f\u91cf\u7ea7 \u2003\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5ffd\u7565\u9ad8\u9636\u9879\u7cfb\u6570\u548c\u4f4e\u9636\u9879\uff0c\u800c\u662f\u53ea\u5173\u5fc3\u589e\u957f\u91cf\u7ea7( order of growth )\u3002","title":"1.analysis"},{"location":"1-Fundamentals/1.1/#1","text":"\u4ee5\u4e0b\u7684\u6a21\u578b\u57fa\u4e8e\u5355\u5904\u7406\u5668\u8ba1\u7b97\u6a21\u578b\u2014\u2014 RAM \u6a21\u578b\u8fdb\u884c\u8ba8\u8bba\u3002\u5b83\u6ca1\u6709\u5e76\u53d1\u64cd\u4f5c\uff0c\u4e14\u6307\u4ee4\u96c6\u53ea\u5305\u542b\u4e00\u822c\u8ba1\u7b97\u673a\u7684\u5e38\u89c1\u6307\u4ee4\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u4e0e\u8f93\u5165\u89c4\u6a21\u540c\u6b65\u589e\u957f\uff0c\u6240\u4ee5\u901a\u5e38\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u6210\u5176\u8f93\u5165\u89c4\u6a21\u7684\u51fd\u6570\u3002 \u2003\u8f93\u5165\u89c4\u6a21( input size )\u7684\u6700\u4f73\u6982\u5ff5\u4f9d\u8d56\u4e8e\u6240\u7814\u7a76\u7684\u95ee\u9898\uff1b\u4e00\u4e2a\u7b97\u6cd5\u5728\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4( running time )\u6307\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6216\u6b65\u6570\u3002 \u2003\u4ee5\u63d2\u5165\u6392\u5e8f\u4e3a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 INSERTION - SORT ( A ) for j = 2 to A . length key = A [ j ] // Insert A [ j ] into the sorted sequence A [ 1 .. j - 1 ] i = j - 1 while i > 0 and A [ i ] > key A [ i + 1 ] = A [ i ] i = i - 1 A [ i + 1 ] = key \u2003\u8fd0\u884c\u65f6\u95f4\u4f30\u8ba1\uff1a \u884c\u6570 \u4ee3\u4ef7 \u6b21\u6570 1 $c_1$ $n$ 2 $c_2$ $n-1$ 4 $c_4$ $n-1$ 5 $c_5$ $\\sum_{j=2}^nt_j$ 6 $c_6$ $\\sum_{j=2}^n(t_j - 1)$ 7 $c_7$ $\\sum_{j=2}^n(t_j - 1)$ 8 $c_8$ $n-1$ \u2003\u6267\u884c\u6bcf\u884c\u4f2a\u4ee3\u7801\u9700\u8981\u5e38\u91cf\u65f6\u95f4\uff0c\u4e14\u4e0d\u540c\u884c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u4e0e RAM \u6a21\u578b\u662f\u4e00\u81f4\u7684\u3002 \u2003\u82e5\u53ea\u8003\u8651\u6700\u4f73\u60c5\u51b5\uff0c\u5373\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\uff1a $$ \\begin{aligned} T(n) & =c_1n+c_2(n-1)+c_4(n-1)+c_5(n-1)+c_8(n-1) \\\\ & =(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)\\\\ \\end{aligned} $$","title":"1. \u5206\u6790\u7b97\u6cd5\uff1a \u8ba1\u7b97\u65f6\u95f4"},{"location":"1-Fundamentals/1.1/#2","text":"\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5ffd\u7565\u9ad8\u9636\u9879\u7cfb\u6570\u548c\u4f4e\u9636\u9879\uff0c\u800c\u662f\u53ea\u5173\u5fc3\u589e\u957f\u91cf\u7ea7( order of growth )\u3002","title":"2. \u589e\u957f\u91cf\u7ea7"},{"location":"1-Fundamentals/1.2/","text":"1.\u589e\u957f\u7684\u9636 $ \\Theta(1) < \\Theta(lgn) < \\Theta(\\sqrt n) < \\Theta(n) < \\Theta(nlgn) < \\Theta(n^2) < \\Theta(n^3) < \\Theta(2^n) < \\Theta(n!) $ 2.\u540c\u9636\u51fd\u6570\u96c6\u5408 $ \\Theta(g(n)) = \\lbrace \\ f(n) \\ | \\ \\exists c_1 \\text{\u3001} c_2 > 0, \\ n_0 ,\\ \\forall n \\geq n_0, \\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\rbrace $ \u5982\u679c$f(n) \\in \\Theta(g(n)), \\ g(n) $\u4e0e$f(n)$\u540c\u9636\uff0c\u8bb0\u4f5c$ f(n) = \\Theta (g(n))$ 3.\u4f4e\u9636\u51fd\u6570\u96c6\u5408 $O(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) \\leq cg(n)\\rbrace$ 4.\u9ad8\u9636\u51fd\u6570\u96c6\u5408 $\\Omega(g(n))=\\lbrace \\ f(n) \\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq cg(n) \\leq f(n) \\rbrace$ 5.\u4e25\u683c\u4f4e\u9636 $o(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\forall c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) < cg(n)\\rbrace$ 6.\u6ce8 \u2460 $f(n)=\\Theta(g(n)) \\Rightarrow f(n)=O(g(n))$\uff0c\u0398 \u6807\u8bb0\u5f3a\u4e8e O \u6807\u8bb0 \u2461 big O \u6807\u8bb0\u53ef\u80fd\u4e0d\u662f\u7d27\u7684\uff0c\u4f8b\u5982 $2n^2=O(n^2)$\u662f\u7d27\u7684\uff0c\u4f46 $2n=O(n^2)$\u4e0d\u662f \u2462 small o \u6807\u8bb0\u7528\u4e8e\u6807\u8bb0\u4e0a\u754c\u4f46\u4e0d\u662f\u7d27\u7684\u7684\u60c5\u51b5\uff0c\u4f8b\u5982 $2n^2 \\ne o(n^2)$","title":"2.asymptotic complexity"},{"location":"1-Fundamentals/1.2/#1","text":"$ \\Theta(1) < \\Theta(lgn) < \\Theta(\\sqrt n) < \\Theta(n) < \\Theta(nlgn) < \\Theta(n^2) < \\Theta(n^3) < \\Theta(2^n) < \\Theta(n!) $","title":"1.\u589e\u957f\u7684\u9636"},{"location":"1-Fundamentals/1.2/#2","text":"$ \\Theta(g(n)) = \\lbrace \\ f(n) \\ | \\ \\exists c_1 \\text{\u3001} c_2 > 0, \\ n_0 ,\\ \\forall n \\geq n_0, \\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\rbrace $ \u5982\u679c$f(n) \\in \\Theta(g(n)), \\ g(n) $\u4e0e$f(n)$\u540c\u9636\uff0c\u8bb0\u4f5c$ f(n) = \\Theta (g(n))$","title":"2.\u540c\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#3","text":"$O(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) \\leq cg(n)\\rbrace$","title":"3.\u4f4e\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#4","text":"$\\Omega(g(n))=\\lbrace \\ f(n) \\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq cg(n) \\leq f(n) \\rbrace$","title":"4.\u9ad8\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#5","text":"$o(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\forall c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) < cg(n)\\rbrace$","title":"5.\u4e25\u683c\u4f4e\u9636"},{"location":"1-Fundamentals/1.2/#6","text":"\u2460 $f(n)=\\Theta(g(n)) \\Rightarrow f(n)=O(g(n))$\uff0c\u0398 \u6807\u8bb0\u5f3a\u4e8e O \u6807\u8bb0 \u2461 big O \u6807\u8bb0\u53ef\u80fd\u4e0d\u662f\u7d27\u7684\uff0c\u4f8b\u5982 $2n^2=O(n^2)$\u662f\u7d27\u7684\uff0c\u4f46 $2n=O(n^2)$\u4e0d\u662f \u2462 small o \u6807\u8bb0\u7528\u4e8e\u6807\u8bb0\u4e0a\u754c\u4f46\u4e0d\u662f\u7d27\u7684\u7684\u60c5\u51b5\uff0c\u4f8b\u5982 $2n^2 \\ne o(n^2)$","title":"6.\u6ce8"},{"location":"1-Fundamentals/1.3/","text":"1.\u66ff\u6362\u65b9\u6cd5( Substitution method ) Steps: \u2460 \u731c\u6d4b\u89e3\u7684\u5f62\u5f0f \u2461 \u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6c42\u51fa\u89e3\u7684\u5e38\u6570\uff0c\u5e76\u8bc1\u660e\u89e3\u662f\u6b63\u786e\u7684\u3002 e.g.1 $ \\ \\ \\ T(n)=2T(\\lfloor n/2 \\rfloor)+n$ \u731c\u6d4b $T(n)=O(nlgn)$\uff0c\u4ee3\u5165\u5f97\uff1a $$ \\begin{aligned} T(n) & \\leq 2(c\\lfloor n/2 \\rfloor lg(\\lfloor n/2 \\rfloor))+n \\leq cn \\ lg(n/2)+n \\\\ & = cn\\ lgn-cn\\ lg2+n=cn\\ lgn-cn+n \\\\ &\\leq cn\\ lgn \\end{aligned} $$ (a). \u731c\u6d4b\u7684\u65b9\u6cd5 \u2460 \u901a\u8fc7\u548c\u5df2\u7ecf\u89c1\u8fc7\u7684\u9012\u5f52\u5f0f\u6bd4\u8f83\uff0c\u5982 $T(n)=2T(\\lfloor n/2 \\rfloor+17)+n$ \u4e2d17\u8d77\u5230\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u5927 \u2461 \u5148\u8bc1\u660e\u8f83\u4f4e\u7684\u4e0a\u754c\u6216\u4e0b\u754c (b). \u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879 e.g. $\\ \\ \\ T(n)=T(\\lfloor n/2 \\rfloor)+T(\\lceil n/2 \\rceil)+1$ \u731c\u6d4b $T(n)=O(n)$\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor + c\\lceil n/2 \\rceil + 1=cn+1$\uff0c\u89e3\u4e0d\u51fa\u6765\u3002 \u76f4\u89c9\u4e0a\u5e94\u8be5\u5c1d\u8bd5\u66f4\u5927\u7684\u754c $O(n^2)$\uff0c\u4f46\u539f\u6765\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u505a\u51fa\u66f4\u5f3a\u7684\u5f52\u7eb3\u5047\u8bbe\uff1a\u7531\u4e8e\u548c\u7ed3\u679c\u53ea\u5dee\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u4e0d\u7b49\u5f0f\uff0c\u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879\uff0c\u731c\u6d4b $T(n)\\leq cn-d$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor - d + c\\lceil n/2 \\rceil - d + 1=cn-2d+1\\leq cn-d$\u3002 (c). \u53d8\u91cf\u4ee3\u6362 e.g. $ \\ \\ \\ T(n)=2T(\\sqrt n)+lgn$ \u4ee4 $m=lgn$\uff0c\u5f97 $T(2^m)=2T(2^{m/2})+m$\uff1b\u91cd\u547d\u540d $S(m)=T(2^m)$\uff0c\u5f97 $S(m)=2S(m/2)+m$\u3002 \u6700\u540e $T(n)=T(2^m)=S(m)=O(mlgm)=O(lgn\u00b7lglgn)$ 2.\u9012\u5f52\u6811\u6cd5( recursion-tree method ) \u2003\u5bf9\u9012\u5f52\u5f0f\u8fdb\u884c\u9010\u7ea7\u5c55\u5f00\uff0c\u5f80\u5f80\u8981\u5fcd\u53d7\u4e00\u4e9b\u4e0d\u7cbe\u786e\uff0c\u901a\u5e38\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c\u6216\u4e0b\u754c\uff0c\u914d\u5408\u4ee3\u5165\u6cd5\u4f7f\u7528\u3002 3.\u4e3b\u65b9\u6cd5( master method ) \u4e3b\u5b9a\u7406\uff1a \u4ee4 $a\\geq 1$ \u548c $ b>1 $ \u662f\u5e38\u6570\uff0c$f(n)$ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c$T(n)$ \u662f\u5b9a\u4e49\u5728\u975e\u8d1f\u6574\u6570\u4e0a\u7684\u9012\u5f52\u5f0f\uff1a$T(n)=aT(n/b)+f(n)$\uff0c\u90a3\u4e48\uff1a \u2003\u2460 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=O(n^{log_ba-\\epsilon})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba})$ \u2003\u2461 \u82e5 $f(n)=O(n^{log_ba})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba}\u00b7lgn)$ \u2003\u2462 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=\\Omega(n^{log_ba+\\epsilon})$\uff0c\u4e14\u5bf9\u5145\u5206\u5927\u7684 $n$ \u6709 $af(n/b)\\leq cf(n)$\uff0c\u5219 $T(n)=\\Theta(f(n))$","title":"3.solving recurrences"},{"location":"1-Fundamentals/1.3/#1substitution-method","text":"Steps: \u2460 \u731c\u6d4b\u89e3\u7684\u5f62\u5f0f \u2461 \u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6c42\u51fa\u89e3\u7684\u5e38\u6570\uff0c\u5e76\u8bc1\u660e\u89e3\u662f\u6b63\u786e\u7684\u3002 e.g.1 $ \\ \\ \\ T(n)=2T(\\lfloor n/2 \\rfloor)+n$ \u731c\u6d4b $T(n)=O(nlgn)$\uff0c\u4ee3\u5165\u5f97\uff1a $$ \\begin{aligned} T(n) & \\leq 2(c\\lfloor n/2 \\rfloor lg(\\lfloor n/2 \\rfloor))+n \\leq cn \\ lg(n/2)+n \\\\ & = cn\\ lgn-cn\\ lg2+n=cn\\ lgn-cn+n \\\\ &\\leq cn\\ lgn \\end{aligned} $$","title":"1.\u66ff\u6362\u65b9\u6cd5(Substitution method)"},{"location":"1-Fundamentals/1.3/#a","text":"\u2460 \u901a\u8fc7\u548c\u5df2\u7ecf\u89c1\u8fc7\u7684\u9012\u5f52\u5f0f\u6bd4\u8f83\uff0c\u5982 $T(n)=2T(\\lfloor n/2 \\rfloor+17)+n$ \u4e2d17\u8d77\u5230\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u5927 \u2461 \u5148\u8bc1\u660e\u8f83\u4f4e\u7684\u4e0a\u754c\u6216\u4e0b\u754c","title":"(a). \u731c\u6d4b\u7684\u65b9\u6cd5"},{"location":"1-Fundamentals/1.3/#b","text":"e.g. $\\ \\ \\ T(n)=T(\\lfloor n/2 \\rfloor)+T(\\lceil n/2 \\rceil)+1$ \u731c\u6d4b $T(n)=O(n)$\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor + c\\lceil n/2 \\rceil + 1=cn+1$\uff0c\u89e3\u4e0d\u51fa\u6765\u3002 \u76f4\u89c9\u4e0a\u5e94\u8be5\u5c1d\u8bd5\u66f4\u5927\u7684\u754c $O(n^2)$\uff0c\u4f46\u539f\u6765\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u505a\u51fa\u66f4\u5f3a\u7684\u5f52\u7eb3\u5047\u8bbe\uff1a\u7531\u4e8e\u548c\u7ed3\u679c\u53ea\u5dee\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u4e0d\u7b49\u5f0f\uff0c\u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879\uff0c\u731c\u6d4b $T(n)\\leq cn-d$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor - d + c\\lceil n/2 \\rceil - d + 1=cn-2d+1\\leq cn-d$\u3002","title":"(b). \u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879"},{"location":"1-Fundamentals/1.3/#c","text":"e.g. $ \\ \\ \\ T(n)=2T(\\sqrt n)+lgn$ \u4ee4 $m=lgn$\uff0c\u5f97 $T(2^m)=2T(2^{m/2})+m$\uff1b\u91cd\u547d\u540d $S(m)=T(2^m)$\uff0c\u5f97 $S(m)=2S(m/2)+m$\u3002 \u6700\u540e $T(n)=T(2^m)=S(m)=O(mlgm)=O(lgn\u00b7lglgn)$","title":"(c). \u53d8\u91cf\u4ee3\u6362"},{"location":"1-Fundamentals/1.3/#2recursion-tree-method","text":"\u5bf9\u9012\u5f52\u5f0f\u8fdb\u884c\u9010\u7ea7\u5c55\u5f00\uff0c\u5f80\u5f80\u8981\u5fcd\u53d7\u4e00\u4e9b\u4e0d\u7cbe\u786e\uff0c\u901a\u5e38\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c\u6216\u4e0b\u754c\uff0c\u914d\u5408\u4ee3\u5165\u6cd5\u4f7f\u7528\u3002","title":"2.\u9012\u5f52\u6811\u6cd5(recursion-tree method)"},{"location":"1-Fundamentals/1.3/#3master-method","text":"\u4e3b\u5b9a\u7406\uff1a \u4ee4 $a\\geq 1$ \u548c $ b>1 $ \u662f\u5e38\u6570\uff0c$f(n)$ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c$T(n)$ \u662f\u5b9a\u4e49\u5728\u975e\u8d1f\u6574\u6570\u4e0a\u7684\u9012\u5f52\u5f0f\uff1a$T(n)=aT(n/b)+f(n)$\uff0c\u90a3\u4e48\uff1a \u2003\u2460 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=O(n^{log_ba-\\epsilon})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba})$ \u2003\u2461 \u82e5 $f(n)=O(n^{log_ba})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba}\u00b7lgn)$ \u2003\u2462 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=\\Omega(n^{log_ba+\\epsilon})$\uff0c\u4e14\u5bf9\u5145\u5206\u5927\u7684 $n$ \u6709 $af(n/b)\\leq cf(n)$\uff0c\u5219 $T(n)=\\Theta(f(n))$","title":"3.\u4e3b\u65b9\u6cd5(master method)"},{"location":"2-sort/2.1/","text":"1.\u5806\u7684\u5b9a\u4e49 (1). \u4e8c\u53c9\u5806\uff1a\u4e00\u4e2a\u7528\u6570\u7ec4\u8868\u793a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811( complete binary tree ) (2). \u6700\u5927\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\geq A[i]$ (3). \u6700\u5c0f\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\leq A[i]$ (4). \u7ed3\u70b9\u7684\u9ad8\u5ea6\uff1a\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u6700\u957f\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee (5). \u5806\u7684\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6 2.\u57fa\u672c\u64cd\u4f5c \u2460 MAX-HEAPIFY(A, i) : \u2003\u5047\u8bbe\u5f53\u524d\u5806\u4ee5 LEFT(i) \u548c RIGHT(i) \u4e3a\u6839\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u90fd\u662f\u6700\u5927\u5806\uff0c A[i] \u4e0e\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u8be5\u64cd\u4f5c\u7528\u4e8e\u7ef4\u62a4\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void MaxHeapify ( Heap * H , int i ) { int father = i ; int child = 2 * i ; int root = H -> A [ i ]; while ( child <= H -> size ) { if ( child < H -> size && H -> A [ child ] < H -> A [ child + 1 ]) { child ++ ; } if ( H -> A [ child ] < root ) { break ; } H -> A [ father ] = H -> A [ child ]; father = child ; child *= 2 ; } H -> A [ father ] = root ; } $T(n)=O(lgn)=O(h)$ \u2461 BUILD-MAX-HEAP(A) : \u2003\u5efa\u5806 1 2 3 4 5 6 void BuildMaxHeap ( Heap * H ) { int i ; for ( i = H -> size / 2 ; i >= 1 ; i -- ) { MaxHeapify ( H , i ); } } \u81ea\u5e95\u5411\u4e0a\uff0c\u8fed\u4ee3\u901a\u8fc7 MaxHeapify(A, i) \u8c03\u6574\u6700\u5927\u5806\u3002 $T(n)=O(n)$\uff0c\u6700\u5927\u8c03\u6574\u6b21\u6570\u4e3a\u5404\u7ed3\u70b9\u9ad8\u5ea6\u548c\u3002 \u2462 HEAP-INCREASE-KEY(A, i, key) : \u2003\u589e\u5927\u5806\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u4e3a\u589e\u5927 A[i] \u540e\uff0c\u6700\u5927\u5806\u7684\u6027\u8d28\u53ef\u80fd\u88ab\u8fdd\u80cc\uff0c\u5728\u5176\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4e0d\u65ad\u4e0e\u5176\u7236\u7ed3\u70b9\u6bd4\u8f83\u5e76\u4ea4\u6362\uff0c\u5bfb\u627e\u9002\u5f53\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 void HeapIncreaseKey ( Heap * H , int i , int key ) { if ( key < H -> A [ i ]) { printf ( \"error: new key is smaller\" ); } while ( i > 1 && H -> A [ i / 2 ] < key ) { H -> A [ i ] = H -> A [ i / 2 ]; i = i / 2 ; } H -> A [ i ] = key ; } $T(n)=O(lgn)$ 3.\u5806\u6392\u5e8f 1 2 3 4 5 6 7 8 9 void HeapSort ( Heap * H ) { BuildMaxHeap ( H ); int i ; for ( i = H -> size ; i >= 2 ; i -- ) { swap ( & H -> A [ i ], & H -> A [ 1 ]); H -> size -- ; MaxHeapify ( H , 1 ); } } 4.\u4f18\u5148\u961f\u5217( priority queue ) \u4e00\u4e2a\u6700\u5927\u4f18\u5148\u961f\u5217\u5e94\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u2003\u2460 INSERT(S, x) : \u628a\u5143\u7d20 x \u63d2\u5165\u96c6\u5408 S \u3002 \u2003\u2461 MAXIMUM(S) : \u8fd4\u56de S \u4e2d\u5177\u6709\u6700\u5927\u5173\u952e\u5b57\u7684\u5143\u7d20\u3002 \u2003\u2462 EXTRACT-MAX(S) : \u53bb\u6389\u5e76\u8fd4\u56de S \u4e2d\u6700\u5927\u5173\u952e\u5b57\u5143\u7d20\u3002 \u2003\u2463 INCREASE-KEY(s, x, k) : \u628a x \u7684\u503c\u589e\u52a0\u5230 k \u3002 1 2 3 4 5 void MaxHeapInsert ( Heap * H , int key ) { H -> size ++ ; H -> A [ H -> size ] = - INF ; HeapIncreaseKey ( H , H -> size , key ); } $T(n)=O(lgn)$ 1 2 3 4 5 6 7 8 9 10 int HeapExtractMax ( Heap * H ) { if ( H -> size < 1 ) { printf ( \"heap underflow\" ); } int max = H -> A [ 1 ]; H -> A [ 1 ] = H -> A [ H -> size ]; H -> size -- ; MaxHeapify ( H , 1 ); return max ; } $T(n)=O(lgn)$","title":"1.Heap and Heapsort"},{"location":"2-sort/2.1/#1","text":"(1). \u4e8c\u53c9\u5806\uff1a\u4e00\u4e2a\u7528\u6570\u7ec4\u8868\u793a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811( complete binary tree ) (2). \u6700\u5927\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\geq A[i]$ (3). \u6700\u5c0f\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\leq A[i]$ (4). \u7ed3\u70b9\u7684\u9ad8\u5ea6\uff1a\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u6700\u957f\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee (5). \u5806\u7684\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6","title":"1.\u5806\u7684\u5b9a\u4e49"},{"location":"2-sort/2.1/#2","text":"\u2460 MAX-HEAPIFY(A, i) : \u2003\u5047\u8bbe\u5f53\u524d\u5806\u4ee5 LEFT(i) \u548c RIGHT(i) \u4e3a\u6839\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u90fd\u662f\u6700\u5927\u5806\uff0c A[i] \u4e0e\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u8be5\u64cd\u4f5c\u7528\u4e8e\u7ef4\u62a4\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void MaxHeapify ( Heap * H , int i ) { int father = i ; int child = 2 * i ; int root = H -> A [ i ]; while ( child <= H -> size ) { if ( child < H -> size && H -> A [ child ] < H -> A [ child + 1 ]) { child ++ ; } if ( H -> A [ child ] < root ) { break ; } H -> A [ father ] = H -> A [ child ]; father = child ; child *= 2 ; } H -> A [ father ] = root ; } $T(n)=O(lgn)=O(h)$ \u2461 BUILD-MAX-HEAP(A) : \u2003\u5efa\u5806 1 2 3 4 5 6 void BuildMaxHeap ( Heap * H ) { int i ; for ( i = H -> size / 2 ; i >= 1 ; i -- ) { MaxHeapify ( H , i ); } } \u81ea\u5e95\u5411\u4e0a\uff0c\u8fed\u4ee3\u901a\u8fc7 MaxHeapify(A, i) \u8c03\u6574\u6700\u5927\u5806\u3002 $T(n)=O(n)$\uff0c\u6700\u5927\u8c03\u6574\u6b21\u6570\u4e3a\u5404\u7ed3\u70b9\u9ad8\u5ea6\u548c\u3002 \u2462 HEAP-INCREASE-KEY(A, i, key) : \u2003\u589e\u5927\u5806\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u4e3a\u589e\u5927 A[i] \u540e\uff0c\u6700\u5927\u5806\u7684\u6027\u8d28\u53ef\u80fd\u88ab\u8fdd\u80cc\uff0c\u5728\u5176\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4e0d\u65ad\u4e0e\u5176\u7236\u7ed3\u70b9\u6bd4\u8f83\u5e76\u4ea4\u6362\uff0c\u5bfb\u627e\u9002\u5f53\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 void HeapIncreaseKey ( Heap * H , int i , int key ) { if ( key < H -> A [ i ]) { printf ( \"error: new key is smaller\" ); } while ( i > 1 && H -> A [ i / 2 ] < key ) { H -> A [ i ] = H -> A [ i / 2 ]; i = i / 2 ; } H -> A [ i ] = key ; } $T(n)=O(lgn)$","title":"2.\u57fa\u672c\u64cd\u4f5c"},{"location":"2-sort/2.1/#3","text":"1 2 3 4 5 6 7 8 9 void HeapSort ( Heap * H ) { BuildMaxHeap ( H ); int i ; for ( i = H -> size ; i >= 2 ; i -- ) { swap ( & H -> A [ i ], & H -> A [ 1 ]); H -> size -- ; MaxHeapify ( H , 1 ); } }","title":"3.\u5806\u6392\u5e8f"},{"location":"2-sort/2.1/#4priority-queue","text":"\u4e00\u4e2a\u6700\u5927\u4f18\u5148\u961f\u5217\u5e94\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u2003\u2460 INSERT(S, x) : \u628a\u5143\u7d20 x \u63d2\u5165\u96c6\u5408 S \u3002 \u2003\u2461 MAXIMUM(S) : \u8fd4\u56de S \u4e2d\u5177\u6709\u6700\u5927\u5173\u952e\u5b57\u7684\u5143\u7d20\u3002 \u2003\u2462 EXTRACT-MAX(S) : \u53bb\u6389\u5e76\u8fd4\u56de S \u4e2d\u6700\u5927\u5173\u952e\u5b57\u5143\u7d20\u3002 \u2003\u2463 INCREASE-KEY(s, x, k) : \u628a x \u7684\u503c\u589e\u52a0\u5230 k \u3002 1 2 3 4 5 void MaxHeapInsert ( Heap * H , int key ) { H -> size ++ ; H -> A [ H -> size ] = - INF ; HeapIncreaseKey ( H , H -> size , key ); } $T(n)=O(lgn)$ 1 2 3 4 5 6 7 8 9 10 int HeapExtractMax ( Heap * H ) { if ( H -> size < 1 ) { printf ( \"heap underflow\" ); } int max = H -> A [ 1 ]; H -> A [ 1 ] = H -> A [ H -> size ]; H -> size -- ; MaxHeapify ( H , 1 ); return max ; } $T(n)=O(lgn)$","title":"4.\u4f18\u5148\u961f\u5217(priority queue)"}]}