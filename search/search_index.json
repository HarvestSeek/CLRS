{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1-Fundamentals/1.1/","text":"1. \u5206\u6790\u7b97\u6cd5\uff1a \u8ba1\u7b97\u65f6\u95f4 \u2003\u4ee5\u4e0b\u7684\u6a21\u578b\u57fa\u4e8e\u5355\u5904\u7406\u5668\u8ba1\u7b97\u6a21\u578b\u2014\u2014 RAM \u6a21\u578b\u8fdb\u884c\u8ba8\u8bba\u3002\u5b83\u6ca1\u6709\u5e76\u53d1\u64cd\u4f5c\uff0c\u4e14\u6307\u4ee4\u96c6\u53ea\u5305\u542b\u4e00\u822c\u8ba1\u7b97\u673a\u7684\u5e38\u89c1\u6307\u4ee4\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u4e0e\u8f93\u5165\u89c4\u6a21\u540c\u6b65\u589e\u957f\uff0c\u6240\u4ee5\u901a\u5e38\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u6210\u5176\u8f93\u5165\u89c4\u6a21\u7684\u51fd\u6570\u3002 \u2003\u8f93\u5165\u89c4\u6a21( input size )\u7684\u6700\u4f73\u6982\u5ff5\u4f9d\u8d56\u4e8e\u6240\u7814\u7a76\u7684\u95ee\u9898\uff1b\u4e00\u4e2a\u7b97\u6cd5\u5728\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4( running time )\u6307\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6216\u6b65\u6570\u3002 \u2003\u4ee5\u63d2\u5165\u6392\u5e8f\u4e3a\u4f8b\uff1a INSERTION-SORT(A) for j = 2 to A.length key = A[j] // Insert A[j] into the sorted sequence A[1..j - 1] i = j - 1 while i > 0 and A[i] > key A[i + 1] = A[i] i = i - 1 A[i + 1] = key \u2003\u8fd0\u884c\u65f6\u95f4\u4f30\u8ba1\uff1a \u884c\u6570 \u4ee3\u4ef7 \u6b21\u6570 2 $c_1$ $n$ 3 $c_2$ $n-1$ 5 $c_4$ $n-1$ 6 $c_5$ $\\sum_{j=2}^nt_j$ 7 $c_6$ $\\sum_{j=2}^n(t_j - 1)$ 8 $c_7$ $\\sum_{j=2}^n(t_j - 1)$ 9 $c_8$ $n-1$ \u2003\u6267\u884c\u6bcf\u884c\u4f2a\u4ee3\u7801\u9700\u8981\u5e38\u91cf\u65f6\u95f4\uff0c\u4e14\u4e0d\u540c\u884c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u4e0e RAM \u6a21\u578b\u662f\u4e00\u81f4\u7684\u3002 \u2003\u82e5\u53ea\u8003\u8651\u6700\u4f73\u60c5\u51b5\uff0c\u5373\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\uff1a $$ \\begin{aligned} T(n) & =c_1n+c_2(n-1)+c_4(n-1)+c_5(n-1)+c_8(n-1) \\\\ & =(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)\\\\ \\end{aligned} $$ 2. \u589e\u957f\u91cf\u7ea7 \u2003\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5ffd\u7565\u9ad8\u9636\u9879\u7cfb\u6570\u548c\u4f4e\u9636\u9879\uff0c\u800c\u662f\u53ea\u5173\u5fc3\u589e\u957f\u91cf\u7ea7( order of growth )\u3002","title":"1.analysis"},{"location":"1-Fundamentals/1.1/#1","text":"\u4ee5\u4e0b\u7684\u6a21\u578b\u57fa\u4e8e\u5355\u5904\u7406\u5668\u8ba1\u7b97\u6a21\u578b\u2014\u2014 RAM \u6a21\u578b\u8fdb\u884c\u8ba8\u8bba\u3002\u5b83\u6ca1\u6709\u5e76\u53d1\u64cd\u4f5c\uff0c\u4e14\u6307\u4ee4\u96c6\u53ea\u5305\u542b\u4e00\u822c\u8ba1\u7b97\u673a\u7684\u5e38\u89c1\u6307\u4ee4\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u4e0e\u8f93\u5165\u89c4\u6a21\u540c\u6b65\u589e\u957f\uff0c\u6240\u4ee5\u901a\u5e38\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u6210\u5176\u8f93\u5165\u89c4\u6a21\u7684\u51fd\u6570\u3002 \u2003\u8f93\u5165\u89c4\u6a21( input size )\u7684\u6700\u4f73\u6982\u5ff5\u4f9d\u8d56\u4e8e\u6240\u7814\u7a76\u7684\u95ee\u9898\uff1b\u4e00\u4e2a\u7b97\u6cd5\u5728\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4( running time )\u6307\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6216\u6b65\u6570\u3002 \u2003\u4ee5\u63d2\u5165\u6392\u5e8f\u4e3a\u4f8b\uff1a INSERTION-SORT(A) for j = 2 to A.length key = A[j] // Insert A[j] into the sorted sequence A[1..j - 1] i = j - 1 while i > 0 and A[i] > key A[i + 1] = A[i] i = i - 1 A[i + 1] = key \u2003\u8fd0\u884c\u65f6\u95f4\u4f30\u8ba1\uff1a \u884c\u6570 \u4ee3\u4ef7 \u6b21\u6570 2 $c_1$ $n$ 3 $c_2$ $n-1$ 5 $c_4$ $n-1$ 6 $c_5$ $\\sum_{j=2}^nt_j$ 7 $c_6$ $\\sum_{j=2}^n(t_j - 1)$ 8 $c_7$ $\\sum_{j=2}^n(t_j - 1)$ 9 $c_8$ $n-1$ \u2003\u6267\u884c\u6bcf\u884c\u4f2a\u4ee3\u7801\u9700\u8981\u5e38\u91cf\u65f6\u95f4\uff0c\u4e14\u4e0d\u540c\u884c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u4e0e RAM \u6a21\u578b\u662f\u4e00\u81f4\u7684\u3002 \u2003\u82e5\u53ea\u8003\u8651\u6700\u4f73\u60c5\u51b5\uff0c\u5373\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\uff1a $$ \\begin{aligned} T(n) & =c_1n+c_2(n-1)+c_4(n-1)+c_5(n-1)+c_8(n-1) \\\\ & =(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)\\\\ \\end{aligned} $$","title":"1. \u5206\u6790\u7b97\u6cd5\uff1a \u8ba1\u7b97\u65f6\u95f4"},{"location":"1-Fundamentals/1.1/#2","text":"\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5ffd\u7565\u9ad8\u9636\u9879\u7cfb\u6570\u548c\u4f4e\u9636\u9879\uff0c\u800c\u662f\u53ea\u5173\u5fc3\u589e\u957f\u91cf\u7ea7( order of growth )\u3002","title":"2. \u589e\u957f\u91cf\u7ea7"},{"location":"1-Fundamentals/1.2/","text":"1.\u589e\u957f\u7684\u9636 $ \\Theta(1) < \\Theta(lgn) < \\Theta(\\sqrt n) < \\Theta(n) < \\Theta(nlgn) < \\Theta(n^2) < \\Theta(n^3) < \\Theta(2^n) < \\Theta(n!) $ 2.\u540c\u9636\u51fd\u6570\u96c6\u5408 $ \\Theta(g(n)) = \\lbrace \\ f(n) \\ | \\ \\exists c_1 \\text{\u3001} c_2 > 0, \\ n_0 ,\\ \\forall n \\geq n_0, \\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\rbrace $ \u5982\u679c$f(n) \\in \\Theta(g(n)), \\ g(n) $\u4e0e$f(n)$\u540c\u9636\uff0c\u8bb0\u4f5c$ f(n) = \\Theta (g(n))$ 3.\u4f4e\u9636\u51fd\u6570\u96c6\u5408 $O(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) \\leq cg(n)\\rbrace$ 4.\u9ad8\u9636\u51fd\u6570\u96c6\u5408 $\\Omega(g(n))=\\lbrace \\ f(n) \\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq cg(n) \\leq f(n) \\rbrace$ 5.\u4e25\u683c\u4f4e\u9636 $o(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\forall c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) < cg(n)\\rbrace$ 6.\u6ce8 \u2460 $f(n)=\\Theta(g(n)) \\Rightarrow f(n)=O(g(n))$\uff0c\u0398 \u6807\u8bb0\u5f3a\u4e8e O \u6807\u8bb0 \u2461 big O \u6807\u8bb0\u53ef\u80fd\u4e0d\u662f\u7d27\u7684\uff0c\u4f8b\u5982 $2n^2=O(n^2)$\u662f\u7d27\u7684\uff0c\u4f46 $2n=O(n^2)$\u4e0d\u662f \u2462 small o \u6807\u8bb0\u7528\u4e8e\u6807\u8bb0\u4e0a\u754c\u4f46\u4e0d\u662f\u7d27\u7684\u7684\u60c5\u51b5\uff0c\u4f8b\u5982 $2n^2 \\ne o(n^2)$","title":"2.asymptotic complexity"},{"location":"1-Fundamentals/1.2/#1","text":"$ \\Theta(1) < \\Theta(lgn) < \\Theta(\\sqrt n) < \\Theta(n) < \\Theta(nlgn) < \\Theta(n^2) < \\Theta(n^3) < \\Theta(2^n) < \\Theta(n!) $","title":"1.\u589e\u957f\u7684\u9636"},{"location":"1-Fundamentals/1.2/#2","text":"$ \\Theta(g(n)) = \\lbrace \\ f(n) \\ | \\ \\exists c_1 \\text{\u3001} c_2 > 0, \\ n_0 ,\\ \\forall n \\geq n_0, \\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\rbrace $ \u5982\u679c$f(n) \\in \\Theta(g(n)), \\ g(n) $\u4e0e$f(n)$\u540c\u9636\uff0c\u8bb0\u4f5c$ f(n) = \\Theta (g(n))$","title":"2.\u540c\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#3","text":"$O(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) \\leq cg(n)\\rbrace$","title":"3.\u4f4e\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#4","text":"$\\Omega(g(n))=\\lbrace \\ f(n) \\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq cg(n) \\leq f(n) \\rbrace$","title":"4.\u9ad8\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#5","text":"$o(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\forall c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) < cg(n)\\rbrace$","title":"5.\u4e25\u683c\u4f4e\u9636"},{"location":"1-Fundamentals/1.2/#6","text":"\u2460 $f(n)=\\Theta(g(n)) \\Rightarrow f(n)=O(g(n))$\uff0c\u0398 \u6807\u8bb0\u5f3a\u4e8e O \u6807\u8bb0 \u2461 big O \u6807\u8bb0\u53ef\u80fd\u4e0d\u662f\u7d27\u7684\uff0c\u4f8b\u5982 $2n^2=O(n^2)$\u662f\u7d27\u7684\uff0c\u4f46 $2n=O(n^2)$\u4e0d\u662f \u2462 small o \u6807\u8bb0\u7528\u4e8e\u6807\u8bb0\u4e0a\u754c\u4f46\u4e0d\u662f\u7d27\u7684\u7684\u60c5\u51b5\uff0c\u4f8b\u5982 $2n^2 \\ne o(n^2)$","title":"6.\u6ce8"},{"location":"1-Fundamentals/1.3/","text":"1. \u66ff\u6362\u65b9\u6cd5( Substitution method ) Steps: \u2460 \u731c\u6d4b\u89e3\u7684\u5f62\u5f0f \u2461 \u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6c42\u51fa\u89e3\u7684\u5e38\u6570\uff0c\u5e76\u8bc1\u660e\u89e3\u662f\u6b63\u786e\u7684\u3002 e.g.1 $ \\ \\ \\ T(n)=2T(\\lfloor n/2 \\rfloor)+n$ \u731c\u6d4b $T(n)=O(nlgn)$\uff0c\u4ee3\u5165\u5f97\uff1a $$ \\begin{aligned} T(n) & \\leq 2(c\\lfloor n/2 \\rfloor lg(\\lfloor n/2 \\rfloor))+n \\leq cn \\ lg(n/2)+n \\\\ & = cn\\ lgn-cn\\ lg2+n=cn\\ lgn-cn+n \\\\ &\\leq cn\\ lgn \\end{aligned} $$ (a). \u731c\u6d4b\u7684\u65b9\u6cd5 \u2460 \u901a\u8fc7\u548c\u5df2\u7ecf\u89c1\u8fc7\u7684\u9012\u5f52\u5f0f\u6bd4\u8f83\uff0c\u5982 $T(n)=2T(\\lfloor n/2 \\rfloor+17)+n$ \u4e2d17\u8d77\u5230\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u5927 \u2461 \u5148\u8bc1\u660e\u8f83\u4f4e\u7684\u4e0a\u754c\u6216\u4e0b\u754c (b). \u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879 e.g. $\\ \\ \\ T(n)=T(\\lfloor n/2 \\rfloor)+T(\\lceil n/2 \\rceil)+1$ \u731c\u6d4b $T(n)=O(n)$\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor + c\\lceil n/2 \\rceil + 1=cn+1$\uff0c\u89e3\u4e0d\u51fa\u6765\u3002 \u76f4\u89c9\u4e0a\u5e94\u8be5\u5c1d\u8bd5\u66f4\u5927\u7684\u754c $O(n^2)$\uff0c\u4f46\u539f\u6765\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u505a\u51fa\u66f4\u5f3a\u7684\u5f52\u7eb3\u5047\u8bbe\uff1a\u7531\u4e8e\u548c\u7ed3\u679c\u53ea\u5dee\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u4e0d\u7b49\u5f0f\uff0c\u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879\uff0c\u731c\u6d4b $T(n)\\leq cn-d$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor - d + c\\lceil n/2 \\rceil - d + 1=cn-2d+1\\leq cn-d$\u3002 (c). \u53d8\u91cf\u4ee3\u6362 e.g. $ \\ \\ \\ T(n)=2T(\\sqrt n)+lgn$ \u4ee4 $m=lgn$\uff0c\u5f97 $T(2^m)=2T(2^{m/2})+m$\uff1b\u91cd\u547d\u540d $S(m)=T(2^m)$\uff0c\u5f97 $S(m)=2S(m/2)+m$\u3002 \u6700\u540e $T(n)=T(2^m)=S(m)=O(mlgm)=O(lgn\u00b7lglgn)$ 2. \u9012\u5f52\u6811\u6cd5( recursion-tree method ) \u2003\u5bf9\u9012\u5f52\u5f0f\u8fdb\u884c\u9010\u7ea7\u5c55\u5f00\uff0c\u5f80\u5f80\u8981\u5fcd\u53d7\u4e00\u4e9b\u4e0d\u7cbe\u786e\uff0c\u901a\u5e38\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c\u6216\u4e0b\u754c\uff0c\u914d\u5408\u4ee3\u5165\u6cd5\u4f7f\u7528\u3002 3. \u4e3b\u65b9\u6cd5( master method ) \u4e3b\u5b9a\u7406\uff1a \u4ee4 $a\\geq 1$ \u548c $ b>1 $ \u662f\u5e38\u6570\uff0c$f(n)$ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c$T(n)$ \u662f\u5b9a\u4e49\u5728\u975e\u8d1f\u6574\u6570\u4e0a\u7684\u9012\u5f52\u5f0f\uff1a$T(n)=aT(n/b)+f(n)$\uff0c\u90a3\u4e48\uff1a \u2003\u2460 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=O(n^{log_ba-\\epsilon})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba})$ \u2003\u2461 \u82e5 $f(n)=O(n^{log_ba})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba}\u00b7log_bn)$ \u2003\u2462 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=\\Omega(n^{log_ba+\\epsilon})$\uff0c\u4e14\u5bf9\u5145\u5206\u5927\u7684 $n$ \u6709 $af(n/b)\\leq cf(n)$\uff0c\u5219 $T(n)=\\Theta(f(n))$","title":"3.solving recurrences"},{"location":"1-Fundamentals/1.3/#1-substitution-method","text":"Steps: \u2460 \u731c\u6d4b\u89e3\u7684\u5f62\u5f0f \u2461 \u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6c42\u51fa\u89e3\u7684\u5e38\u6570\uff0c\u5e76\u8bc1\u660e\u89e3\u662f\u6b63\u786e\u7684\u3002 e.g.1 $ \\ \\ \\ T(n)=2T(\\lfloor n/2 \\rfloor)+n$ \u731c\u6d4b $T(n)=O(nlgn)$\uff0c\u4ee3\u5165\u5f97\uff1a $$ \\begin{aligned} T(n) & \\leq 2(c\\lfloor n/2 \\rfloor lg(\\lfloor n/2 \\rfloor))+n \\leq cn \\ lg(n/2)+n \\\\ & = cn\\ lgn-cn\\ lg2+n=cn\\ lgn-cn+n \\\\ &\\leq cn\\ lgn \\end{aligned} $$","title":"1. \u66ff\u6362\u65b9\u6cd5(Substitution method)"},{"location":"1-Fundamentals/1.3/#a","text":"\u2460 \u901a\u8fc7\u548c\u5df2\u7ecf\u89c1\u8fc7\u7684\u9012\u5f52\u5f0f\u6bd4\u8f83\uff0c\u5982 $T(n)=2T(\\lfloor n/2 \\rfloor+17)+n$ \u4e2d17\u8d77\u5230\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u5927 \u2461 \u5148\u8bc1\u660e\u8f83\u4f4e\u7684\u4e0a\u754c\u6216\u4e0b\u754c","title":"(a). \u731c\u6d4b\u7684\u65b9\u6cd5"},{"location":"1-Fundamentals/1.3/#b","text":"e.g. $\\ \\ \\ T(n)=T(\\lfloor n/2 \\rfloor)+T(\\lceil n/2 \\rceil)+1$ \u731c\u6d4b $T(n)=O(n)$\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor + c\\lceil n/2 \\rceil + 1=cn+1$\uff0c\u89e3\u4e0d\u51fa\u6765\u3002 \u76f4\u89c9\u4e0a\u5e94\u8be5\u5c1d\u8bd5\u66f4\u5927\u7684\u754c $O(n^2)$\uff0c\u4f46\u539f\u6765\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u505a\u51fa\u66f4\u5f3a\u7684\u5f52\u7eb3\u5047\u8bbe\uff1a\u7531\u4e8e\u548c\u7ed3\u679c\u53ea\u5dee\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u4e0d\u7b49\u5f0f\uff0c\u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879\uff0c\u731c\u6d4b $T(n)\\leq cn-d$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor - d + c\\lceil n/2 \\rceil - d + 1=cn-2d+1\\leq cn-d$\u3002","title":"(b). \u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879"},{"location":"1-Fundamentals/1.3/#c","text":"e.g. $ \\ \\ \\ T(n)=2T(\\sqrt n)+lgn$ \u4ee4 $m=lgn$\uff0c\u5f97 $T(2^m)=2T(2^{m/2})+m$\uff1b\u91cd\u547d\u540d $S(m)=T(2^m)$\uff0c\u5f97 $S(m)=2S(m/2)+m$\u3002 \u6700\u540e $T(n)=T(2^m)=S(m)=O(mlgm)=O(lgn\u00b7lglgn)$","title":"(c). \u53d8\u91cf\u4ee3\u6362"},{"location":"1-Fundamentals/1.3/#2-recursion-tree-method","text":"\u5bf9\u9012\u5f52\u5f0f\u8fdb\u884c\u9010\u7ea7\u5c55\u5f00\uff0c\u5f80\u5f80\u8981\u5fcd\u53d7\u4e00\u4e9b\u4e0d\u7cbe\u786e\uff0c\u901a\u5e38\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c\u6216\u4e0b\u754c\uff0c\u914d\u5408\u4ee3\u5165\u6cd5\u4f7f\u7528\u3002","title":"2. \u9012\u5f52\u6811\u6cd5(recursion-tree method)"},{"location":"1-Fundamentals/1.3/#3-master-method","text":"\u4e3b\u5b9a\u7406\uff1a \u4ee4 $a\\geq 1$ \u548c $ b>1 $ \u662f\u5e38\u6570\uff0c$f(n)$ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c$T(n)$ \u662f\u5b9a\u4e49\u5728\u975e\u8d1f\u6574\u6570\u4e0a\u7684\u9012\u5f52\u5f0f\uff1a$T(n)=aT(n/b)+f(n)$\uff0c\u90a3\u4e48\uff1a \u2003\u2460 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=O(n^{log_ba-\\epsilon})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba})$ \u2003\u2461 \u82e5 $f(n)=O(n^{log_ba})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba}\u00b7log_bn)$ \u2003\u2462 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=\\Omega(n^{log_ba+\\epsilon})$\uff0c\u4e14\u5bf9\u5145\u5206\u5927\u7684 $n$ \u6709 $af(n/b)\\leq cf(n)$\uff0c\u5219 $T(n)=\\Theta(f(n))$","title":"3. \u4e3b\u65b9\u6cd5(master method)"},{"location":"2-sort/2.1/","text":"","title":"1.Simple Sort"},{"location":"2-sort/2.2/","text":"","title":"2.Mergesort"},{"location":"2-sort/2.3/","text":"1.\u5806\u7684\u5b9a\u4e49 (1). \u4e8c\u53c9\u5806\uff1a\u4e00\u4e2a\u7528\u6570\u7ec4\u8868\u793a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811( complete binary tree ) (2). \u6700\u5927\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\geq A[i]$ (3). \u6700\u5c0f\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\leq A[i]$ (4). \u7ed3\u70b9\u7684\u9ad8\u5ea6\uff1a\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u6700\u957f\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee (5). \u5806\u7684\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6 2.\u57fa\u672c\u64cd\u4f5c \u2460 MAX-HEAPIFY(A, i) : \u2003\u5047\u8bbe\u5f53\u524d\u5806\u4ee5 LEFT(i) \u548c RIGHT(i) \u4e3a\u6839\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u90fd\u662f\u6700\u5927\u5806\uff0c A[i] \u4e0e\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u8be5\u64cd\u4f5c\u7528\u4e8e\u7ef4\u62a4\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 void MaxHeapify ( Heap * H , int i ) { int father = i ; int child = 2 * i ; int root = H -> A [ i ]; while ( child <= H -> size ) { if ( child < H -> size && H -> A [ child ] < H -> A [ child + 1 ]) { child ++ ; } if ( H -> A [ child ] < root ) { break ; } H -> A [ father ] = H -> A [ child ]; father = child ; child *= 2 ; } H -> A [ father ] = root ; } $T(n)=O(lgn)=O(h)$ \u2461 BUILD-MAX-HEAP(A) : \u2003\u5efa\u5806 void BuildMaxHeap ( Heap * H ) { int i ; for ( i = H -> size / 2 ; i >= 1 ; i -- ) { MaxHeapify ( H , i ); } } \u81ea\u5e95\u5411\u4e0a\uff0c\u8fed\u4ee3\u901a\u8fc7 MaxHeapify(A, i) \u8c03\u6574\u6700\u5927\u5806\u3002 $T(n)=O(n)$\uff0c\u6700\u5927\u8c03\u6574\u6b21\u6570\u4e3a\u5404\u7ed3\u70b9\u9ad8\u5ea6\u548c\u3002 \u2462 HEAP-INCREASE-KEY(A, i, key) : \u2003\u589e\u5927\u5806\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u4e3a\u589e\u5927 A[i] \u540e\uff0c\u6700\u5927\u5806\u7684\u6027\u8d28\u53ef\u80fd\u88ab\u8fdd\u80cc\uff0c\u5728\u5176\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4e0d\u65ad\u4e0e\u5176\u7236\u7ed3\u70b9\u6bd4\u8f83\u5e76\u4ea4\u6362\uff0c\u5bfb\u627e\u9002\u5f53\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 void HeapIncreaseKey ( Heap * H , int i , int key ) { if ( key < H -> A [ i ]) { printf ( \"error: new key is smaller\" ); } while ( i > 1 && H -> A [ i / 2 ] < key ) { H -> A [ i ] = H -> A [ i / 2 ]; i = i / 2 ; } H -> A [ i ] = key ; } $T(n)=O(lgn)$ 3.\u5806\u6392\u5e8f \u5148\u5efa\u5806\uff0c\u968f\u540e\u4e0d\u65ad\u628a\u5806\u9876\u5143\u7d20\u4ea4\u6362\u5230\u672b\u5c3e\u3001\u7f29\u5c0f\u5806\u5e76\u8c03\u6574\uff0c\u76f4\u5230\u6392\u597d\u5e8f\u3002 void HeapSort ( Heap * H ) { BuildMaxHeap ( H ); int i ; for ( i = H -> size ; i >= 2 ; i -- ) { swap ( & H -> A [ i ], & H -> A [ 1 ]); H -> size -- ; MaxHeapify ( H , 1 ); } } \u76f8\u6bd4\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u65e0\u8bba\u597d\u574f\u60c5\u51b5\uff0c\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\uff0c\u4f46\u662f\u5b83\u7684\u590d\u6742\u5ea6\u4e2d\u7684\u5e38\u6570\u8f83\u5927\uff0c\u56e0\u6b64\u901a\u5e38\u6bd4\u5feb\u6392\u6162\u3002 \u5806\u6392\u5e8f\u7684\u7279\u70b9\uff1a \u2460 \u5806\u6392\u5e8f\u4e0d\u7a33\u5b9a \u2461 \u5bf9\u7f13\u5b58\u4e0d\u53cb\u597d \u2462 \u65e0\u6240\u8c13\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\uff0c\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$ (\u5f53\u6240\u6709\u5143\u7d20\u76f8\u540c\u65f6\u4e3a $O(n)$) 4.\u4f18\u5148\u961f\u5217( priority queue ) \u4e00\u4e2a\u6700\u5927\u4f18\u5148\u961f\u5217\u5e94\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u2003\u2460 INSERT(S, x) : \u628a\u5143\u7d20 x \u63d2\u5165\u96c6\u5408 S \u3002 \u2003\u2461 MAXIMUM(S) : \u8fd4\u56de S \u4e2d\u5177\u6709\u6700\u5927\u5173\u952e\u5b57\u7684\u5143\u7d20\u3002 \u2003\u2462 EXTRACT-MAX(S) : \u53bb\u6389\u5e76\u8fd4\u56de S \u4e2d\u6700\u5927\u5173\u952e\u5b57\u5143\u7d20\u3002 \u2003\u2463 INCREASE-KEY(s, x, k) : \u628a x \u7684\u503c\u589e\u52a0\u5230 k \u3002 void MaxHeapInsert ( Heap * H , int key ) { H -> size ++ ; H -> A [ H -> size ] = - INF ; HeapIncreaseKey ( H , H -> size , key ); } $T(n)=O(lgn)$ int HeapExtractMax ( Heap * H ) { if ( H -> size < 1 ) { printf ( \"heap underflow\" ); } int max = H -> A [ 1 ]; H -> A [ 1 ] = H -> A [ H -> size ]; H -> size -- ; MaxHeapify ( H , 1 ); return max ; } $T(n)=O(lgn)$","title":"3.Heap and Heapsort"},{"location":"2-sort/2.3/#1","text":"(1). \u4e8c\u53c9\u5806\uff1a\u4e00\u4e2a\u7528\u6570\u7ec4\u8868\u793a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811( complete binary tree ) (2). \u6700\u5927\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\geq A[i]$ (3). \u6700\u5c0f\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\leq A[i]$ (4). \u7ed3\u70b9\u7684\u9ad8\u5ea6\uff1a\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u6700\u957f\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee (5). \u5806\u7684\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6","title":"1.\u5806\u7684\u5b9a\u4e49"},{"location":"2-sort/2.3/#2","text":"\u2460 MAX-HEAPIFY(A, i) : \u2003\u5047\u8bbe\u5f53\u524d\u5806\u4ee5 LEFT(i) \u548c RIGHT(i) \u4e3a\u6839\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u90fd\u662f\u6700\u5927\u5806\uff0c A[i] \u4e0e\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u8be5\u64cd\u4f5c\u7528\u4e8e\u7ef4\u62a4\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 void MaxHeapify ( Heap * H , int i ) { int father = i ; int child = 2 * i ; int root = H -> A [ i ]; while ( child <= H -> size ) { if ( child < H -> size && H -> A [ child ] < H -> A [ child + 1 ]) { child ++ ; } if ( H -> A [ child ] < root ) { break ; } H -> A [ father ] = H -> A [ child ]; father = child ; child *= 2 ; } H -> A [ father ] = root ; } $T(n)=O(lgn)=O(h)$ \u2461 BUILD-MAX-HEAP(A) : \u2003\u5efa\u5806 void BuildMaxHeap ( Heap * H ) { int i ; for ( i = H -> size / 2 ; i >= 1 ; i -- ) { MaxHeapify ( H , i ); } } \u81ea\u5e95\u5411\u4e0a\uff0c\u8fed\u4ee3\u901a\u8fc7 MaxHeapify(A, i) \u8c03\u6574\u6700\u5927\u5806\u3002 $T(n)=O(n)$\uff0c\u6700\u5927\u8c03\u6574\u6b21\u6570\u4e3a\u5404\u7ed3\u70b9\u9ad8\u5ea6\u548c\u3002 \u2462 HEAP-INCREASE-KEY(A, i, key) : \u2003\u589e\u5927\u5806\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u4e3a\u589e\u5927 A[i] \u540e\uff0c\u6700\u5927\u5806\u7684\u6027\u8d28\u53ef\u80fd\u88ab\u8fdd\u80cc\uff0c\u5728\u5176\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4e0d\u65ad\u4e0e\u5176\u7236\u7ed3\u70b9\u6bd4\u8f83\u5e76\u4ea4\u6362\uff0c\u5bfb\u627e\u9002\u5f53\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 void HeapIncreaseKey ( Heap * H , int i , int key ) { if ( key < H -> A [ i ]) { printf ( \"error: new key is smaller\" ); } while ( i > 1 && H -> A [ i / 2 ] < key ) { H -> A [ i ] = H -> A [ i / 2 ]; i = i / 2 ; } H -> A [ i ] = key ; } $T(n)=O(lgn)$","title":"2.\u57fa\u672c\u64cd\u4f5c"},{"location":"2-sort/2.3/#3","text":"\u5148\u5efa\u5806\uff0c\u968f\u540e\u4e0d\u65ad\u628a\u5806\u9876\u5143\u7d20\u4ea4\u6362\u5230\u672b\u5c3e\u3001\u7f29\u5c0f\u5806\u5e76\u8c03\u6574\uff0c\u76f4\u5230\u6392\u597d\u5e8f\u3002 void HeapSort ( Heap * H ) { BuildMaxHeap ( H ); int i ; for ( i = H -> size ; i >= 2 ; i -- ) { swap ( & H -> A [ i ], & H -> A [ 1 ]); H -> size -- ; MaxHeapify ( H , 1 ); } } \u76f8\u6bd4\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u65e0\u8bba\u597d\u574f\u60c5\u51b5\uff0c\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\uff0c\u4f46\u662f\u5b83\u7684\u590d\u6742\u5ea6\u4e2d\u7684\u5e38\u6570\u8f83\u5927\uff0c\u56e0\u6b64\u901a\u5e38\u6bd4\u5feb\u6392\u6162\u3002 \u5806\u6392\u5e8f\u7684\u7279\u70b9\uff1a \u2460 \u5806\u6392\u5e8f\u4e0d\u7a33\u5b9a \u2461 \u5bf9\u7f13\u5b58\u4e0d\u53cb\u597d \u2462 \u65e0\u6240\u8c13\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\uff0c\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$ (\u5f53\u6240\u6709\u5143\u7d20\u76f8\u540c\u65f6\u4e3a $O(n)$)","title":"3.\u5806\u6392\u5e8f"},{"location":"2-sort/2.3/#4priority-queue","text":"\u4e00\u4e2a\u6700\u5927\u4f18\u5148\u961f\u5217\u5e94\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u2003\u2460 INSERT(S, x) : \u628a\u5143\u7d20 x \u63d2\u5165\u96c6\u5408 S \u3002 \u2003\u2461 MAXIMUM(S) : \u8fd4\u56de S \u4e2d\u5177\u6709\u6700\u5927\u5173\u952e\u5b57\u7684\u5143\u7d20\u3002 \u2003\u2462 EXTRACT-MAX(S) : \u53bb\u6389\u5e76\u8fd4\u56de S \u4e2d\u6700\u5927\u5173\u952e\u5b57\u5143\u7d20\u3002 \u2003\u2463 INCREASE-KEY(s, x, k) : \u628a x \u7684\u503c\u589e\u52a0\u5230 k \u3002 void MaxHeapInsert ( Heap * H , int key ) { H -> size ++ ; H -> A [ H -> size ] = - INF ; HeapIncreaseKey ( H , H -> size , key ); } $T(n)=O(lgn)$ int HeapExtractMax ( Heap * H ) { if ( H -> size < 1 ) { printf ( \"heap underflow\" ); } int max = H -> A [ 1 ]; H -> A [ 1 ] = H -> A [ H -> size ]; H -> size -- ; MaxHeapify ( H , 1 ); return max ; } $T(n)=O(lgn)$","title":"4.\u4f18\u5148\u961f\u5217(priority queue)"},{"location":"2-sort/2.4/","text":"1. \u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u63cf\u8ff0 \u2460 QUICKSORT(A, l, r) : \u2003\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\u5206\u6cbb\u3002 void QuickSort ( int A [], int left , int right ) { if ( left < right ) { int i = partition ( A , left , right ); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } } \u2461 PARTITION(A, l, r) : \u5feb\u901f\u6392\u5e8f\u7684\u6838\u5fc3\u662f\u5212\u5206\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u9009\u53d6\u4e3b\u5143( pivot element )\uff0c\u901a\u8fc7\u4e3b\u5143\u518d\u628a\u6392\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\u3002\u4ee5\u4e0b\u4ee3\u7801\u4ee5 pivot=A[r] \u4e3a\u4f8b\u3002 int partition ( int A [], int left , int right ) { int pivot = A [ right ]; int i = left - 1 ; int j ; for ( j = left ; j <= right - 1 ; j ++ ) { if ( A [ j ] <= pivot ) { i ++ ; swap ( & A [ i ], & A [ j ]); } } swap ( & A [ i + 1 ], & A [ right ]); return i + 1 ; } \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6570\u7ec4\u88ab\u5212\u5206\u4e3a\u56db\u4e2a\u533a\u57df\uff0c\u6bcf\u4e00\u4e2a\u533a\u57df\u90fd\u6ee1\u8db3\u4e00\u5b9a\u6027\u8d28\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5faa\u73af\u4e0d\u53d8\u91cf\u3002 \u6bcf\u4e00\u8f6e\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u5bf9\u4efb\u610f\u6570\u7ec4\u4e0b\u6807 k \uff0c\u6709\uff1a \u20031. \u82e5 l \u2264 k \u2264 i \uff0c\u5219 A[k] \u2264 pivot \u3002 \u20032. \u82e5 i + 1 \u2264 k \u2264 j - 1 \uff0c\u5219 A[k] > pivot \u3002 2. \u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u5206\u6790 (1). \u6700\u574f\u60c5\u51b5 \u2003\u5f53\u5212\u5206\u4ea7\u751f\u7684\u4e24\u4e2a\u5b50\u95ee\u9898\u5206\u522b\u5305\u542bn-1\u4e2a\u5143\u7d20\u548c0\u4e2a\u5143\u7d20\u65f6\uff0c$T(0)=\\Theta(1)$\uff0c\u56e0\u6b64\u6709\uff1a $T(n)=T(n-1)+\\Theta(n)$\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u590d\u6742\u5ea6\u7684\u7ed3\u679c\u4e3a\u7ea7\u6570\u7684\u548c\uff0c\u5373 $\\Theta(n^2)$\u3002 (2). \u5e73\u8861\u5212\u5206 \u2003\u5728\u53ef\u80fd\u6700\u5e73\u8861\u7684\u5212\u5206\u4e2d\uff0c\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5206\u522b\u4e3a $\\lfloor n/2 \\rfloor$ \u548c $\\lceil n/2 \\rceil-1$\uff0c\u4e8e\u662f\u6709\u9012\u5f52\u5f0f\uff1a$T(n)=2T(n/2)+\\Theta(n)$\uff0c\u89e3\u4e3a $T(n)=\\Theta(nlgn)$\u3002 \u2003\u5b9e\u9645\u4e0a\uff0c\u5feb\u6392\u7684\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u66f4\u63a5\u8fd1\u6700\u597d\u60c5\u51b5\u800c\u975e\u6700\u574f\u60c5\u51b5\u3002 \u2003\u5bf9\u4e8e\u4efb\u4f55\u4e00\u79cd\u5e38\u6570\u6bd4\u4f8b\u7684\u5212\u5206\uff0c\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\u3002\u4ee5 $T(n)=T(9n/10)+T(n/10)+cn$ \u4e3a\u4f8b\uff0c\u753b\u51fa\u9012\u5f52\u6811\u53ef\u5f97\u6bcf\u5c42\u7684\u4ee3\u4ef7\u90fd\u662f $cn$ \uff0c\u5176\u6df1\u5ea6\u4e3a $log_{10/9}n$\u3002 (3). \u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\u5206\u6790 \u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5373\u4e3b\u5143\u968f\u673a\u9009\u53d6 RANDOMIZED - PARTITION ( A , left , right ) i = RANDOM ( left , right ) exchange A [ right ] with A [ i ] return PARTITION ( A , left , right ) \u63a8\u5bfc\u524d\u7684\u51c6\u5907\uff1a \u2460 \u5f53\u5728\u5143\u7d20\u4e2a\u6570\u4e3a n \u7684\u6570\u7ec4\u4e0a\u8fd0\u884c QUICKSORT \u65f6\uff0c\u5047\u8bbe\u5728 PARTITION \u5904\u7684\u6bd4\u8f83\u6b21\u6570\u4e3a $X$\uff0c\u5219 QUICKSORT \u7684\u8fd0\u884c\u65f6\u95f4\u4e3a $O(n+X)$\u3002 \u2003- \u81f3\u591a\u8c03\u7528 PARTITION $n$ \u6b21\uff0c\u8c03\u7528\u65f6\u95f4\u4e3a $O(n)$ \u52a0\u4e0a\u8fed\u4ee3\u65f6\u95f4(\u6bd4\u8f83\u6b21\u6570)\u3002 \u2461 \u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u4e0e\u4e3b\u5143\u6bd4\u8f83\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u5bf9\u5143\u7d20\uff0c\u5b83\u4eec\u81f3\u591a\u6bd4\u8f83\u4e00\u6b21 \u2462 \u4e00\u65e6\u4e3b\u5143 $z_i<pivot<z_j$ \u88ab\u9009\u62e9\uff0c\u88ab\u5212\u5206\u7684 $z_i$ \u4e0e $z_j$ \u4e0d\u53ef\u80fd\u518d\u6bd4\u8f83(\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u4e92\u5f02) \u63a8\u5bfc\uff1a \u2003\u8bbe $X_{ij}= \\begin{cases} 1& if\\ z_i\\ compares\\ with\\ z_j\\\\ 0& else \\end{cases}$\uff0c$X= \\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}$ \u2003\u5219\u6709 $$\\begin{aligned} E(X)=E[\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}]&=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u4e0e}z_j\\text{\u6bd4\u8f83}\\rbrace) \\\\ &=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u6216}z_j\\text{\u662f\u96c6\u5408}Z_{ij}\u4e2d\u9009\u51fa\u7684\u7b2c\u4e00\u4e2a\u4e3b\u5143\\rbrace) \\\\ &=\\sum\\sum(\\frac{1}{j+i-1}+\\frac{1}{j+i-1})=\\sum\\frac{2}{j+i-1} \\\\ &< \\sum_{i=1}^{n-1}\\sum_{n}^{k=1} \\frac{2}{k}=O(nlgn) \\end{aligned}$$ \u2003\u6545\u5f97\u51fa\u7ed3\u8bba\uff1a\u4f7f\u7528\u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5728\u8f93\u5165\u5143\u7d20\u4e92\u5f02\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u6392\u7684\u671f\u671b\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$\u3002 (4). \u5feb\u6392\u7279\u70b9 \u2460 \u671f\u671b\u590d\u6742\u5ea6\u4e3a $\\Theta(nlgn)$\uff0c\u4e0e\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u76f8\u540c\uff0c\u4f46\u5176\u5e38\u6570\u66f4\u5c0f\uff0c\u901f\u5ea6\u66f4\u5feb \u2461 \u5feb\u6392\u662f\u4e0d\u7a33\u5b9a\u7684 3. \u4e09\u6570\u53d6\u4e2d\u5212\u5206 \u4ece\u5b50\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u53d6\u4e09\u4e2a\u5143\u7d20\uff0c\u53d6\u5176\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u4e3b\u5143\u3002 int median3 ( int A [], int left , int right ) { int center = ( left + right ) / 2 ; if ( A [ left ] > A [ right ]) { swap ( & A [ left ], & A [ right ]); } if ( A [ left ] > A [ center ]) { swap ( & A [ left ], & A [ center ]); } if ( A [ center ] > A [ right ]) { swap ( & A [ center ], & A [ right ]); } swap ( & A [ center ], & A [ right - 1 ]); return A [ right - 1 ]; } \u5728\u4ee3\u7801\u4e0a\uff0c\u8981\u6ce8\u610f\u5f53\u95ee\u9898\u89c4\u6a21\u4e3a2\u65f6\u8981\u5355\u72ec\u8003\u8651\u3002 void QuickSort ( int A [], int left , int right ) { if ( right > left + 1 ) { int pivot = median3 ( A , left , right ); int i = left ; int j = right - 1 ; while ( 1 ) { while ( A [ ++ i ] < pivot ){ } // less or equal cannot fit that the pivot needn`t move while ( A [ -- j ] > pivot ){ } // for i should stop at the pivot if ( j > i ) swap ( & A [ i ], & A [ j ]); else break ; } swap ( & A [ i ], & A [ right - 1 ]); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } else { if ( A [ right ] < A [ left ]) { swap ( & A [ right ], & A [ left ]); } } }","title":"4.Quicksort"},{"location":"2-sort/2.4/#1","text":"\u2460 QUICKSORT(A, l, r) : \u2003\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\u5206\u6cbb\u3002 void QuickSort ( int A [], int left , int right ) { if ( left < right ) { int i = partition ( A , left , right ); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } } \u2461 PARTITION(A, l, r) : \u5feb\u901f\u6392\u5e8f\u7684\u6838\u5fc3\u662f\u5212\u5206\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u9009\u53d6\u4e3b\u5143( pivot element )\uff0c\u901a\u8fc7\u4e3b\u5143\u518d\u628a\u6392\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\u3002\u4ee5\u4e0b\u4ee3\u7801\u4ee5 pivot=A[r] \u4e3a\u4f8b\u3002 int partition ( int A [], int left , int right ) { int pivot = A [ right ]; int i = left - 1 ; int j ; for ( j = left ; j <= right - 1 ; j ++ ) { if ( A [ j ] <= pivot ) { i ++ ; swap ( & A [ i ], & A [ j ]); } } swap ( & A [ i + 1 ], & A [ right ]); return i + 1 ; } \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6570\u7ec4\u88ab\u5212\u5206\u4e3a\u56db\u4e2a\u533a\u57df\uff0c\u6bcf\u4e00\u4e2a\u533a\u57df\u90fd\u6ee1\u8db3\u4e00\u5b9a\u6027\u8d28\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5faa\u73af\u4e0d\u53d8\u91cf\u3002 \u6bcf\u4e00\u8f6e\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u5bf9\u4efb\u610f\u6570\u7ec4\u4e0b\u6807 k \uff0c\u6709\uff1a \u20031. \u82e5 l \u2264 k \u2264 i \uff0c\u5219 A[k] \u2264 pivot \u3002 \u20032. \u82e5 i + 1 \u2264 k \u2264 j - 1 \uff0c\u5219 A[k] > pivot \u3002","title":"1. \u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u63cf\u8ff0"},{"location":"2-sort/2.4/#2","text":"","title":"2. \u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u5206\u6790"},{"location":"2-sort/2.4/#1_1","text":"\u5f53\u5212\u5206\u4ea7\u751f\u7684\u4e24\u4e2a\u5b50\u95ee\u9898\u5206\u522b\u5305\u542bn-1\u4e2a\u5143\u7d20\u548c0\u4e2a\u5143\u7d20\u65f6\uff0c$T(0)=\\Theta(1)$\uff0c\u56e0\u6b64\u6709\uff1a $T(n)=T(n-1)+\\Theta(n)$\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u590d\u6742\u5ea6\u7684\u7ed3\u679c\u4e3a\u7ea7\u6570\u7684\u548c\uff0c\u5373 $\\Theta(n^2)$\u3002","title":"(1). \u6700\u574f\u60c5\u51b5"},{"location":"2-sort/2.4/#2_1","text":"\u5728\u53ef\u80fd\u6700\u5e73\u8861\u7684\u5212\u5206\u4e2d\uff0c\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5206\u522b\u4e3a $\\lfloor n/2 \\rfloor$ \u548c $\\lceil n/2 \\rceil-1$\uff0c\u4e8e\u662f\u6709\u9012\u5f52\u5f0f\uff1a$T(n)=2T(n/2)+\\Theta(n)$\uff0c\u89e3\u4e3a $T(n)=\\Theta(nlgn)$\u3002 \u2003\u5b9e\u9645\u4e0a\uff0c\u5feb\u6392\u7684\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u66f4\u63a5\u8fd1\u6700\u597d\u60c5\u51b5\u800c\u975e\u6700\u574f\u60c5\u51b5\u3002 \u2003\u5bf9\u4e8e\u4efb\u4f55\u4e00\u79cd\u5e38\u6570\u6bd4\u4f8b\u7684\u5212\u5206\uff0c\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\u3002\u4ee5 $T(n)=T(9n/10)+T(n/10)+cn$ \u4e3a\u4f8b\uff0c\u753b\u51fa\u9012\u5f52\u6811\u53ef\u5f97\u6bcf\u5c42\u7684\u4ee3\u4ef7\u90fd\u662f $cn$ \uff0c\u5176\u6df1\u5ea6\u4e3a $log_{10/9}n$\u3002","title":"(2). \u5e73\u8861\u5212\u5206"},{"location":"2-sort/2.4/#3","text":"\u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5373\u4e3b\u5143\u968f\u673a\u9009\u53d6 RANDOMIZED - PARTITION ( A , left , right ) i = RANDOM ( left , right ) exchange A [ right ] with A [ i ] return PARTITION ( A , left , right ) \u63a8\u5bfc\u524d\u7684\u51c6\u5907\uff1a \u2460 \u5f53\u5728\u5143\u7d20\u4e2a\u6570\u4e3a n \u7684\u6570\u7ec4\u4e0a\u8fd0\u884c QUICKSORT \u65f6\uff0c\u5047\u8bbe\u5728 PARTITION \u5904\u7684\u6bd4\u8f83\u6b21\u6570\u4e3a $X$\uff0c\u5219 QUICKSORT \u7684\u8fd0\u884c\u65f6\u95f4\u4e3a $O(n+X)$\u3002 \u2003- \u81f3\u591a\u8c03\u7528 PARTITION $n$ \u6b21\uff0c\u8c03\u7528\u65f6\u95f4\u4e3a $O(n)$ \u52a0\u4e0a\u8fed\u4ee3\u65f6\u95f4(\u6bd4\u8f83\u6b21\u6570)\u3002 \u2461 \u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u4e0e\u4e3b\u5143\u6bd4\u8f83\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u5bf9\u5143\u7d20\uff0c\u5b83\u4eec\u81f3\u591a\u6bd4\u8f83\u4e00\u6b21 \u2462 \u4e00\u65e6\u4e3b\u5143 $z_i<pivot<z_j$ \u88ab\u9009\u62e9\uff0c\u88ab\u5212\u5206\u7684 $z_i$ \u4e0e $z_j$ \u4e0d\u53ef\u80fd\u518d\u6bd4\u8f83(\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u4e92\u5f02) \u63a8\u5bfc\uff1a \u2003\u8bbe $X_{ij}= \\begin{cases} 1& if\\ z_i\\ compares\\ with\\ z_j\\\\ 0& else \\end{cases}$\uff0c$X= \\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}$ \u2003\u5219\u6709 $$\\begin{aligned} E(X)=E[\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}]&=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u4e0e}z_j\\text{\u6bd4\u8f83}\\rbrace) \\\\ &=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u6216}z_j\\text{\u662f\u96c6\u5408}Z_{ij}\u4e2d\u9009\u51fa\u7684\u7b2c\u4e00\u4e2a\u4e3b\u5143\\rbrace) \\\\ &=\\sum\\sum(\\frac{1}{j+i-1}+\\frac{1}{j+i-1})=\\sum\\frac{2}{j+i-1} \\\\ &< \\sum_{i=1}^{n-1}\\sum_{n}^{k=1} \\frac{2}{k}=O(nlgn) \\end{aligned}$$ \u2003\u6545\u5f97\u51fa\u7ed3\u8bba\uff1a\u4f7f\u7528\u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5728\u8f93\u5165\u5143\u7d20\u4e92\u5f02\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u6392\u7684\u671f\u671b\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$\u3002","title":"(3). \u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\u5206\u6790"},{"location":"2-sort/2.4/#4","text":"\u2460 \u671f\u671b\u590d\u6742\u5ea6\u4e3a $\\Theta(nlgn)$\uff0c\u4e0e\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u76f8\u540c\uff0c\u4f46\u5176\u5e38\u6570\u66f4\u5c0f\uff0c\u901f\u5ea6\u66f4\u5feb \u2461 \u5feb\u6392\u662f\u4e0d\u7a33\u5b9a\u7684","title":"(4). \u5feb\u6392\u7279\u70b9"},{"location":"2-sort/2.4/#3_1","text":"\u4ece\u5b50\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u53d6\u4e09\u4e2a\u5143\u7d20\uff0c\u53d6\u5176\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u4e3b\u5143\u3002 int median3 ( int A [], int left , int right ) { int center = ( left + right ) / 2 ; if ( A [ left ] > A [ right ]) { swap ( & A [ left ], & A [ right ]); } if ( A [ left ] > A [ center ]) { swap ( & A [ left ], & A [ center ]); } if ( A [ center ] > A [ right ]) { swap ( & A [ center ], & A [ right ]); } swap ( & A [ center ], & A [ right - 1 ]); return A [ right - 1 ]; } \u5728\u4ee3\u7801\u4e0a\uff0c\u8981\u6ce8\u610f\u5f53\u95ee\u9898\u89c4\u6a21\u4e3a2\u65f6\u8981\u5355\u72ec\u8003\u8651\u3002 void QuickSort ( int A [], int left , int right ) { if ( right > left + 1 ) { int pivot = median3 ( A , left , right ); int i = left ; int j = right - 1 ; while ( 1 ) { while ( A [ ++ i ] < pivot ){ } // less or equal cannot fit that the pivot needn`t move while ( A [ -- j ] > pivot ){ } // for i should stop at the pivot if ( j > i ) swap ( & A [ i ], & A [ j ]); else break ; } swap ( & A [ i ], & A [ right - 1 ]); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } else { if ( A [ right ] < A [ left ]) { swap ( & A [ right ], & A [ left ]); } } }","title":"3. \u4e09\u6570\u53d6\u4e2d\u5212\u5206"},{"location":"2-sort/2.5/","text":"1. \u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c \u2003\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u53ef\u4ee5\u88ab\u62bd\u8c61\u4e3a\u4e00\u68f5\u51b3\u7b56\u6811( decision tree )\uff0c\u4e0b\u56fe\u4e3a\u4e09\u4e2a\u5143\u7d20\u7684\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u51b3\u7b56\u6811\u3002\u5728\u51b3\u7b56\u6811\u4e2d\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u53ef\u8fbe\u53f6\u7ed3\u70b9\u4e2d\u6700\u957f\u7b80\u5355\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8868\u793a\u5bf9\u5e94\u6392\u5e8f\u7b97\u6cd5\u4e2d\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u5373\u51b3\u7b56\u6811\u7684\u9ad8\u5ea6\uff1b\u8f93\u5165\u89c4\u6a21 $n$ \u5bf9\u5e94\u7684 $n!$ \u4e2d\u6392\u5217\u81f3\u5c11\u90fd\u5e94\u8be5\u51fa\u73b0\u5728\u51b3\u7b56\u6811\u7684\u53f6\u7ed3\u70b9\u4e2d\u3002\u56e0\u6b64\uff0c\u51b3\u7b56\u6811\u9ad8\u5ea6\u7684\u4e0b\u754c\u5c31\u662f\u6bd4\u8f83\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u7684\u4e0b\u754c\u3002 \u2003 \u5b9a\u7406\uff1a \u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u9700\u8981\u505a $\\Omega(nlgn)$ \u6b21\u6bd4\u8f83\u3002 \u2003 \u8bbe\u51b3\u7b56\u6811\u9ad8\u4e3a $h$, \u5177\u6709 $l$ \u4e2a\u53ef\u8fbe\u7684\u53f6\u7ed3\u70b9\u3002\u7531 $n!\\leq l\\leq 2^h$\uff0c\u6211\u4eec\u6709 $h\\geq lg(n!)=\\Omega(nlgn)$ \u2003\u7531\u6b64\uff0c\u5806\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u90fd\u662f\u6e10\u8fdb\u6700\u4f18\u7684\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u3002\u4e0b\u9762\u7684\u6392\u5e8f\u7b97\u6cd5\u90fd\u662f\u7ebf\u6027\u65f6\u95f4\uff0c\u4f46\u5b83\u4eec\u90fd\u4f9d\u8d56\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u3002 2. \u8ba1\u6570\u6392\u5e8f \u2003\u5047\u8bbe $n$ \u4e2a\u5143\u7d20\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5728 $[0,\\ k)$ \u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5f53 $k=O(n)$ \u65f6\uff0c\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(n)$\u3002 \u2003 COUNTING-SORT(A, B, k) : A \u4e3a\u5f85\u6392\u5e8f\u6570\u7ec4\uff0c B \u4e3a\u7ed3\u679c\u6570\u7ec4\uff0c k \u4e3a\u6574\u6570\u8303\u56f4\u3002\u9996\u5148\u5728\u4e34\u65f6\u6570\u7ec4 C \u4e2d\u7edf\u8ba1\u5c0f\u4e8e\u7b49\u4e8e\u76f8\u5e94\u4e0b\u6807\u7684\u5bf9\u5e94\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6839\u636e\u5176\u786e\u5b9a A \u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\u3002 void CountingSort ( int A [], int B [], int k , int len ) { int C [ k ]; int i ; for ( i = 0 ; i < k ; i ++ ) { C [ i ] = 0 ; } for ( i = 0 ; i < len ; i ++ ) { C [ A [ i ]] ++ ; } for ( i = 1 ; i < k ; i ++ ) { C [ i ] += C [ i - 1 ]; } for ( i = len - 1 ; i >= 0 ; i -- ) { B [ C [ A [ i ]] - 1 ] = A [ i ]; C [ A [ i ]] -- ; } } \u2003\u8ba1\u6570\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\u662f\u5b83\u662f\u7a33\u5b9a\u7684\u3002\u5404\u5143\u7d20\u4e2a\u6570\u5df2\u77e5\uff0c\u53ef\u4ee5\u63a7\u5236\u5176\u76f8\u5bf9\u6b21\u5e8f\u4e0d\u6539\u53d8\u3002 3. \u57fa\u6570\u6392\u5e8f \u2003 RADIX-SORT(A, d) : \u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\uff0c\u5bf9\u6bcf\u4e2a\u6570\u6309\u7167\u6570\u4f4d\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u6b64\u8fed\u4ee3\uff0c\u5176\u4e2d d \u662f\u6570\u5b57\u7684\u4f4d\u6570\u3002\u57fa\u6570\u6392\u5e8f\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5bf9\u4e00\u4f4d\u6570\u7684\u6392\u5e8f\u7b97\u6cd5\u5fc5\u987b\u662f\u7a33\u5b9a\u7684\uff0c\u5728\u6392\u5e8f\u9ad8\u4f4d\u65f6\u624d\u4e0d\u4f1a\u6539\u53d8\u4f4e\u4f4d\u5df2\u786e\u5b9a\u7684\u6b21\u5e8f\u3002 void RadixSort ( int A [], int d , int len ) { int i ; for ( i = 0 ; i < d ; i ++ ) { CountingSortOnRadix ( A , 10 , len , i ); } } void CountingSortOnRadix ( int A [], int k , int len , int digit ) { int C [ k ]; int B [ len ]; int i ; for ( i = 0 ; i < k ; i ++ ) { C [ i ] = 0 ; } for ( i = 0 ; i < len ; i ++ ) { C [ getDigit ( A [ i ], digit )] ++ ; } for ( i = 1 ; i < k ; i ++ ) { C [ i ] += C [ i - 1 ]; } for ( i = len - 1 ; i >= 0 ; i -- ) { B [ C [ getDigit ( A [ i ], digit )] - 1 ] = A [ i ]; C [ getDigit ( A [ i ], digit )] -- ; } for ( i = 0 ; i < len ; i ++ ) { A [ i ] = B [ i ]; } } int getDigit ( int num , int digit ) { int res = 1 ; int j ; for ( j = 1 ; j <= digit ; j ++ ) { res *= 10 ; } return num / res % 10 ; } \u2003\u7ed9\u5b9a $n$ \u4e2a $d$ \u4f4d\u6570\uff0c\u6bcf\u4e00\u4e2a\u6570\u4f4d\u6709 $k$ \u4e2a\u53ef\u80fd\u7684\u53d6\u503c\uff0c\u5982\u679c\u57fa\u6570\u6392\u5e8f\u6240\u4f7f\u7528\u7684\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u8017\u65f6 $\\Theta(n+k)$\uff0c\u5219\u57fa\u6570\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(d(n+k))$\u3002 \u2003\u66f4\u4e00\u822c\u7684\u6765\u8bf4\uff0c\u7ed9\u5b9a $n$ \u4e2a $b$ \u4f4d\u6570\u4ee5\u53ca\u4e00\u4e2a\u4efb\u610f\u7684\u6b63\u6574\u6570 $r\\leq b$\uff0c\u6bcf\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u770b\u505a $d=\\lceil b/r \\rceil$ \u4e2a $r$ \u4f4d\u6570\uff0c\u6bcf\u4e2a\u6570\u4ecb\u4e8e $0$ \u5230 $2^r-1$ \u4e4b\u95f4\u3002\u5219\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta (d(n+k))=\\Theta((b/r)(n+2^r))$\u3002 \u2003\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c $b=O(lgn), r\\approx lgn$\uff0c\u57fa\u6570\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(n)$\u3002\u6bd4\u8d77\u5feb\u901f\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u867d\u7136\u5faa\u73af\u6b21\u6570\u5c11\uff0c\u4f46\u5b83\u6bcf\u6b21\u7684\u64cd\u4f5c\u82b1\u8d39\u65f6\u95f4\u957f\uff0c\u9690\u542b\u7684\u5e38\u6570\u5927\uff0c\u5b83\u4eec\u7684\u6bd4\u8f83\u8fd8\u8981\u53d6\u51b3\u4e8e\u786c\u4ef6\u7279\u6027\u548c\u5177\u4f53\u7684\u6570\u636e\u5206\u5e03\u3002\u5982\u679c\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u5bf9\u5355\u4e2a\u6570\u4f4d\u6392\u5e8f\uff0c\u5219\u57fa\u6570\u6392\u5e8f\u4e0d\u662f\u539f\u5740\u6392\u5e8f\uff0c\u66f4\u52a0\u6d6a\u8d39\u7a7a\u95f4\u3002 4. \u6876\u6392\u5e8f \u2003\u5047\u8bbe\u8f93\u5165\u7684\u6570\u636e\u670d\u4ece\u5747\u5300\u5206\u5e03\uff0c\u5219\u5e73\u5747\u60c5\u51b5\u4e0b\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u4ee3\u4ef7\u4e3a $O(n)$\u3002 \u2003 BUCKET-SORT(A) : \u628a\u533a\u95f4 $[0,\\ 1]$ \u5341\u7b49\u5206\uff0c\u5e76\u6784\u9020\u4e00\u4e2a\u94fe\u8868\u7684\u6570\u7ec4 $B$ \uff0c\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u88ab\u7b49\u5206\u7684\u533a\u95f4\u3002\u5bf9\u6bcf\u4e2a\u94fe\u8868\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\uff0c\u6700\u540e\u5408\u5e76\u94fe\u8868\u5373\u5b8c\u6210\u6392\u5e8f\u3002 typedef struct node { double val ; struct node * pred ; struct node * succ ; } Node ; // ... Node * BucketSort ( int A [], int len , int maxDigit ) { Node * B [ 10 ]; int i , j ; // init a new empty list of HEADs for ( i = 0 ; i < 10 ; i ++ ) { B [ i ] = ( Node * ) malloc ( sizeof ( Node )); B [ i ] -> pred = B [ i ] -> succ = B [ i ]; } // insert element into circular linked list for ( i = 0 ; i < len ; i ++ ) { double val = A [ i ] / ( double ) maxDigit ; Node * des = B [( int )( val * 10 )]; Node * t = ( Node * ) malloc ( sizeof ( Node )); t -> val = val ; t -> pred = des ; t -> succ = des -> succ ; des -> succ -> pred = t ; des -> succ = t ; } for ( i = 0 ; i < 10 ; i ++ ) { InsertionSort ( B [ i ]); } return Concatenate ( B ); } Node * Concatenate ( Node ** B ) { Node * head = ( Node * ) malloc ( sizeof ( Node )); head -> pred = NULL ; int i ; Node * curr = head ; for ( i = 0 ; i < 10 ; i ++ ) { if ( B [ i ] -> succ != B [ i ]) { curr -> succ = B [ i ] -> succ ; curr -> succ -> pred = curr ; curr = B [ i ] -> pred ; curr -> succ = NULL ; } } return head ; } void InsertionSort ( Node * head ) { head -> val = - ( 1 << 30 ); Node * i ; Node * firstNode = head -> succ ; for ( i = firstNode -> succ ; i != head ; ) { Node * t = i -> pred ; while ( i -> val < t -> val ) { t = t -> pred ; } Node * j = i ; i = i -> succ ; j -> pred -> succ = j -> succ ; j -> succ -> pred = j -> pred ; j -> succ = t -> succ ; j -> pred = t ; t -> succ -> pred = j ; t -> succ = j ; } } \u2003\u8bbe $n_i$ \u662f\u8868\u793a $B[i]$ \u4e2d\u5143\u7d20\u4e2a\u6570\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5219\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u4ee3\u4ef7 $T(n)=\\Theta(n)+\\sum_{i=0}^{n-1}O(n_i^2)$\uff0c\u4e0b\u9762\u5206\u6790\u6876\u6392\u5e8f\u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u3002 $ X_{ij}= \\begin{cases} 1& if\\ A[j]\\ falls\\ into\\ Bucket[i]\\\\ 0& else \\end{cases} $\uff0c\u90a3\u4e48\u7531\u5747\u5300\u5206\u5e03\uff0c$P(X_{ij}=1)=1/n$\u3002 $ \\begin{aligned} E[T(n)] & = E[\\Theta(n)+\\sum_{i=0}^{n-1}O(n_i^2)] \\\\ & = \\Theta(n)+\\sum_{i=0}^{n-1}E[O(n_i^2)]\\\\ & = \\Theta(n)+\\sum_{i=0}^{n-1}O(E[n_i^2]) \\end{aligned} $ $ \\begin{aligned} E[n_i^2] & = E[(\\sum_{j=1}^{n} X_{ij})^2] = \\Theta(n)+\\sum_{i=0}^{n-1}E[O(n_i^2)] = E[\\sum_{j=1}^{n} \\sum_{k=1}^{n} X_{ij}X_{ik} ]\\\\ & = E[\\sum_{j=1}^{n}X_{ij}^2 + \\sum_{j=1}^{n} \\sum_{k=1,\\ k \\ne j}^{n} X_{ij}X_{ik}] \\\\ &= \\sum_{j=1}^{n}E[X_{ij}^2] + \\sum_{j=1}^{n} \\sum_{k=1,\\ k \\ne j}^{n} E[X_{ij}X_{ik}]\\\\ & = \\sum_{j=1}^{n} \\frac{1}{n} + \\sum_{j=1}^{n} \\sum_{k=1,\\ k \\ne j}^{n} \\frac{1}{n^2} \\\\ & = 2 - \\frac{1}{n} \\end{aligned} $ \u2003\u6700\u540e\uff0c\u7531 $\\Theta(n)+n\u00b7O(2-1/n)=\\Theta(n)$\uff0c\u6240\u4ee5\u6876\u6392\u5e8f\u7684\u671f\u671b\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u3002\u5f53\u6570\u636e\u4e0d\u670d\u4ece\u5747\u5300\u5206\u5e03\uff0c\u5982\u679c\u6240\u6709\u6876\u7684\u5927\u5c0f\u7684\u5e73\u65b9\u548c\u4e0e\u5143\u7d20\u603b\u6570\u6210\u7ebf\u6027\u5173\u7cfb\uff0c\u90a3\u4e48\u6876\u6392\u5e8f\u4e5f\u662f\u7ebf\u6027\u65f6\u95f4\u3002","title":"5.Sorting in linear time"},{"location":"2-sort/2.5/#1","text":"\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u53ef\u4ee5\u88ab\u62bd\u8c61\u4e3a\u4e00\u68f5\u51b3\u7b56\u6811( decision tree )\uff0c\u4e0b\u56fe\u4e3a\u4e09\u4e2a\u5143\u7d20\u7684\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u51b3\u7b56\u6811\u3002\u5728\u51b3\u7b56\u6811\u4e2d\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u53ef\u8fbe\u53f6\u7ed3\u70b9\u4e2d\u6700\u957f\u7b80\u5355\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8868\u793a\u5bf9\u5e94\u6392\u5e8f\u7b97\u6cd5\u4e2d\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u5373\u51b3\u7b56\u6811\u7684\u9ad8\u5ea6\uff1b\u8f93\u5165\u89c4\u6a21 $n$ \u5bf9\u5e94\u7684 $n!$ \u4e2d\u6392\u5217\u81f3\u5c11\u90fd\u5e94\u8be5\u51fa\u73b0\u5728\u51b3\u7b56\u6811\u7684\u53f6\u7ed3\u70b9\u4e2d\u3002\u56e0\u6b64\uff0c\u51b3\u7b56\u6811\u9ad8\u5ea6\u7684\u4e0b\u754c\u5c31\u662f\u6bd4\u8f83\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u7684\u4e0b\u754c\u3002 \u2003 \u5b9a\u7406\uff1a \u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u9700\u8981\u505a $\\Omega(nlgn)$ \u6b21\u6bd4\u8f83\u3002 \u2003 \u8bbe\u51b3\u7b56\u6811\u9ad8\u4e3a $h$, \u5177\u6709 $l$ \u4e2a\u53ef\u8fbe\u7684\u53f6\u7ed3\u70b9\u3002\u7531 $n!\\leq l\\leq 2^h$\uff0c\u6211\u4eec\u6709 $h\\geq lg(n!)=\\Omega(nlgn)$ \u2003\u7531\u6b64\uff0c\u5806\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u90fd\u662f\u6e10\u8fdb\u6700\u4f18\u7684\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u3002\u4e0b\u9762\u7684\u6392\u5e8f\u7b97\u6cd5\u90fd\u662f\u7ebf\u6027\u65f6\u95f4\uff0c\u4f46\u5b83\u4eec\u90fd\u4f9d\u8d56\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u3002","title":"1. \u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c"},{"location":"2-sort/2.5/#2","text":"\u5047\u8bbe $n$ \u4e2a\u5143\u7d20\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5728 $[0,\\ k)$ \u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5f53 $k=O(n)$ \u65f6\uff0c\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(n)$\u3002 \u2003 COUNTING-SORT(A, B, k) : A \u4e3a\u5f85\u6392\u5e8f\u6570\u7ec4\uff0c B \u4e3a\u7ed3\u679c\u6570\u7ec4\uff0c k \u4e3a\u6574\u6570\u8303\u56f4\u3002\u9996\u5148\u5728\u4e34\u65f6\u6570\u7ec4 C \u4e2d\u7edf\u8ba1\u5c0f\u4e8e\u7b49\u4e8e\u76f8\u5e94\u4e0b\u6807\u7684\u5bf9\u5e94\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6839\u636e\u5176\u786e\u5b9a A \u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\u3002 void CountingSort ( int A [], int B [], int k , int len ) { int C [ k ]; int i ; for ( i = 0 ; i < k ; i ++ ) { C [ i ] = 0 ; } for ( i = 0 ; i < len ; i ++ ) { C [ A [ i ]] ++ ; } for ( i = 1 ; i < k ; i ++ ) { C [ i ] += C [ i - 1 ]; } for ( i = len - 1 ; i >= 0 ; i -- ) { B [ C [ A [ i ]] - 1 ] = A [ i ]; C [ A [ i ]] -- ; } } \u2003\u8ba1\u6570\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\u662f\u5b83\u662f\u7a33\u5b9a\u7684\u3002\u5404\u5143\u7d20\u4e2a\u6570\u5df2\u77e5\uff0c\u53ef\u4ee5\u63a7\u5236\u5176\u76f8\u5bf9\u6b21\u5e8f\u4e0d\u6539\u53d8\u3002","title":"2. \u8ba1\u6570\u6392\u5e8f"},{"location":"2-sort/2.5/#3","text":"RADIX-SORT(A, d) : \u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\uff0c\u5bf9\u6bcf\u4e2a\u6570\u6309\u7167\u6570\u4f4d\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u6b64\u8fed\u4ee3\uff0c\u5176\u4e2d d \u662f\u6570\u5b57\u7684\u4f4d\u6570\u3002\u57fa\u6570\u6392\u5e8f\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5bf9\u4e00\u4f4d\u6570\u7684\u6392\u5e8f\u7b97\u6cd5\u5fc5\u987b\u662f\u7a33\u5b9a\u7684\uff0c\u5728\u6392\u5e8f\u9ad8\u4f4d\u65f6\u624d\u4e0d\u4f1a\u6539\u53d8\u4f4e\u4f4d\u5df2\u786e\u5b9a\u7684\u6b21\u5e8f\u3002 void RadixSort ( int A [], int d , int len ) { int i ; for ( i = 0 ; i < d ; i ++ ) { CountingSortOnRadix ( A , 10 , len , i ); } } void CountingSortOnRadix ( int A [], int k , int len , int digit ) { int C [ k ]; int B [ len ]; int i ; for ( i = 0 ; i < k ; i ++ ) { C [ i ] = 0 ; } for ( i = 0 ; i < len ; i ++ ) { C [ getDigit ( A [ i ], digit )] ++ ; } for ( i = 1 ; i < k ; i ++ ) { C [ i ] += C [ i - 1 ]; } for ( i = len - 1 ; i >= 0 ; i -- ) { B [ C [ getDigit ( A [ i ], digit )] - 1 ] = A [ i ]; C [ getDigit ( A [ i ], digit )] -- ; } for ( i = 0 ; i < len ; i ++ ) { A [ i ] = B [ i ]; } } int getDigit ( int num , int digit ) { int res = 1 ; int j ; for ( j = 1 ; j <= digit ; j ++ ) { res *= 10 ; } return num / res % 10 ; } \u2003\u7ed9\u5b9a $n$ \u4e2a $d$ \u4f4d\u6570\uff0c\u6bcf\u4e00\u4e2a\u6570\u4f4d\u6709 $k$ \u4e2a\u53ef\u80fd\u7684\u53d6\u503c\uff0c\u5982\u679c\u57fa\u6570\u6392\u5e8f\u6240\u4f7f\u7528\u7684\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u8017\u65f6 $\\Theta(n+k)$\uff0c\u5219\u57fa\u6570\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(d(n+k))$\u3002 \u2003\u66f4\u4e00\u822c\u7684\u6765\u8bf4\uff0c\u7ed9\u5b9a $n$ \u4e2a $b$ \u4f4d\u6570\u4ee5\u53ca\u4e00\u4e2a\u4efb\u610f\u7684\u6b63\u6574\u6570 $r\\leq b$\uff0c\u6bcf\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u770b\u505a $d=\\lceil b/r \\rceil$ \u4e2a $r$ \u4f4d\u6570\uff0c\u6bcf\u4e2a\u6570\u4ecb\u4e8e $0$ \u5230 $2^r-1$ \u4e4b\u95f4\u3002\u5219\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta (d(n+k))=\\Theta((b/r)(n+2^r))$\u3002 \u2003\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c $b=O(lgn), r\\approx lgn$\uff0c\u57fa\u6570\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(n)$\u3002\u6bd4\u8d77\u5feb\u901f\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u867d\u7136\u5faa\u73af\u6b21\u6570\u5c11\uff0c\u4f46\u5b83\u6bcf\u6b21\u7684\u64cd\u4f5c\u82b1\u8d39\u65f6\u95f4\u957f\uff0c\u9690\u542b\u7684\u5e38\u6570\u5927\uff0c\u5b83\u4eec\u7684\u6bd4\u8f83\u8fd8\u8981\u53d6\u51b3\u4e8e\u786c\u4ef6\u7279\u6027\u548c\u5177\u4f53\u7684\u6570\u636e\u5206\u5e03\u3002\u5982\u679c\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u5bf9\u5355\u4e2a\u6570\u4f4d\u6392\u5e8f\uff0c\u5219\u57fa\u6570\u6392\u5e8f\u4e0d\u662f\u539f\u5740\u6392\u5e8f\uff0c\u66f4\u52a0\u6d6a\u8d39\u7a7a\u95f4\u3002","title":"3. \u57fa\u6570\u6392\u5e8f"},{"location":"2-sort/2.5/#4","text":"\u5047\u8bbe\u8f93\u5165\u7684\u6570\u636e\u670d\u4ece\u5747\u5300\u5206\u5e03\uff0c\u5219\u5e73\u5747\u60c5\u51b5\u4e0b\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u4ee3\u4ef7\u4e3a $O(n)$\u3002 \u2003 BUCKET-SORT(A) : \u628a\u533a\u95f4 $[0,\\ 1]$ \u5341\u7b49\u5206\uff0c\u5e76\u6784\u9020\u4e00\u4e2a\u94fe\u8868\u7684\u6570\u7ec4 $B$ \uff0c\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u88ab\u7b49\u5206\u7684\u533a\u95f4\u3002\u5bf9\u6bcf\u4e2a\u94fe\u8868\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\uff0c\u6700\u540e\u5408\u5e76\u94fe\u8868\u5373\u5b8c\u6210\u6392\u5e8f\u3002 typedef struct node { double val ; struct node * pred ; struct node * succ ; } Node ; // ... Node * BucketSort ( int A [], int len , int maxDigit ) { Node * B [ 10 ]; int i , j ; // init a new empty list of HEADs for ( i = 0 ; i < 10 ; i ++ ) { B [ i ] = ( Node * ) malloc ( sizeof ( Node )); B [ i ] -> pred = B [ i ] -> succ = B [ i ]; } // insert element into circular linked list for ( i = 0 ; i < len ; i ++ ) { double val = A [ i ] / ( double ) maxDigit ; Node * des = B [( int )( val * 10 )]; Node * t = ( Node * ) malloc ( sizeof ( Node )); t -> val = val ; t -> pred = des ; t -> succ = des -> succ ; des -> succ -> pred = t ; des -> succ = t ; } for ( i = 0 ; i < 10 ; i ++ ) { InsertionSort ( B [ i ]); } return Concatenate ( B ); } Node * Concatenate ( Node ** B ) { Node * head = ( Node * ) malloc ( sizeof ( Node )); head -> pred = NULL ; int i ; Node * curr = head ; for ( i = 0 ; i < 10 ; i ++ ) { if ( B [ i ] -> succ != B [ i ]) { curr -> succ = B [ i ] -> succ ; curr -> succ -> pred = curr ; curr = B [ i ] -> pred ; curr -> succ = NULL ; } } return head ; } void InsertionSort ( Node * head ) { head -> val = - ( 1 << 30 ); Node * i ; Node * firstNode = head -> succ ; for ( i = firstNode -> succ ; i != head ; ) { Node * t = i -> pred ; while ( i -> val < t -> val ) { t = t -> pred ; } Node * j = i ; i = i -> succ ; j -> pred -> succ = j -> succ ; j -> succ -> pred = j -> pred ; j -> succ = t -> succ ; j -> pred = t ; t -> succ -> pred = j ; t -> succ = j ; } } \u2003\u8bbe $n_i$ \u662f\u8868\u793a $B[i]$ \u4e2d\u5143\u7d20\u4e2a\u6570\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5219\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u4ee3\u4ef7 $T(n)=\\Theta(n)+\\sum_{i=0}^{n-1}O(n_i^2)$\uff0c\u4e0b\u9762\u5206\u6790\u6876\u6392\u5e8f\u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u3002 $ X_{ij}= \\begin{cases} 1& if\\ A[j]\\ falls\\ into\\ Bucket[i]\\\\ 0& else \\end{cases} $\uff0c\u90a3\u4e48\u7531\u5747\u5300\u5206\u5e03\uff0c$P(X_{ij}=1)=1/n$\u3002 $ \\begin{aligned} E[T(n)] & = E[\\Theta(n)+\\sum_{i=0}^{n-1}O(n_i^2)] \\\\ & = \\Theta(n)+\\sum_{i=0}^{n-1}E[O(n_i^2)]\\\\ & = \\Theta(n)+\\sum_{i=0}^{n-1}O(E[n_i^2]) \\end{aligned} $ $ \\begin{aligned} E[n_i^2] & = E[(\\sum_{j=1}^{n} X_{ij})^2] = \\Theta(n)+\\sum_{i=0}^{n-1}E[O(n_i^2)] = E[\\sum_{j=1}^{n} \\sum_{k=1}^{n} X_{ij}X_{ik} ]\\\\ & = E[\\sum_{j=1}^{n}X_{ij}^2 + \\sum_{j=1}^{n} \\sum_{k=1,\\ k \\ne j}^{n} X_{ij}X_{ik}] \\\\ &= \\sum_{j=1}^{n}E[X_{ij}^2] + \\sum_{j=1}^{n} \\sum_{k=1,\\ k \\ne j}^{n} E[X_{ij}X_{ik}]\\\\ & = \\sum_{j=1}^{n} \\frac{1}{n} + \\sum_{j=1}^{n} \\sum_{k=1,\\ k \\ne j}^{n} \\frac{1}{n^2} \\\\ & = 2 - \\frac{1}{n} \\end{aligned} $ \u2003\u6700\u540e\uff0c\u7531 $\\Theta(n)+n\u00b7O(2-1/n)=\\Theta(n)$\uff0c\u6240\u4ee5\u6876\u6392\u5e8f\u7684\u671f\u671b\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u3002\u5f53\u6570\u636e\u4e0d\u670d\u4ece\u5747\u5300\u5206\u5e03\uff0c\u5982\u679c\u6240\u6709\u6876\u7684\u5927\u5c0f\u7684\u5e73\u65b9\u548c\u4e0e\u5143\u7d20\u603b\u6570\u6210\u7ebf\u6027\u5173\u7cfb\uff0c\u90a3\u4e48\u6876\u6392\u5e8f\u4e5f\u662f\u7ebf\u6027\u65f6\u95f4\u3002","title":"4. \u6876\u6392\u5e8f"},{"location":"2-sort/2.6/","text":"1. \u6700\u5927\u503c\u6700\u5c0f\u503c \u2003\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u542b\u6709 $n$ \u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff0c\u627e\u51fa\u5176\u4e2d\u7684\u6700\u5927(\u5c0f)\u503c\u9700\u8981 $n-1$ \u6b21\u6bd4\u8f83\uff0c\u4e14\u8fd9\u4e2a\u503c\u4e5f\u662f\u6bd4\u8f83\u6b21\u6570\u7684\u4e0b\u754c\u3002 \u2003\u67d0\u4e9b\u573a\u666f\u9700\u8981\u540c\u65f6\u627e\u51fa\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u6309\u7167\u4e00\u822c\u7684\u60f3\u6cd5\u5219\u9700\u8981 $2n-2$ \u6b21\u6bd4\u8f83\u3002\u4e8b\u5b9e\u4e0a\uff0c\u81f3\u591a\u901a\u8fc7 $3\\lfloor n/2 \\rfloor$ \u6b21\u6bd4\u8f83\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\u6210\u5bf9\u5730\u5904\u7406\u5143\u7d20\uff0c\u5148\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5176\u4e2d\u8f83\u5c0f\u7684\u4e0e\u5df2\u77e5\u7684\u6700\u5c0f\u503c\u6bd4\u8f83\uff0c\u8f83\u5927\u7684\u4e0e\u5df2\u77e5\u7684\u6700\u5927\u503c\u6bd4\u8f83\uff0c\u8fd9\u6837\u6bcf\u4e24\u4e2a\u5143\u7d20\u5c31\u53ea\u9700\u8981\u4e09\u6b21\u6bd4\u8f83\u3002 \u2003\u5bf9\u4e8e\u5947\u6570\u4e2a\u5143\u7d20\uff0c\u9700\u8981 $3\\lfloor n/2 \\rfloor$ \u6b21\u6bd4\u8f83\uff1b\u5bf9\u4e8e\u5076\u6570\u4e2a\uff0c\u9700\u8981 $3n/2-2$ \u6b21\u6bd4\u8f83\uff0c\u6240\u4ee5\u81f3\u591a\u9700\u8981 $3\\lfloor n/2 \\rfloor$ \u6b21\u6bd4\u8f83\u3002 2. \u987a\u5e8f\u7edf\u8ba1\u91cf\u9009\u62e9 (1). \u671f\u671b\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u7b97\u6cd5 \u2003\u7c7b\u4f3c\u4e8e\u5feb\u901f\u6392\u5e8f\u7684\u601d\u60f3\uff0c\u4f7f\u7528 RANDOMIZED-PARTITION(A, left, right) \u5bf9\u6570\u7ec4\u8fdb\u884c\u5212\u5206\uff0c\u548c\u5feb\u6392\u4e0d\u540c\u7684\u662f\u53ea\u5411\u4e00\u8fb9\u9012\u5f52\u3002 \u2003 RANDOMIZED-SELECT(A, i, left, right) : \u5728\u6570\u7ec4 A[left..right] \u4e2d\u627e\u51fa\u7b2c i \u5c0f\u7684\u5143\u7d20\u3002 int RandomizedSelect ( int A [], int index , int left , int right ) { if ( left == right ) { return A [ left ]; } int i = RandomizedPartition ( A , left , right ); if ( i + 1 == index ) { return A [ i ]; } else if ( i + 1 < index ) { return RandomizedSelect ( A , index , i + 1 , right ); } else { return RandomizedSelect ( A , index , left , i - 1 ); } } int RandomizedPartition ( int A [], int left , int right ) { int pivotI = rand () % ( right - left + 1 ) + left ; swap ( & A [ pivotI ], & A [ right ]); int i , j ; for ( i = left - 1 , j = left ; j < right ; j ++ ) { if ( A [ j ] <= A [ right ]) { swap ( & A [ ++ i ], & A [ j ]); } } swap ( & A [ ++ i ], & A [ right ]); return i ; } (2). \u6700\u574f\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u7b97\u6cd5 \u2003\u6b64\u7b97\u6cd5\u4ecd\u7136\u901a\u8fc7\u5212\u5206\u7684\u601d\u60f3\u5b9e\u73b0\uff0c\u4f46\u4e0e\u4e0a\u9762\u7684\u601d\u8def\u4e0a\u4e0d\u540c\u7684\u662f\uff0c\u6bcf\u6b21\u90fd\u4fdd\u8bc1\u5b9e\u73b0\u4e00\u4e2a\u8f83\u597d\u7684\u5212\u5206\uff0c\u628a\u4e3b\u5143\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5212\u5206\u51fd\u6570\u3002 \u2003 SELECT(A, i, left, right) : \u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u5728\u6570\u7ec4 A[left..right] \u4e2d\u627e\u51fa\u7b2c i \u5c0f\u7684\u5143\u7d20\u3002 \u2003\u2460 \u5c06\u6570\u7ec4\u5212\u5206\u4e3a $\\lfloor n/5 \\rfloor$ \u7ec4\uff0c\u6bcf\u7ec4 $5$ \u4e2a\u5143\u7d20\uff0c\u81f3\u591a\u8fd8\u6709\u4e00\u7ec4\u6709 $n\\ mod\\ 5$ \u4e2a\u5143\u7d20\u3002 \u2003\u2461 \u5bfb\u627e $\\lceil n/5 \\rceil$ \u7ec4\u4e2d\u6bcf\u7ec4\u7684\u4e2d\u4f4d\u6570\uff1a\u63d2\u5165\u6392\u5e8f \u2003\u2462 \u9012\u5f52\u8c03\u7528 SELECT \uff0c\u627e\u5230 \u2461 \u4e2d\u786e\u5b9a\u7684 $\\lceil n/5 \\rceil$ \u4e2a\u4e2d\u4f4d\u6570\u7684\u4e2d\u4f4d\u6570 $x$\u3002(\u5982\u679c\u5143\u7d20\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u7ea6\u5b9a\u53d6\u4e0b\u4e2d\u4f4d\u6570) \u2003\u2463 \u4ee5 $x$ \u4e3a\u4e3b\u5143\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u5212\u5206\u3002\u4ee4 $x$ \u662f\u7b2c $k$ \u5c0f\u7684\u5143\u7d20\uff0c\u5219\u4f4e\u533a\u5143\u7d20\u4e2a\u6570\u4e3a $k$\uff0c\u9ad8\u533a\u5143\u7d20\u4e2a\u6570\u4e3a $n-k$\u3002 \u2003\u2464 \u5982\u679c $i==k$\uff0c\u5219\u8fd4\u56de $x$\uff1b\u5982\u679c $i < k$\uff0c\u5219\u5728\u4f4e\u533a\u9012\u5f52\u5bfb\u627e\u7b2c $i$ \u5c0f\u7684\u5143\u7d20\uff1b\u5982\u679c $i>k$\uff0c\u5219\u5728\u9ad8\u533a\u5bfb\u627e\u7b2c $i-k$ \u5c0f\u7684\u5143\u7d20\u3002 int Select ( int A [], int index , int left , int right ) { if ( right == left ) { return A [ left ]; } int len = right - left + 1 ; int j ; for ( j = 0 ; j < len / 5 ; j ++ ) { InsertionSort ( A , left + j * 5 , left + j * 5 + 4 ); swap ( & A [ left + j ], & A [ left + j * 5 + 2 ]); } if ( j * 5 < len ) { InsertionSort ( A , left + j * 5 , left + len - 1 ); swap ( & A [ left + j ], & A [ left + ( len - 1 - j * 5 ) / 2 ]); j ++ ; } int x = Select ( A , j / 2 , left , left + j - 1 ); int k = Partition ( A , left , right , x ); if ( k - left + 1 == index ) { return x ; } else if ( k - left + 1 > index ) { return Select ( A , index , left , k ); } else { return Select ( A , index - ( k - left + 1 ), k + 1 , right ); } } void InsertionSort ( int A [], int left , int right ) { int i , j ; for ( i = left + 1 ; i <= right ; i ++ ) { int t = A [ i ]; for ( j = i - 1 ; A [ j ] > t && j >= left ; j -- ) { A [ j + 1 ] = A [ j ]; } A [ j + 1 ] = t ; } } int Partition ( int A [], int left , int right , int pivot ) { int i , j ; for ( i = left - 1 , j = left ; j <= right ; j ++ ) { if ( A [ j ] <= pivot ) { swap ( & A [ ++ i ], & A [ j ]); } } return i ; } \u2003\u4e0b\u9762\u8bc1\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u6027\uff0c\u5047\u8bbe\u5143\u7d20\u4e92\u5f02\u3002\u9996\u5148\uff0c\u8981\u5f97\u5230\u9012\u5f52\u65b9\u7a0b\uff0c\u5c31\u8981\u77e5\u9053\u7b2c \u2464 \u6b65\u9012\u5f52\u6700\u591a\u5904\u7406\u591a\u5c11\u4e2a\u5143\u7d20\u3002\u5728 \u2461 \u4e2d\u5212\u5206\u7684 $\\lceil n/5 \\rceil$ \u4e2a\u7ec4\u4e2d\uff0c\u81f3\u5c11\u6709 $\\lceil \\frac{1}{2} \\lceil n/5 \\rceil \\rceil$ \u4e2a\u7ec4\u5305\u542b\u5927\u4e8e $x$ \u7684\u5143\u7d20\uff0c\u5176\u4e2d\u9664\u4e86 $x$ \u672c\u8eab\u7684\u7ec4\u548c\u672a\u88ab\u6574\u9664\u7684\u7ec4\uff0c\u5269\u4e0b\u7684\u7ec4\u5747\u8d21\u732e\u4e86\u4e09\u4e2a\u3002\u6240\u4ee5\u5927\u4e8e $x$ \u7684\u5143\u7d20\u81f3\u5c11\u6709 $$ 3(\\lceil \\frac{1}{2} \\lceil \\frac{n}{5} \\rceil \\rceil - 2) \\geq \\frac{3n}{10}-6$$ \u4e2a\u3002\u7531\u4e8e $x$ \u662f\u4e0b\u4e2d\u4f4d\u6570\uff0c\u5c0f\u4e8e $x$ \u7684\u5206\u6790\u4e5f\u540c\u7406\u3002\u5219\u7b2c \u2464 \u6b65\u4e2d\u5904\u7406\u5143\u7d20\u7684\u4e2a\u6570\u81f3\u591a\u4e3a $7n/10+6$ \u4e2a\u3002\u6b65\u9aa4 \u2460\u2461\u2463 \u9700\u8981 $O(n)$ \u65f6\u95f4\uff0c\u5176\u4e2d \u2461 \u662f\u5bf9 $O(1)$ \u7a7a\u95f4\u4f7f\u7528 $O(n)$ \u6b21\u63d2\u5165\u6392\u5e8f\u3002\u6b65\u9aa4 \u2464 \u9700\u8981 $T(7n/10+6)$ \u65f6\u95f4\u3002\u4e8e\u662f\u53ef\u5f97\u9012\u5f52\u5f0f\uff0c\u5e76\u4f7f\u7528\u4ee3\u5165\u6cd5\u5047\u8bbe\u5b58\u5728\u76f8\u5e94\u7684\u5e38\u6570 $c$ \u548c $n_0$\uff1a $$ \\begin{aligned} T(n) & \\leq T(\\lceil n/5 \\rceil)+T(\\frac{7n}{10}+6)+O(n) \\\\ & \\leq \\frac{9cn}{10}+7c+an \\\\ & = cn+(-\\frac{cn}{10}+7c+an) \\end{aligned} $$ \u56e0\u6b64\uff0c\u53ea\u9700\u8981 $-cn/10+7c+an \\leq 0$\uff0c\u8be5\u7b97\u6cd5\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u3002 3. \u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u2003\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 $X[0..m-1]$ \u548c $Y[0..n-1]$\uff0c\u8981\u6c42\u627e\u51fa\u4e24\u4e2a\u6570\u7ec4\u7684 $m+n$ \u4e2a\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u4e14\u590d\u6742\u5ea6\u4e3a $O(log(m+n))$\u3002 \u2003\u5982\u679c $m==n$\uff0c\u8bbe $X$ \u548c $Y$ \u7684\u4e2d\u4f4d\u6570\u5206\u522b\u4e3a $x$ \u548c $y$\uff0c\u53ef\u4ee5\u8bc1\u660e\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u4e00\u5b9a\u4f4d\u4e8e\u533a\u95f4 $[x,\\ y]$ \u5185\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u6839\u636e\u95ee\u9898\u5b9a\u4e49\u7684\u72b6\u6001\u627e\u5230\u5b50\u95ee\u9898\u5411\u4e0b\u9012\u5f52\u3002 \u2003\u4f46 $m$ \u4e0e $n$ \u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u65e0\u6cd5\u7b80\u5355\u7684\u5411\u4e0b\u5212\u5206\uff0c\u8fd9\u65f6\u9700\u8981\u8f6c\u6362\u601d\u8def\u3002\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e\u627e\u5230\u5bf9\u6570\u7ec4 $X$ \u548c $Y$ \u7684\u4e00\u79cd\u5212\u5206\uff1a $$ \\begin{aligned} \\lbrace X[0],\\ ...,X[i-1] \\ &|\\ X[i],\\ ...,X[m-1] \\rbrace \\\\ \\lbrace Y[0],\\ ...,Y[j-1] \\ &|\\ Y[j],\\ ...,Y[n-1] \\rbrace \\\\ i \\in [0,\\ m],\\ & j \\in [0,\\ n] \\end{aligned} $$ \u8fd9\u79cd\u5212\u5206\u8981\u6ee1\u8db3\uff1a $$ \\begin{cases} i+j=m-i+n-j\\ (or\\ i+j=m-i+n-j+1)& \\\\ X[i-1]\\leq Y[j] \\ \\ and \\ \\ Y[j-1] \\leq X[i]& \\end{cases} $$ \u2003\u8fd9\u91cc\u5f53 $m+n$ \u4e3a\u5947\u6570\uff0c\u4ee4\u5de6\u8fb9\u7684\u90e8\u5206\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u65b9\u4fbf\u7edf\u4e00\u516c\u5f0f\u3002\u4e14 $m$ \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e $n$\uff0c\u5426\u5219 $j$ \u53ef\u4ee5\u4e3a\u8d1f\u3002 \u2003\u7ecf\u8fc7\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u539f\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4ee5\u4e0b\u7684\u641c\u7d22\u95ee\u9898\uff1a\u5728\u533a\u95f4 $[0,\\ m]$ \u4e2d\u627e\u5230 $i$\uff0c\u4f7f\u5f97 $j=(m+n+1)/2-i$ \u4e14 $X[i-1]\\leq Y[j]$ \u4e14 $Y[j-1] \\leq X[i]$\u3002\u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5728 $[0,\\ m]$ \u5185\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u3002\u6700\u540e\u5728\u4ee3\u7801\u4e2d\u8981\u6ce8\u610f\u53d6\u5230\u4e34\u754c\u503c\u6761\u4ef6\u7684\u5224\u65ad\uff1a \u2003\u2460 \u5f53 $i==0$ \u4e14 $Y[j-1]\\leq X[i]$ \u65f6\uff0c$i$ \u7684\u4f4d\u7f6e\u6b63\u786e\uff0c\u5728\u53e6\u4e00\u4e2a\u6761\u4ef6\u4e2d\u6ce8\u610f\u5224\u65ad $i!=0$\u3002 \u2003\u2461 \u5f53 $i==m$ \u4e14 $X[i-1]\\leq Y[j]$ \u65f6\uff0c$i$ \u7684\u4f4d\u7f6e\u6b63\u786e\uff0c\u5728\u53e6\u4e00\u4e2a\u6761\u4ef6\u4e2d\u6ce8\u610f\u5224\u65ad $i!=m$\u3002 \u2003\u2462 $j$ \u53ef\u4ee5\u53d6\u5230\u4e34\u754c\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u6570\u7ec4\u957f\u5ea6\u76f8\u7b49\u4e14 $i$ \u53d6\u5230\u4e86\u4e34\u754c\u503c\u3002 double FindMedianInSortedArrays ( int X [], int Y [], int xLen , int yLen ) { if ( xLen > yLen ) { int * tA = X ; int tN = xLen ; X = Y ; xLen = yLen ; Y = tA ; yLen = tN ; } int iLeft = 0 , iRight = xLen ; while ( iLeft <= iRight ) { int i = ( iLeft + iRight ) / 2 ; int j = ( xLen + yLen + 1 ) / 2 - i ; if ( i != xLen && Y [ j - 1 ] > X [ i ]) { iLeft = i + 1 ; } else if ( i != 0 && X [ i - 1 ] > Y [ j ]) { iRight = i - 1 ; } else { int maxLeft ; if ( i == 0 ) { maxLeft = Y [ j - 1 ]; } else if ( j == 0 ) { maxLeft = X [ i - 1 ]; } else { maxLeft = max ( X [ i - 1 ], Y [ j - 1 ]); } if (( xLen + yLen ) & 1 == 1 ) { return maxLeft ; } int minRight ; if ( i == xLen ) { minRight = Y [ j ]; } else if ( j == yLen ) { minRight = X [ i ]; } else { minRight = min ( X [ i ], Y [ j ]); } return ( maxLeft + minRight ) / 2.0 ; } } return - INF ; }","title":"6.Median and order statictics"},{"location":"2-sort/2.6/#1","text":"\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u542b\u6709 $n$ \u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff0c\u627e\u51fa\u5176\u4e2d\u7684\u6700\u5927(\u5c0f)\u503c\u9700\u8981 $n-1$ \u6b21\u6bd4\u8f83\uff0c\u4e14\u8fd9\u4e2a\u503c\u4e5f\u662f\u6bd4\u8f83\u6b21\u6570\u7684\u4e0b\u754c\u3002 \u2003\u67d0\u4e9b\u573a\u666f\u9700\u8981\u540c\u65f6\u627e\u51fa\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u6309\u7167\u4e00\u822c\u7684\u60f3\u6cd5\u5219\u9700\u8981 $2n-2$ \u6b21\u6bd4\u8f83\u3002\u4e8b\u5b9e\u4e0a\uff0c\u81f3\u591a\u901a\u8fc7 $3\\lfloor n/2 \\rfloor$ \u6b21\u6bd4\u8f83\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\u6210\u5bf9\u5730\u5904\u7406\u5143\u7d20\uff0c\u5148\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5176\u4e2d\u8f83\u5c0f\u7684\u4e0e\u5df2\u77e5\u7684\u6700\u5c0f\u503c\u6bd4\u8f83\uff0c\u8f83\u5927\u7684\u4e0e\u5df2\u77e5\u7684\u6700\u5927\u503c\u6bd4\u8f83\uff0c\u8fd9\u6837\u6bcf\u4e24\u4e2a\u5143\u7d20\u5c31\u53ea\u9700\u8981\u4e09\u6b21\u6bd4\u8f83\u3002 \u2003\u5bf9\u4e8e\u5947\u6570\u4e2a\u5143\u7d20\uff0c\u9700\u8981 $3\\lfloor n/2 \\rfloor$ \u6b21\u6bd4\u8f83\uff1b\u5bf9\u4e8e\u5076\u6570\u4e2a\uff0c\u9700\u8981 $3n/2-2$ \u6b21\u6bd4\u8f83\uff0c\u6240\u4ee5\u81f3\u591a\u9700\u8981 $3\\lfloor n/2 \\rfloor$ \u6b21\u6bd4\u8f83\u3002","title":"1. \u6700\u5927\u503c\u6700\u5c0f\u503c"},{"location":"2-sort/2.6/#2","text":"","title":"2. \u987a\u5e8f\u7edf\u8ba1\u91cf\u9009\u62e9"},{"location":"2-sort/2.6/#1_1","text":"\u7c7b\u4f3c\u4e8e\u5feb\u901f\u6392\u5e8f\u7684\u601d\u60f3\uff0c\u4f7f\u7528 RANDOMIZED-PARTITION(A, left, right) \u5bf9\u6570\u7ec4\u8fdb\u884c\u5212\u5206\uff0c\u548c\u5feb\u6392\u4e0d\u540c\u7684\u662f\u53ea\u5411\u4e00\u8fb9\u9012\u5f52\u3002 \u2003 RANDOMIZED-SELECT(A, i, left, right) : \u5728\u6570\u7ec4 A[left..right] \u4e2d\u627e\u51fa\u7b2c i \u5c0f\u7684\u5143\u7d20\u3002 int RandomizedSelect ( int A [], int index , int left , int right ) { if ( left == right ) { return A [ left ]; } int i = RandomizedPartition ( A , left , right ); if ( i + 1 == index ) { return A [ i ]; } else if ( i + 1 < index ) { return RandomizedSelect ( A , index , i + 1 , right ); } else { return RandomizedSelect ( A , index , left , i - 1 ); } } int RandomizedPartition ( int A [], int left , int right ) { int pivotI = rand () % ( right - left + 1 ) + left ; swap ( & A [ pivotI ], & A [ right ]); int i , j ; for ( i = left - 1 , j = left ; j < right ; j ++ ) { if ( A [ j ] <= A [ right ]) { swap ( & A [ ++ i ], & A [ j ]); } } swap ( & A [ ++ i ], & A [ right ]); return i ; }","title":"(1). \u671f\u671b\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u7b97\u6cd5"},{"location":"2-sort/2.6/#2_1","text":"\u6b64\u7b97\u6cd5\u4ecd\u7136\u901a\u8fc7\u5212\u5206\u7684\u601d\u60f3\u5b9e\u73b0\uff0c\u4f46\u4e0e\u4e0a\u9762\u7684\u601d\u8def\u4e0a\u4e0d\u540c\u7684\u662f\uff0c\u6bcf\u6b21\u90fd\u4fdd\u8bc1\u5b9e\u73b0\u4e00\u4e2a\u8f83\u597d\u7684\u5212\u5206\uff0c\u628a\u4e3b\u5143\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5212\u5206\u51fd\u6570\u3002 \u2003 SELECT(A, i, left, right) : \u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u5728\u6570\u7ec4 A[left..right] \u4e2d\u627e\u51fa\u7b2c i \u5c0f\u7684\u5143\u7d20\u3002 \u2003\u2460 \u5c06\u6570\u7ec4\u5212\u5206\u4e3a $\\lfloor n/5 \\rfloor$ \u7ec4\uff0c\u6bcf\u7ec4 $5$ \u4e2a\u5143\u7d20\uff0c\u81f3\u591a\u8fd8\u6709\u4e00\u7ec4\u6709 $n\\ mod\\ 5$ \u4e2a\u5143\u7d20\u3002 \u2003\u2461 \u5bfb\u627e $\\lceil n/5 \\rceil$ \u7ec4\u4e2d\u6bcf\u7ec4\u7684\u4e2d\u4f4d\u6570\uff1a\u63d2\u5165\u6392\u5e8f \u2003\u2462 \u9012\u5f52\u8c03\u7528 SELECT \uff0c\u627e\u5230 \u2461 \u4e2d\u786e\u5b9a\u7684 $\\lceil n/5 \\rceil$ \u4e2a\u4e2d\u4f4d\u6570\u7684\u4e2d\u4f4d\u6570 $x$\u3002(\u5982\u679c\u5143\u7d20\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u7ea6\u5b9a\u53d6\u4e0b\u4e2d\u4f4d\u6570) \u2003\u2463 \u4ee5 $x$ \u4e3a\u4e3b\u5143\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u5212\u5206\u3002\u4ee4 $x$ \u662f\u7b2c $k$ \u5c0f\u7684\u5143\u7d20\uff0c\u5219\u4f4e\u533a\u5143\u7d20\u4e2a\u6570\u4e3a $k$\uff0c\u9ad8\u533a\u5143\u7d20\u4e2a\u6570\u4e3a $n-k$\u3002 \u2003\u2464 \u5982\u679c $i==k$\uff0c\u5219\u8fd4\u56de $x$\uff1b\u5982\u679c $i < k$\uff0c\u5219\u5728\u4f4e\u533a\u9012\u5f52\u5bfb\u627e\u7b2c $i$ \u5c0f\u7684\u5143\u7d20\uff1b\u5982\u679c $i>k$\uff0c\u5219\u5728\u9ad8\u533a\u5bfb\u627e\u7b2c $i-k$ \u5c0f\u7684\u5143\u7d20\u3002 int Select ( int A [], int index , int left , int right ) { if ( right == left ) { return A [ left ]; } int len = right - left + 1 ; int j ; for ( j = 0 ; j < len / 5 ; j ++ ) { InsertionSort ( A , left + j * 5 , left + j * 5 + 4 ); swap ( & A [ left + j ], & A [ left + j * 5 + 2 ]); } if ( j * 5 < len ) { InsertionSort ( A , left + j * 5 , left + len - 1 ); swap ( & A [ left + j ], & A [ left + ( len - 1 - j * 5 ) / 2 ]); j ++ ; } int x = Select ( A , j / 2 , left , left + j - 1 ); int k = Partition ( A , left , right , x ); if ( k - left + 1 == index ) { return x ; } else if ( k - left + 1 > index ) { return Select ( A , index , left , k ); } else { return Select ( A , index - ( k - left + 1 ), k + 1 , right ); } } void InsertionSort ( int A [], int left , int right ) { int i , j ; for ( i = left + 1 ; i <= right ; i ++ ) { int t = A [ i ]; for ( j = i - 1 ; A [ j ] > t && j >= left ; j -- ) { A [ j + 1 ] = A [ j ]; } A [ j + 1 ] = t ; } } int Partition ( int A [], int left , int right , int pivot ) { int i , j ; for ( i = left - 1 , j = left ; j <= right ; j ++ ) { if ( A [ j ] <= pivot ) { swap ( & A [ ++ i ], & A [ j ]); } } return i ; } \u2003\u4e0b\u9762\u8bc1\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u6027\uff0c\u5047\u8bbe\u5143\u7d20\u4e92\u5f02\u3002\u9996\u5148\uff0c\u8981\u5f97\u5230\u9012\u5f52\u65b9\u7a0b\uff0c\u5c31\u8981\u77e5\u9053\u7b2c \u2464 \u6b65\u9012\u5f52\u6700\u591a\u5904\u7406\u591a\u5c11\u4e2a\u5143\u7d20\u3002\u5728 \u2461 \u4e2d\u5212\u5206\u7684 $\\lceil n/5 \\rceil$ \u4e2a\u7ec4\u4e2d\uff0c\u81f3\u5c11\u6709 $\\lceil \\frac{1}{2} \\lceil n/5 \\rceil \\rceil$ \u4e2a\u7ec4\u5305\u542b\u5927\u4e8e $x$ \u7684\u5143\u7d20\uff0c\u5176\u4e2d\u9664\u4e86 $x$ \u672c\u8eab\u7684\u7ec4\u548c\u672a\u88ab\u6574\u9664\u7684\u7ec4\uff0c\u5269\u4e0b\u7684\u7ec4\u5747\u8d21\u732e\u4e86\u4e09\u4e2a\u3002\u6240\u4ee5\u5927\u4e8e $x$ \u7684\u5143\u7d20\u81f3\u5c11\u6709 $$ 3(\\lceil \\frac{1}{2} \\lceil \\frac{n}{5} \\rceil \\rceil - 2) \\geq \\frac{3n}{10}-6$$ \u4e2a\u3002\u7531\u4e8e $x$ \u662f\u4e0b\u4e2d\u4f4d\u6570\uff0c\u5c0f\u4e8e $x$ \u7684\u5206\u6790\u4e5f\u540c\u7406\u3002\u5219\u7b2c \u2464 \u6b65\u4e2d\u5904\u7406\u5143\u7d20\u7684\u4e2a\u6570\u81f3\u591a\u4e3a $7n/10+6$ \u4e2a\u3002\u6b65\u9aa4 \u2460\u2461\u2463 \u9700\u8981 $O(n)$ \u65f6\u95f4\uff0c\u5176\u4e2d \u2461 \u662f\u5bf9 $O(1)$ \u7a7a\u95f4\u4f7f\u7528 $O(n)$ \u6b21\u63d2\u5165\u6392\u5e8f\u3002\u6b65\u9aa4 \u2464 \u9700\u8981 $T(7n/10+6)$ \u65f6\u95f4\u3002\u4e8e\u662f\u53ef\u5f97\u9012\u5f52\u5f0f\uff0c\u5e76\u4f7f\u7528\u4ee3\u5165\u6cd5\u5047\u8bbe\u5b58\u5728\u76f8\u5e94\u7684\u5e38\u6570 $c$ \u548c $n_0$\uff1a $$ \\begin{aligned} T(n) & \\leq T(\\lceil n/5 \\rceil)+T(\\frac{7n}{10}+6)+O(n) \\\\ & \\leq \\frac{9cn}{10}+7c+an \\\\ & = cn+(-\\frac{cn}{10}+7c+an) \\end{aligned} $$ \u56e0\u6b64\uff0c\u53ea\u9700\u8981 $-cn/10+7c+an \\leq 0$\uff0c\u8be5\u7b97\u6cd5\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u3002","title":"(2). \u6700\u574f\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u7b97\u6cd5"},{"location":"2-sort/2.6/#3","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 $X[0..m-1]$ \u548c $Y[0..n-1]$\uff0c\u8981\u6c42\u627e\u51fa\u4e24\u4e2a\u6570\u7ec4\u7684 $m+n$ \u4e2a\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u4e14\u590d\u6742\u5ea6\u4e3a $O(log(m+n))$\u3002 \u2003\u5982\u679c $m==n$\uff0c\u8bbe $X$ \u548c $Y$ \u7684\u4e2d\u4f4d\u6570\u5206\u522b\u4e3a $x$ \u548c $y$\uff0c\u53ef\u4ee5\u8bc1\u660e\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u4e00\u5b9a\u4f4d\u4e8e\u533a\u95f4 $[x,\\ y]$ \u5185\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u6839\u636e\u95ee\u9898\u5b9a\u4e49\u7684\u72b6\u6001\u627e\u5230\u5b50\u95ee\u9898\u5411\u4e0b\u9012\u5f52\u3002 \u2003\u4f46 $m$ \u4e0e $n$ \u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u65e0\u6cd5\u7b80\u5355\u7684\u5411\u4e0b\u5212\u5206\uff0c\u8fd9\u65f6\u9700\u8981\u8f6c\u6362\u601d\u8def\u3002\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e\u627e\u5230\u5bf9\u6570\u7ec4 $X$ \u548c $Y$ \u7684\u4e00\u79cd\u5212\u5206\uff1a $$ \\begin{aligned} \\lbrace X[0],\\ ...,X[i-1] \\ &|\\ X[i],\\ ...,X[m-1] \\rbrace \\\\ \\lbrace Y[0],\\ ...,Y[j-1] \\ &|\\ Y[j],\\ ...,Y[n-1] \\rbrace \\\\ i \\in [0,\\ m],\\ & j \\in [0,\\ n] \\end{aligned} $$ \u8fd9\u79cd\u5212\u5206\u8981\u6ee1\u8db3\uff1a $$ \\begin{cases} i+j=m-i+n-j\\ (or\\ i+j=m-i+n-j+1)& \\\\ X[i-1]\\leq Y[j] \\ \\ and \\ \\ Y[j-1] \\leq X[i]& \\end{cases} $$ \u2003\u8fd9\u91cc\u5f53 $m+n$ \u4e3a\u5947\u6570\uff0c\u4ee4\u5de6\u8fb9\u7684\u90e8\u5206\u591a\u4e00\u4e2a\u5143\u7d20\uff0c\u65b9\u4fbf\u7edf\u4e00\u516c\u5f0f\u3002\u4e14 $m$ \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e $n$\uff0c\u5426\u5219 $j$ \u53ef\u4ee5\u4e3a\u8d1f\u3002 \u2003\u7ecf\u8fc7\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u539f\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4ee5\u4e0b\u7684\u641c\u7d22\u95ee\u9898\uff1a\u5728\u533a\u95f4 $[0,\\ m]$ \u4e2d\u627e\u5230 $i$\uff0c\u4f7f\u5f97 $j=(m+n+1)/2-i$ \u4e14 $X[i-1]\\leq Y[j]$ \u4e14 $Y[j-1] \\leq X[i]$\u3002\u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5728 $[0,\\ m]$ \u5185\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u3002\u6700\u540e\u5728\u4ee3\u7801\u4e2d\u8981\u6ce8\u610f\u53d6\u5230\u4e34\u754c\u503c\u6761\u4ef6\u7684\u5224\u65ad\uff1a \u2003\u2460 \u5f53 $i==0$ \u4e14 $Y[j-1]\\leq X[i]$ \u65f6\uff0c$i$ \u7684\u4f4d\u7f6e\u6b63\u786e\uff0c\u5728\u53e6\u4e00\u4e2a\u6761\u4ef6\u4e2d\u6ce8\u610f\u5224\u65ad $i!=0$\u3002 \u2003\u2461 \u5f53 $i==m$ \u4e14 $X[i-1]\\leq Y[j]$ \u65f6\uff0c$i$ \u7684\u4f4d\u7f6e\u6b63\u786e\uff0c\u5728\u53e6\u4e00\u4e2a\u6761\u4ef6\u4e2d\u6ce8\u610f\u5224\u65ad $i!=m$\u3002 \u2003\u2462 $j$ \u53ef\u4ee5\u53d6\u5230\u4e34\u754c\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u6570\u7ec4\u957f\u5ea6\u76f8\u7b49\u4e14 $i$ \u53d6\u5230\u4e86\u4e34\u754c\u503c\u3002 double FindMedianInSortedArrays ( int X [], int Y [], int xLen , int yLen ) { if ( xLen > yLen ) { int * tA = X ; int tN = xLen ; X = Y ; xLen = yLen ; Y = tA ; yLen = tN ; } int iLeft = 0 , iRight = xLen ; while ( iLeft <= iRight ) { int i = ( iLeft + iRight ) / 2 ; int j = ( xLen + yLen + 1 ) / 2 - i ; if ( i != xLen && Y [ j - 1 ] > X [ i ]) { iLeft = i + 1 ; } else if ( i != 0 && X [ i - 1 ] > Y [ j ]) { iRight = i - 1 ; } else { int maxLeft ; if ( i == 0 ) { maxLeft = Y [ j - 1 ]; } else if ( j == 0 ) { maxLeft = X [ i - 1 ]; } else { maxLeft = max ( X [ i - 1 ], Y [ j - 1 ]); } if (( xLen + yLen ) & 1 == 1 ) { return maxLeft ; } int minRight ; if ( i == xLen ) { minRight = Y [ j ]; } else if ( j == yLen ) { minRight = X [ i ]; } else { minRight = min ( X [ i ], Y [ j ]); } return ( maxLeft + minRight ) / 2.0 ; } } return - INF ; }","title":"3. \u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},{"location":"3-DataStructures/3.1/","text":"1. \u6811 (1). \u4e8c\u53c9\u6811\u7684\u904d\u5386 void traverse ( Node * root ) { if ( root != NULL ) { printf ( \"%c \" , root -> name ); traverse ( root -> left ); traverse ( root -> right ); } } \u2003\u901a\u8fc7\u9012\u5f52\u904d\u5386\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u9012\u5f52\u7684\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u6cbf\u7740\u6811\u7684\u5916\u6cbf\u5468\u6e38\u4e00\u5708\u3002\u5bf9\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u6765\u8bf4\uff0c\u6309\u7167\u5411\u5de6\u53f3\u9012\u5f52\u5212\u5206\u51fa\u4e86\u4e09\u79cd\u8bbf\u95ee\u65f6\u673a\uff0c\u5728\u6bcf\u4e2a\u65f6\u673a\u8bbf\u95ee\u5bf9\u5e94\u4e86\u6839\u548c\u5de6\u53f3\u5b50\u6811\u4e4b\u95f4\u7684\u4e00\u4e2a\u76f8\u5bf9\u8bbf\u95ee\u6b21\u5e8f\uff0c\u5206\u522b\u4e3a\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u3002 \u2003\u4ee5\u4e0b\u904d\u5386\u7b97\u6cd5\u6240\u9700\u65f6\u95f4\u5747\u4e3a $\\Theta (n)$\u3002 \u2460 \u975e\u9012\u5f52\u5148\u5e8f\u3001\u4e2d\u5e8f\u904d\u5386 \u2003\u53ef\u4ee5\u901a\u8fc7\u8f85\u52a9\u6808\uff0c\u5165\u6808\u6a21\u62df\u7ed3\u70b9\u7684\u5148\u5e8f\u65f6\u673a\uff0c\u51fa\u6808\u6a21\u62df\u4e2d\u5e8f\u65f6\u673a\uff0c\u8fed\u4ee3\u7ec8\u6b62\u7684\u6761\u4ef6\u4e3a\u6808\u7a7a\u4e14\u5f53\u524d\u7684\u7ed3\u70b9\u6307\u9488\u4e5f\u4e3a\u7a7a\u3002 void traverse ( Node * root ) { Node * stack [ MAX ]; int top = - 1 ; do { while ( root != NULL ) { stack [ ++ top ] = root ; // STACK-PUSH: Pre printf ( \"%c \" , root -> name ); root = root -> left ; } root = stack [ top -- ]; // STACK-POP: In root = root -> right ; } while ( top != - 1 || root != NULL ); } \u2461 \u975e\u9012\u5f52\u540e\u5e8f\u904d\u5386 \u2003\u5165\u6808\u6a21\u62df\u5148\u5e8f\u65f6\u673a\uff0c\u51fa\u6808\u6a21\u62df\u540e\u5e8f\u65f6\u673a\u3002 \u20031. \u5982\u679c\u5f53\u524d\u6307\u9488\u975e\u7a7a\uff0c\u8fdb\u6808\u3001\u5de6\u79fb\uff0c\u6a21\u62df\u5de6\u9012\u5f52\uff1b \u20032. \u5982\u679c\u5f53\u524d\u6307\u9488\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u7684\u7ed3\u70b9 last \uff0c\u5224\u65ad\u5176\u662f\u5426\u4e3a\u6808\u9876\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\uff1a\u5982\u679c\u4e0d\u662f\uff0c\u8bf4\u660e\u6808\u9876\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u5c1a\u672a\u88ab\u8bbf\u95ee\uff0c\u5f53\u524d\u6307\u9488\u8bbe\u4e3a\u53f3\u5b69\u5b50\u5e76\u91cd\u590d 1\uff1b\u5982\u679c\u662f\uff0c\u8bf4\u660e\u53f3\u5b50\u6811\u8bbf\u95ee\u5b8c\u6210\uff0c\u9000\u6808\u3001\u6a21\u62df\u540e\u5e8f\u65f6\u673a\uff0c\u5e76\u7ee7\u7eed\u91cd\u590d\u5224\u65ad\u4e0b\u4e00\u4e2a\u6808\u9876\u7ed3\u70b9\u3002 void postorderTraverse ( Node * root ) { Node * stack [ MAX ]; int top = - 1 ; do { while ( root != NULL ) { stack [ ++ top ] = root ; root = root -> left ; } Node * last = NULL ; while ( top != - 1 ) { Node * t = stack [ top ]; if ( last == t -> right ) { printf ( \"%c \" , t -> name ); last = t ; t = stack [ -- top ]; } else { root = t -> right ; break ; } } } while ( top != - 1 ); } \u2003\u7b2c\u4e8c\u4e2a\u8fed\u4ee3\u9700\u8981\u5224\u65ad\u6808\u975e\u7a7a\u3002 \u2462 \u5c42\u5e8f\u904d\u5386 \u2003\u4f7f\u7528\u961f\u5217\uff0c\u540c BFS void levelTraverse ( Node * root ) { Node * queue [ MAX ]; int head = - 1 ; int tail = - 1 ; queue [ ++ tail ] = root ; while ( head != tail ) { Node * t = queue [ ++ head ]; if ( t -> left ) { queue [ ++ tail ] = t -> left ; } if ( t -> right ) { queue [ ++ tail ] = t -> right ; } } }","title":"1.Elementary data structures"},{"location":"3-DataStructures/3.1/#1","text":"","title":"1. \u6811"},{"location":"3-DataStructures/3.1/#1_1","text":"void traverse ( Node * root ) { if ( root != NULL ) { printf ( \"%c \" , root -> name ); traverse ( root -> left ); traverse ( root -> right ); } } \u2003\u901a\u8fc7\u9012\u5f52\u904d\u5386\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u9012\u5f52\u7684\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u6cbf\u7740\u6811\u7684\u5916\u6cbf\u5468\u6e38\u4e00\u5708\u3002\u5bf9\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u6765\u8bf4\uff0c\u6309\u7167\u5411\u5de6\u53f3\u9012\u5f52\u5212\u5206\u51fa\u4e86\u4e09\u79cd\u8bbf\u95ee\u65f6\u673a\uff0c\u5728\u6bcf\u4e2a\u65f6\u673a\u8bbf\u95ee\u5bf9\u5e94\u4e86\u6839\u548c\u5de6\u53f3\u5b50\u6811\u4e4b\u95f4\u7684\u4e00\u4e2a\u76f8\u5bf9\u8bbf\u95ee\u6b21\u5e8f\uff0c\u5206\u522b\u4e3a\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u3002 \u2003\u4ee5\u4e0b\u904d\u5386\u7b97\u6cd5\u6240\u9700\u65f6\u95f4\u5747\u4e3a $\\Theta (n)$\u3002 \u2460 \u975e\u9012\u5f52\u5148\u5e8f\u3001\u4e2d\u5e8f\u904d\u5386 \u2003\u53ef\u4ee5\u901a\u8fc7\u8f85\u52a9\u6808\uff0c\u5165\u6808\u6a21\u62df\u7ed3\u70b9\u7684\u5148\u5e8f\u65f6\u673a\uff0c\u51fa\u6808\u6a21\u62df\u4e2d\u5e8f\u65f6\u673a\uff0c\u8fed\u4ee3\u7ec8\u6b62\u7684\u6761\u4ef6\u4e3a\u6808\u7a7a\u4e14\u5f53\u524d\u7684\u7ed3\u70b9\u6307\u9488\u4e5f\u4e3a\u7a7a\u3002 void traverse ( Node * root ) { Node * stack [ MAX ]; int top = - 1 ; do { while ( root != NULL ) { stack [ ++ top ] = root ; // STACK-PUSH: Pre printf ( \"%c \" , root -> name ); root = root -> left ; } root = stack [ top -- ]; // STACK-POP: In root = root -> right ; } while ( top != - 1 || root != NULL ); } \u2461 \u975e\u9012\u5f52\u540e\u5e8f\u904d\u5386 \u2003\u5165\u6808\u6a21\u62df\u5148\u5e8f\u65f6\u673a\uff0c\u51fa\u6808\u6a21\u62df\u540e\u5e8f\u65f6\u673a\u3002 \u20031. \u5982\u679c\u5f53\u524d\u6307\u9488\u975e\u7a7a\uff0c\u8fdb\u6808\u3001\u5de6\u79fb\uff0c\u6a21\u62df\u5de6\u9012\u5f52\uff1b \u20032. \u5982\u679c\u5f53\u524d\u6307\u9488\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u7684\u7ed3\u70b9 last \uff0c\u5224\u65ad\u5176\u662f\u5426\u4e3a\u6808\u9876\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\uff1a\u5982\u679c\u4e0d\u662f\uff0c\u8bf4\u660e\u6808\u9876\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u5c1a\u672a\u88ab\u8bbf\u95ee\uff0c\u5f53\u524d\u6307\u9488\u8bbe\u4e3a\u53f3\u5b69\u5b50\u5e76\u91cd\u590d 1\uff1b\u5982\u679c\u662f\uff0c\u8bf4\u660e\u53f3\u5b50\u6811\u8bbf\u95ee\u5b8c\u6210\uff0c\u9000\u6808\u3001\u6a21\u62df\u540e\u5e8f\u65f6\u673a\uff0c\u5e76\u7ee7\u7eed\u91cd\u590d\u5224\u65ad\u4e0b\u4e00\u4e2a\u6808\u9876\u7ed3\u70b9\u3002 void postorderTraverse ( Node * root ) { Node * stack [ MAX ]; int top = - 1 ; do { while ( root != NULL ) { stack [ ++ top ] = root ; root = root -> left ; } Node * last = NULL ; while ( top != - 1 ) { Node * t = stack [ top ]; if ( last == t -> right ) { printf ( \"%c \" , t -> name ); last = t ; t = stack [ -- top ]; } else { root = t -> right ; break ; } } } while ( top != - 1 ); } \u2003\u7b2c\u4e8c\u4e2a\u8fed\u4ee3\u9700\u8981\u5224\u65ad\u6808\u975e\u7a7a\u3002 \u2462 \u5c42\u5e8f\u904d\u5386 \u2003\u4f7f\u7528\u961f\u5217\uff0c\u540c BFS void levelTraverse ( Node * root ) { Node * queue [ MAX ]; int head = - 1 ; int tail = - 1 ; queue [ ++ tail ] = root ; while ( head != tail ) { Node * t = queue [ ++ head ]; if ( t -> left ) { queue [ ++ tail ] = t -> left ; } if ( t -> right ) { queue [ ++ tail ] = t -> right ; } } }","title":"(1). \u4e8c\u53c9\u6811\u7684\u904d\u5386"},{"location":"3-DataStructures/3.2/","text":"1. \u6563\u5217\u8868\u6982\u8ff0 \u2003\u8bb8\u591a\u5e94\u7528\u90fd\u9700\u8981\u4e00\u4e2a\u52a8\u6001\u96c6\u5408\uff0c\u5b83\u81f3\u5c11\u652f\u6301 INSERT \u3001 SEARCH \u548c DELETE \u7b49\u64cd\u4f5c\u3002 \u2003\u8bb0 $U=\\lbrace 0,\\ 1,\\ ...,n-1\\rbrace$ \u4e3a\u5173\u952e\u5b57\u5168\u57df( universe of keys )\uff0c\u5047\u8bbe\u52a8\u6001\u96c6\u5408\u9700\u8981\u7684\u5173\u952e\u5b57\u90fd\u53d6\u4e8e\u6b64\uff0c\u4e14\u6ca1\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f8\u540c\u3002 \u2003\u8fd9\u4e2a\u52a8\u6001\u96c6\u5408\u53ef\u4ee5\u7528\u6570\u7ec4\u8868\u793a\uff0c\u6216\u79f0\u5176\u4e3a\u76f4\u63a5\u5bfb\u5740\u8868( direct-address table )\uff0c\u8bb0\u4e3a $T[0..n-1]$\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u79f0\u4e3a\u69fd( slot )\uff0c\u69fd $T[k]$ \u6307\u5411 $U$ \u4e2d\u5173\u952e\u5b57\u4e3a $k$ \u7684\u5143\u7d20\u3002 \u2003\u76f4\u63a5\u5bfb\u5740\u8868\u7684\u7f3a\u70b9\u5341\u5206\u660e\u663e\uff1a\u5982\u679c $|U|$ \u5f88\u5927\uff0c\u5219\u53ef\u80fd\u9700\u8981\u4e0d\u5207\u5b9e\u9645\u7684\u5185\u5b58\uff1b\u5982\u679c $|K|$ \u76f8\u5bf9\u4e8e $|U|$ \u5f88\u5c0f\uff0c\u5219\u4f1a\u6d6a\u8d39\u5f88\u591a\u7a7a\u95f4\u3002\u5728\u6563\u5217\u8868\u65b9\u5f0f\u4e0b\uff0c\u901a\u8fc7\u6563\u5217\u51fd\u6570 ( hash function ) $h$ \u548c\u5173\u952e\u5b57 $k$ \u8ba1\u7b97\u51fa\u69fd\u7684\u4f4d\u7f6e $h(k)$\u3002\u5176\u4e2d $h: U\u2192\\lbrace0,\\ 1,...,m-1 \\rbrace$\u3002 \u2003\u4f46\u662f\uff0c\u4e24\u4e2a\u5173\u952e\u5b57\u53ef\u80fd\u88ab\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u69fd\u4e2d\uff0c\u8fd9\u79cd\u60c5\u5f62\u88ab\u79f0\u4e4b\u4e3a\u51b2\u7a81 ( collision )\uff0c\u60f3\u8981\u5b8c\u5168\u907f\u514d\u51b2\u7a81\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u901a\u8fc7\u597d\u7684\u6563\u5217\u51fd\u6570 $h$ \u5c3d\u53ef\u80fd\u907f\u514d\u51b2\u7a81\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u901a\u8fc7\u6709\u6548\u7684\u65b9\u6cd5\u89e3\u51b3\u51b2\u7a81\u3002 2. \u51b2\u7a81 (1). \u94fe\u63a5\u6cd5 ( chaining ) \u2003\u628a\u6563\u5217\u5230\u540c\u4e00\u4e2a\u69fd\u7684\u5143\u7d20\u90fd\u653e\u5728\u4e00\u4e2a\u94fe\u8868\u4e2d\u3002\u63d2\u5165\u7684\u65f6\u95f4\u4ee3\u4ef7\u4e3a $O(1)$\uff0c\u9700\u8981\u907f\u514d\u91cd\u590d\u5143\u7d20\u5219\u9700\u8981\u989d\u5916\u7684\u5f00\u9500\uff1b\u5982\u679c\u4f7f\u7528\u53cc\u5411\u94fe\u8868\uff0c\u5220\u9664\u64cd\u4f5c\u4e5f\u4e3a $O(1)$\uff0c\u8f93\u5165\u53c2\u6570\u4e3a\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u7ed3\u70b9\u6307\u9488\u3002 \u2003\u7ed9\u5b9a\u4e00\u4e2a\u80fd\u5b58\u653e $n$ \u4e2a\u5143\u7d20\u7684\u3001\u5177\u6709 $m$ \u4e2a\u69fd\u4f4d\u7684\u6563\u5217\u8868 $T$\uff0c\u5b9a\u4e49 $T$ \u7684\u88c5\u8f7d\u56e0\u5b50 ( load factor ) \u4e3a $\\alpha=n/m$\uff0c\u5373\u4e00\u4e2a\u94fe\u7684\u5e73\u5747\u5b58\u50a8\u5143\u7d20\u6570\u3002\u8bbe $T[i]$ \u7684\u957f\u5ea6\u4e3a $n_i$\uff0c\u5219\u6709 $n=n_0+n_1+...+n_{m-1}$\uff0c$E[n_i]=\\alpha=n/m$\u3002\u5047\u5b9a $h(k)$ \u7684\u8ba1\u7b97\u65f6\u95f4\u4e3a $O(1)$\uff0c\u4e0b\u9762\u5206\u6790\u94fe\u63a5\u6cd5\u7684\u6027\u80fd\u3002 \u5b9a\u7406 \uff1a\u5728\u7b80\u5355\u5747\u5300\u6563\u5217\u7684\u5047\u8bbe\u4e0b\uff0c\u5bf9\u4e8e\u7528\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\u7684\u6563\u5217\u8868\uff0c\u4e00\u6b21 \u4e0d\u6210\u529f \u67e5\u627e\u7684\u5e73\u5747\u65f6\u95f4\u4e3a $\\Theta (1+\\alpha)$\u3002 \u2003\u5f53\u67e5\u627e\u5173\u952e\u5b57 $k$ \u65f6\uff0c\u5728\u4e0d\u6210\u529f\u67e5\u627e\u7684\u524d\u63d0\u4e0b\uff0c\u76f8\u5f53\u4e8e\u627e\u81f3\u94fe\u8868 $T[h(k)]$ \u672b\u5c3e\u7684\u671f\u671b\u65f6\u95f4\uff0c\u4e14 $E[n_{h(k)}]=\\alpha$\u3002\u4e8e\u662f\uff0c\u9700\u8981\u7684\u603b\u65f6\u95f4\u4e3a $\\Theta (1+\\alpha)$\u3002 \u5b9a\u7406 \uff1a\u5728\u7b80\u5355\u5747\u5300\u6563\u5217\u7684\u5047\u8bbe\u4e0b\uff0c\u5bf9\u4e8e\u7528\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\u7684\u6563\u5217\u8868\uff0c\u4e00\u6b21 \u6210\u529f \u67e5\u627e\u7684\u5e73\u5747\u65f6\u95f4\u4e3a $\\Theta (1+\\alpha)$\u3002 \u2003\u5047\u5b9a\u8981\u67e5\u627e\u7684\u5173\u952e\u5b57\u662f $n$ \u4e2a\u5143\u7d20\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4e14\u662f\u7b49\u53ef\u80fd\u7684\u3002\u5728\u5bf9 $x$ \u7684\u4e00\u6b21\u6210\u529f\u67e5\u627e\u4e2d\uff0c\u67e5\u627e\u7684\u5143\u7d20\u6570\u662f\u6392\u5217\u5728 $x$ \u524d\u7684\u5143\u7d20\u6570\u52a0\u4e00\uff0c\u4e14\u51fa\u73b0\u5728 $x$ \u524d\u7684\u5143\u7d20\u5747\u662f\u5728 $x$ \u4e4b\u540e\u63d2\u5165\u7684\u5143\u7d20\u3002 \u2003\u57fa\u4e8e\u6b64\uff0c\u8bbe $x_i$ \u4e3a\u7b2c $i$ \u4e2a\u63d2\u5165\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u4e14 $k_i=x_i.key$\uff0c\u4ee4$$X_{ij}= \\begin{cases} 1& if\\ h(k_i)=h(k_j)\\\\ 0& else \\end{cases}$$ $P(\\lbrace h(k_i)=h(k_j)\\rbrace)=1/m$\uff0c\u4e8e\u662f\u6709 $E[X_{ij}]=1/m$\u3002\u7531\u4e8e\u67e5\u627e\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u7b49\u53ef\u80fd\u7684\uff0c\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684\u67e5\u627e\u6570\u4e4b\u548c\u518d\u9664\u4ee5 $n$\uff0c\u4ee5\u6b64\u4e3a\u7edf\u8ba1\u91cf\u5bf9\u5176\u6c42\u671f\u671b\u3002 $$ \\begin{aligned} E[\\frac{1}{n}\\sum_{i=1}^{n}(1+\\sum_{j=i+1}^{n}X_{ij})]&=\\frac{1}{n}\\sum_{i=1}^{n}(1+\\sum_{j=i+1}^{n}E[X_{ij}])\\\\ &=1+\\frac{1}{nm}(n^2-\\frac{n(n+1)}{2})\\\\ &=1+\\frac{\\alpha}{2}-\\frac{\\alpha}{2n} \\end{aligned} $$ \u2003\u56e0\u6b64\uff0c\u67e5\u627e\u9700\u8981\u7684\u65f6\u95f4\u4e3a $\\Theta (2+\\frac{\\alpha}{2}-\\frac{\\alpha}{2n})=\\Theta (1+\\alpha)$\u3002 \u2003\u5982\u679c\u6563\u5217\u8868\u7684\u69fd\u6570\u4e0e\u8868\u4e2d\u7684\u5143\u7d20\u6570\u6210\u6b63\u6bd4\uff0c\u5373 $n=O(m)$\uff0c\u5219 $\\alpha=O(1)$\uff0c\u8fd9\u610f\u5473\u7740\u67e5\u627e\u9700\u8981 $O(1)$ \u65f6\u95f4\uff0c\u4e5f\u610f\u5473\u7740\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u5728\u5185\u7684\u5168\u90e8\u5b57\u5178\u64cd\u4f5c\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\u90fd\u53ea\u9700\u8981 $O(1)$ \u65f6\u95f4\u3002 3. \u6563\u5217\u51fd\u6570 \u2003\u4e00\u4e2a\u597d\u7684\u6563\u5217\u51fd\u6570\u5e94(\u8fd1\u4f3c)\u6ee1\u8db3\u7b80\u5355\u5747\u5300\u6563\u5217 ( simple uniform hashing ) \u5047\u8bbe\uff1a\u6bcf\u4e2a\u5173\u952e\u5b57\u90fd\u88ab\u7b49\u53ef\u80fd\u5730\u6563\u5217\u5230 $m$ \u4e2a\u69fd\u4f4d\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u5e76\u4e0e\u5176\u4ed6\u5173\u952e\u5b57\u5df2\u6563\u5217\u5230\u54ea\u4e2a\u69fd\u4f4d\u65e0\u5173\u3002 \u2003\u5047\u5b9a\u5173\u952e\u5b57\u7684\u5168\u57df\u4e3a\u81ea\u7136\u6570\u96c6 $N$\uff0c\u5982\u679c\u6240\u7ed9\u5173\u952e\u5b57\u4e0d\u662f\u81ea\u7136\u6570\u5982\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u76f8\u5e94\u57fa\u6570\u7684\u81ea\u7136\u6570(\u5982 ASCII-128 )\u3002 (1). \u9664\u6cd5\u6563\u5217\u6cd5 ( the division method ) \u2003\u6563\u5217\u51fd\u6570\u4e3a\uff1a $$ h(k)=k\\ mod\\ m $$ \u2003$m$ \u5e94\u5c3d\u91cf\u907f\u514d\u4e3a2\u7684\u5e42\uff0c\u5982\u679c $m=2^p$\uff0c\u90a3\u4e48 $h(k)$ \u5c31\u662f $k$ \u7684 $p$ \u4e2a\u6700\u4f4e\u4f4d\u6570\u5b57\u3002\u9664\u975e\u5df2\u77e5\u4f4e\u4f4d\u7684\u5404\u79cd\u6392\u5217\u7684\u51fa\u73b0\u662f\u7b49\u53ef\u80fd\u7684\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u9009\u53d6 $m$ \u4f1a\u63d0\u9ad8\u6563\u5217\u51b2\u7a81\u7684\u6982\u7387\u3002 \u2003$m$ \u4e5f\u5e94\u5f53\u907f\u514d\u63a5\u8fd12\u7684\u5e42\u3002\u8003\u8651\u4ee5\u4e0b\u60c5\u5883\uff1a\u5047\u8bbe $m=2^p-1$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fdb\u5236\u4e3a $2^p$ \u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u901a\u8fc7\u53d6\u4f59\u8fd0\u7b97\u8bc1\u660e $h(xyz...)=(h(x)+h(y)+h(z)+....)mod\\ (2^p-1)$\uff0c\u5373\u5bf9\u6b64\u6761\u4ef6\u4e0b\u7684\u540c\u4e00\u5b57\u7b26\u4e32\u7684\u4e0d\u540c\u6392\u5217\uff0c\u5b83\u4eec\u7684\u6563\u5217\u503c\u662f\u51b2\u7a81\u7684\u3002 \u2003\u5728\u7a0b\u5e8f\u5904\u7406\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f80\u5f80\u5177\u6709\u4e00\u5b9a\u7684\u5c40\u90e8\u6027\uff0c\u4f8b\u5982\u67d0\u4e2a\u6570\u6309\u7167\u4e00\u5b9a\u7684\u6b65\u957f $s$ \u8fed\u4ee3\u589e\u52a0\u3002\u5982\u679c\u53ef\u4ee5\u4fdd\u8bc1 $\\gcd(s,m)=1$\uff0c\u5373 $s$ \u4e0e $m$ \u4e92\u8d28\uff0c\u90a3\u4e48\u7531\u53d6\u4f59\u7684\u6027\u8d28\u53ef\u77e5\u6570\u636e\u5728\u6309\u7167 $s$ \u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5747\u5300\u5206\u5e03\u5728 $m$ \u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u3002\u7531\u4e8e $s$ \u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6211\u4eec\u4ee4 $m$ \u662f\u4e00\u4e2a\u8f83\u5927\u7684\u4e14\u4e0d\u63a5\u8fd1\u4e8e2\u7684\u5e42\u7684\u8d28\u6570\uff0c\u5c31\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u9009\u62e9\u3002 (2). \u4e58\u6cd5\u6563\u5217\u6cd5 ( the multiplication method ) \u2003\u6563\u5217\u51fd\u6570\u4e3a\uff1a $$ h(k)=\\lfloor m(kA\\ mod\\ 1) \\rfloor $$ \u2003\u4e0b\u9762\u89e3\u91ca\u5404\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u3002\u8bbe $w$ \u4e3a\u8ba1\u7b97\u673a\u7684\u5b57\u957f ( word size )\uff0c$A=s/2^w$ \u4e14 $0< A< 1$\uff0c$k$ \u548c $s$ \u90fd\u6b63\u597d\u53ef\u4ee5\u7528\u4e00\u4e2a\u5355\u5b57\u8868\u793a\uff0c\u5373 $0< k< 2^w$\u3001$0< s<2^w$ \u662f\u7528 $w-1$ bit \u4f4d\u8868\u793a\u7684\u6570\u3002$m$ \u4e00\u822c\u4e3a $2$ \u7684\u67d0\u4e2a\u5e42\u6b21\uff0c\u4ee4 $m=2^p$\u3002\u5219\u539f\u5f0f\u53ef\u8f6c\u5316\u4e3a\uff1a $$ h(k)=\\lfloor 2^p(\\frac{k\\ \u00b7s}{2^w}\\ mod\\ 1)\\rfloor $$ \u2003\u6574\u4e2a\u6620\u5c04\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a$k$ \u4e0e $s$ \u7684\u4e58\u79ef\u7ed3\u679c\u7684 $2w$ \u4f4d\u6570\u53f3\u79fb $w$ \u4f4d\u53d8\u6210\u5c0f\u6570\u540e\uff0c\u7528\u53d6\u6a21\u8fd0\u7b97\u4fdd\u7559\u5c0f\u6570\u4f4d\uff0c\u518d\u5de6\u79fb $p$ \u4f4d\u540e\u53d6\u6574\u3002\u6574\u4f53\u76f8\u5f53\u4e8e\u53ea\u4fdd\u7559 $k\\ \u00b7s$ \u7684\u540e $w$ \u4f4d\u7684\u524d $p$ \u4f4d\u3002 \u2003\u6b64\u65b9\u6cd5\u5bf9\u4efb\u4f55 $A$ \u503c\u90fd\u9002\u7528\uff0c\u4f46\u5bf9\u67d0\u4e9b\u7279\u5b9a\u7684 $A$ \u6548\u679c\u66f4\u597d\uff0c\u6700\u4f73\u9009\u62e9\u4e0e\u5f85\u6563\u5217\u7684\u6570\u636e\u6709\u5173\u3002 Knuth \u8ba4\u4e3a $A\\approx (\\sqrt{5}-1)/2=0.6180339887$ \u662f\u4e00\u4e2a\u6bd4\u8f83\u7406\u60f3\u7684\u503c\u3002 (3). \u5168\u57df\u6563\u5217 ( universal hashing ) \u2003\u5bf9\u4efb\u4e00\u4e2a\u6563\u5217\u51fd\u6570\uff0c\u90fd\u5b58\u5728\u6700\u574f\u60c5\u51b5\uff0c\u4f7f\u5f97\u6240\u6709\u5173\u952e\u5b57\u90fd\u88ab\u6563\u5217\u81f3\u540c\u4e00\u4e2a\u69fd\u4e2d\u3002\u552f\u4e00\u6709\u6548\u7684\u6539\u8fdb\u65b9\u6cd5\u662f\u968f\u673a\u9009\u53d6\u6563\u5217\u51fd\u6570\uff0c\u83b7\u5f97\u8f83\u597d\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u5168\u57df\u6563\u5217\u3002 \u2003\u8bbe $\\mathcal{H}$ \u4e3a\u6709\u9650\u6563\u5217\u51fd\u6570 ( $U\\rightarrow \\lbrace 0,...,m-1\\rbrace$ ) \u7684\u96c6\u5408\uff0c\u5982\u679c\u5bf9\u6bcf\u4e00\u5bf9\u4e0d\u540c\u7684\u5173\u952e\u5b57 $k,\\ l\\in U$\uff0c\u6ee1\u8db3 $h(k)=h(l)$ \u7684\u51fd\u6570 $h\\in \\mathcal{H}$ \u7684\u4e2a\u6570\u81f3\u591a\u4e3a $|\\mathcal{H}|/m$\uff0c\u90a3\u4e48\u51fd\u6570\u7ec4 $\\mathcal{H}$ \u662f\u5168\u57df\u7684\u3002( or: \u4ece\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u6563\u5217\u51fd\u6570\uff0c\u5bf9\u4e0d\u540c\u7684 $k,\\ l$\uff0c\u53d1\u751f\u51b2\u7a81\u7684\u6982\u7387\u4e0d\u5927\u4e8e $1/m$). \u2003\u4e0b\u9762\u7684\u7ed3\u8bba\u8bf4\u660e\u4e86\u5168\u57df\u6563\u5217\u5177\u6709\u8f83\u597d\u7684\u5e73\u5747\u6027\u80fd\u3002 \u5b9a\u7406 \uff1a \u8bbe $h\\in \\mathcal{H}$\uff0c\u5c06 $n$ \u4e2a\u5173\u952e\u5b57\u6563\u5217\u81f3\u5927\u5c0f\u4e3a $m$ \u7684\u8868 $T$ \u4e2d\uff0c\u5e76\u4f7f\u7528\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\u3002\u82e5 $k$ \u4e0d\u5728\u8868\u4e2d\uff0c\u5219 $k$ \u88ab\u6563\u5217\u81f3\u5176\u4e2d\u94fe\u8868\u7684\u671f\u671b\u957f\u5ea6 $E[n_{h(k)}]$ \u81f3\u591a\u4e3a $\\alpha$\uff1b\u82e5 $k$ \u5728\u8868\u4e2d\uff0c\u5219\u5305\u542b $k$ \u7684\u94fe\u8868\u671f\u671b\u957f\u5ea6 $E[n_{h(k)}]$ \u81f3\u591a\u4e3a $1+\\alpha$\u3002 [\u8bc1] \u5bf9\u4e0d\u540c\u5173\u952e\u5b57 $k\u3001l$\uff0c\u5b9a\u4e49 $X_{kl}=I\\lbrace h(k)=h(l) \\rbrace$\uff0c\u7531\u5168\u57df\u6563\u5217\u7684\u5b9a\u4e49\uff0c$P(\\lbrace h(k)=h(l) \\rbrace)\\leq 1/m$\uff0c\u6240\u4ee5 $E[X_{kl}]\\leq 1/m$\u3002 \u2003\u5b9a\u4e49\u8868\u793a\u4e0e $k$ \u6563\u5217\u81f3\u540c\u4e00\u4e2a\u69fd\u7684\u5173\u952e\u5b57\u7684\u6570\u91cf\u7684\u968f\u673a\u53d8\u91cf\uff1a$$Y_k=\\sum_{l\\in T,l \\ne k} E[X_{kl}]$$\u3002\u4e8e\u662f\uff0c\u6709 $$E[Y_k]\\leq \\sum_{l\\in T,l \\ne k} \\frac{1}{m}$$\u3002 \u2003 (i). \u5982\u679c $k$ \u4e0d\u5728\u8868 $T$ \u4e2d\uff0c\u90a3\u4e48 $|\\lbrace l\\in T, l\\ne k \\rbrace |=n$\uff0c\u4e8e\u662f $E[n_{h(k)}]=E[Y_k]\\leq n/m$\u3002 \u2003 (ii). \u5982\u679c $k$ \u5728\u8868 $T$ \u4e2d\uff0c\u90a3\u4e48$|\\lbrace l\\in T, l \\ne k \\rbrace |=n-1$\uff0c\u4e8e\u662f $E[n_{h(k)}]=E[Y_k]+1\\leq (n-1)/m+1<1+\\alpha$\u3002 \u2003\u6700\u540e\u7ed9\u51fa\u8bbe\u8ba1\u4e00\u4e2a\u5168\u57df\u6563\u5217\u51fd\u6570\u7c7b\u7684\u65b9\u6cd5\u3002 \u2003\u9996\u5148\uff0c\u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570 $p$\uff0c\u4f7f\u5f97\u5bf9\u4efb\u610f\u7684\u5173\u952e\u5b57\u90fd\u6709 $k\\in [0, p-1]$ ($p>m$) \u3002\u4ee4 $Z_p=\\lbrace 0,1,...,p-1\\rbrace$\uff0c$Z_p^{\\ast} =\\lbrace 1,2,...,p-1\\rbrace$\u3002 \u2003\u7136\u540e\uff0c\u5bf9\u4efb\u4f55 $a\\in Z_p^{\\ast}, b\\in Z_p$\uff0c\u5b9a\u4e49 $$h_{ab}(k)=((ak+b)\\mod p)\\mod m$$ \u6240\u6709\u8fd9\u6837\u7684\u51fd\u6570\u6784\u6210\u7684\u51fd\u6570\u7c07 $\\mathcal{H}_{pm}=\\lbrace h_{ab}:a\\in Z_p^{\\ast}, b\\in Z_p\\rbrace $ \u662f\u5168\u57df\u7684\u3002$\\mathcal{H}$ \u4e2d\u5171\u5305\u542b $p(p-1)$ \u4e2a\u51fd\u6570\uff0c\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5c06 $Z_p$ \u6620\u5c04\u5230 $Z_m$\uff0c\u4e14\u5b83\u6709\u4e00\u4e2a\u826f\u597d\u7684\u6027\u8d28\uff1a$m$ \u7684\u9009\u62e9\u662f\u4efb\u610f\u7684\uff0c\u4e0d\u4e00\u5b9a\u662f\u7d20\u6570\u3002 \u2003\u4e0b\u9762\u8bf4\u660e\u7ed3\u8bba\u7684\u6b63\u786e\u6027\u3002 \u2003\u8003\u8651 $Z_p$ \u4e2d\u4efb\u4e24\u4e2a\u4e0d\u540c\u7684\u5173\u952e\u5b57 $k\u3001l$\uff0c\u4ee4 $r=(ak+b)\\mod p$\uff0c$s=(al+b)\\mod p$\uff0c\u4e8e\u662f\u6709 $r-s\\equiv a(k-l) \\mod p$\u3002\u56e0\u4e3a $a< p$\uff0c$k-l< p$\uff0c\u4e14 $p$ \u662f\u7d20\u6570\uff0c\u90a3\u4e48 $r\\ne s$\uff0c\u8fd9\u6837 $k$ \u548c $l$ \u9996\u5148\u88ab\u6620\u5c04\u5230\u4e0d\u540c\u7684\u5b9e\u6570\u4e0a\u3002\u6b64\u5916\uff0c\u6570\u5bf9 $(a,b)$ \u6709 $p(p-1)$ \u4e2d\u53ef\u80fd\u7684\u9009\u62e9\uff0c\u6bcf\u4e00\u79cd\u9009\u62e9\u90fd\u4f1a\u89e3\u51fa\u4e0d\u540c\u7684 $(r,s)(r\\ne s)$(\u539f\u56e0\u7565)\uff0c\u56e0\u6b64 $(a,b)$ \u4e0e $(r,s)$ \u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u6240\u4ee5 $k$ \u548c $l$ \u51b2\u7a81\u7684\u6982\u7387\u5c31\u7b49\u4e8e $r\\equiv s(\\mod m)$ \u7684\u6982\u7387\u3002 \u2003\u5f53\u9009\u5b9a\u4e00\u4e2a $r$\uff0c$s$ \u5c31\u53ea\u80fd\u5728\u5269\u4e0b $p-1$ \u4e2a\u6570\u4e2d\u9009\u62e9\uff0c\u5176\u4e2d\u6ee1\u8db3 $s\\ne r$ \u4e14 $s\\equiv r(\\mod m)$ \u7684\u503c\u7684\u4e2a\u6570\u81f3\u591a\u4e3a\uff1a$\\lceil p/m \\rceil-1\\leq((p+m-1)/m)-1=(p-1)/m$\u3002 \u2003\u5f53\u8fdb\u884c\u6700\u540e\u4e00\u6b65\u6a21 $m$ \u8fd0\u7b97\u65f6\uff0c$s$ \u4e0e $r$ \u51b2\u7a81\u7684\u6982\u7387\u81f3\u591a\u4e3a $((p-1)/m)/(p-1)=1/m$\u3002 \u2003\u56e0\u6b64\uff0c\u5bf9\u4efb\u610f\u4e0d\u540c\u7684 $k,l\\in Z_p$\uff0c\u6709 $P(\\lbrace h_{ab}(k)=h_{ab}(l) \\rbrace)\\leq 1/m$\u3002","title":"2.Hash tables"},{"location":"3-DataStructures/3.2/#1","text":"\u8bb8\u591a\u5e94\u7528\u90fd\u9700\u8981\u4e00\u4e2a\u52a8\u6001\u96c6\u5408\uff0c\u5b83\u81f3\u5c11\u652f\u6301 INSERT \u3001 SEARCH \u548c DELETE \u7b49\u64cd\u4f5c\u3002 \u2003\u8bb0 $U=\\lbrace 0,\\ 1,\\ ...,n-1\\rbrace$ \u4e3a\u5173\u952e\u5b57\u5168\u57df( universe of keys )\uff0c\u5047\u8bbe\u52a8\u6001\u96c6\u5408\u9700\u8981\u7684\u5173\u952e\u5b57\u90fd\u53d6\u4e8e\u6b64\uff0c\u4e14\u6ca1\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f8\u540c\u3002 \u2003\u8fd9\u4e2a\u52a8\u6001\u96c6\u5408\u53ef\u4ee5\u7528\u6570\u7ec4\u8868\u793a\uff0c\u6216\u79f0\u5176\u4e3a\u76f4\u63a5\u5bfb\u5740\u8868( direct-address table )\uff0c\u8bb0\u4e3a $T[0..n-1]$\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u79f0\u4e3a\u69fd( slot )\uff0c\u69fd $T[k]$ \u6307\u5411 $U$ \u4e2d\u5173\u952e\u5b57\u4e3a $k$ \u7684\u5143\u7d20\u3002 \u2003\u76f4\u63a5\u5bfb\u5740\u8868\u7684\u7f3a\u70b9\u5341\u5206\u660e\u663e\uff1a\u5982\u679c $|U|$ \u5f88\u5927\uff0c\u5219\u53ef\u80fd\u9700\u8981\u4e0d\u5207\u5b9e\u9645\u7684\u5185\u5b58\uff1b\u5982\u679c $|K|$ \u76f8\u5bf9\u4e8e $|U|$ \u5f88\u5c0f\uff0c\u5219\u4f1a\u6d6a\u8d39\u5f88\u591a\u7a7a\u95f4\u3002\u5728\u6563\u5217\u8868\u65b9\u5f0f\u4e0b\uff0c\u901a\u8fc7\u6563\u5217\u51fd\u6570 ( hash function ) $h$ \u548c\u5173\u952e\u5b57 $k$ \u8ba1\u7b97\u51fa\u69fd\u7684\u4f4d\u7f6e $h(k)$\u3002\u5176\u4e2d $h: U\u2192\\lbrace0,\\ 1,...,m-1 \\rbrace$\u3002 \u2003\u4f46\u662f\uff0c\u4e24\u4e2a\u5173\u952e\u5b57\u53ef\u80fd\u88ab\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u69fd\u4e2d\uff0c\u8fd9\u79cd\u60c5\u5f62\u88ab\u79f0\u4e4b\u4e3a\u51b2\u7a81 ( collision )\uff0c\u60f3\u8981\u5b8c\u5168\u907f\u514d\u51b2\u7a81\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u901a\u8fc7\u597d\u7684\u6563\u5217\u51fd\u6570 $h$ \u5c3d\u53ef\u80fd\u907f\u514d\u51b2\u7a81\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u901a\u8fc7\u6709\u6548\u7684\u65b9\u6cd5\u89e3\u51b3\u51b2\u7a81\u3002","title":"1. \u6563\u5217\u8868\u6982\u8ff0"},{"location":"3-DataStructures/3.2/#2","text":"","title":"2. \u51b2\u7a81"},{"location":"3-DataStructures/3.2/#1-chaining","text":"\u628a\u6563\u5217\u5230\u540c\u4e00\u4e2a\u69fd\u7684\u5143\u7d20\u90fd\u653e\u5728\u4e00\u4e2a\u94fe\u8868\u4e2d\u3002\u63d2\u5165\u7684\u65f6\u95f4\u4ee3\u4ef7\u4e3a $O(1)$\uff0c\u9700\u8981\u907f\u514d\u91cd\u590d\u5143\u7d20\u5219\u9700\u8981\u989d\u5916\u7684\u5f00\u9500\uff1b\u5982\u679c\u4f7f\u7528\u53cc\u5411\u94fe\u8868\uff0c\u5220\u9664\u64cd\u4f5c\u4e5f\u4e3a $O(1)$\uff0c\u8f93\u5165\u53c2\u6570\u4e3a\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u7ed3\u70b9\u6307\u9488\u3002 \u2003\u7ed9\u5b9a\u4e00\u4e2a\u80fd\u5b58\u653e $n$ \u4e2a\u5143\u7d20\u7684\u3001\u5177\u6709 $m$ \u4e2a\u69fd\u4f4d\u7684\u6563\u5217\u8868 $T$\uff0c\u5b9a\u4e49 $T$ \u7684\u88c5\u8f7d\u56e0\u5b50 ( load factor ) \u4e3a $\\alpha=n/m$\uff0c\u5373\u4e00\u4e2a\u94fe\u7684\u5e73\u5747\u5b58\u50a8\u5143\u7d20\u6570\u3002\u8bbe $T[i]$ \u7684\u957f\u5ea6\u4e3a $n_i$\uff0c\u5219\u6709 $n=n_0+n_1+...+n_{m-1}$\uff0c$E[n_i]=\\alpha=n/m$\u3002\u5047\u5b9a $h(k)$ \u7684\u8ba1\u7b97\u65f6\u95f4\u4e3a $O(1)$\uff0c\u4e0b\u9762\u5206\u6790\u94fe\u63a5\u6cd5\u7684\u6027\u80fd\u3002 \u5b9a\u7406 \uff1a\u5728\u7b80\u5355\u5747\u5300\u6563\u5217\u7684\u5047\u8bbe\u4e0b\uff0c\u5bf9\u4e8e\u7528\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\u7684\u6563\u5217\u8868\uff0c\u4e00\u6b21 \u4e0d\u6210\u529f \u67e5\u627e\u7684\u5e73\u5747\u65f6\u95f4\u4e3a $\\Theta (1+\\alpha)$\u3002 \u2003\u5f53\u67e5\u627e\u5173\u952e\u5b57 $k$ \u65f6\uff0c\u5728\u4e0d\u6210\u529f\u67e5\u627e\u7684\u524d\u63d0\u4e0b\uff0c\u76f8\u5f53\u4e8e\u627e\u81f3\u94fe\u8868 $T[h(k)]$ \u672b\u5c3e\u7684\u671f\u671b\u65f6\u95f4\uff0c\u4e14 $E[n_{h(k)}]=\\alpha$\u3002\u4e8e\u662f\uff0c\u9700\u8981\u7684\u603b\u65f6\u95f4\u4e3a $\\Theta (1+\\alpha)$\u3002 \u5b9a\u7406 \uff1a\u5728\u7b80\u5355\u5747\u5300\u6563\u5217\u7684\u5047\u8bbe\u4e0b\uff0c\u5bf9\u4e8e\u7528\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\u7684\u6563\u5217\u8868\uff0c\u4e00\u6b21 \u6210\u529f \u67e5\u627e\u7684\u5e73\u5747\u65f6\u95f4\u4e3a $\\Theta (1+\\alpha)$\u3002 \u2003\u5047\u5b9a\u8981\u67e5\u627e\u7684\u5173\u952e\u5b57\u662f $n$ \u4e2a\u5143\u7d20\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4e14\u662f\u7b49\u53ef\u80fd\u7684\u3002\u5728\u5bf9 $x$ \u7684\u4e00\u6b21\u6210\u529f\u67e5\u627e\u4e2d\uff0c\u67e5\u627e\u7684\u5143\u7d20\u6570\u662f\u6392\u5217\u5728 $x$ \u524d\u7684\u5143\u7d20\u6570\u52a0\u4e00\uff0c\u4e14\u51fa\u73b0\u5728 $x$ \u524d\u7684\u5143\u7d20\u5747\u662f\u5728 $x$ \u4e4b\u540e\u63d2\u5165\u7684\u5143\u7d20\u3002 \u2003\u57fa\u4e8e\u6b64\uff0c\u8bbe $x_i$ \u4e3a\u7b2c $i$ \u4e2a\u63d2\u5165\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u4e14 $k_i=x_i.key$\uff0c\u4ee4$$X_{ij}= \\begin{cases} 1& if\\ h(k_i)=h(k_j)\\\\ 0& else \\end{cases}$$ $P(\\lbrace h(k_i)=h(k_j)\\rbrace)=1/m$\uff0c\u4e8e\u662f\u6709 $E[X_{ij}]=1/m$\u3002\u7531\u4e8e\u67e5\u627e\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u7b49\u53ef\u80fd\u7684\uff0c\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684\u67e5\u627e\u6570\u4e4b\u548c\u518d\u9664\u4ee5 $n$\uff0c\u4ee5\u6b64\u4e3a\u7edf\u8ba1\u91cf\u5bf9\u5176\u6c42\u671f\u671b\u3002 $$ \\begin{aligned} E[\\frac{1}{n}\\sum_{i=1}^{n}(1+\\sum_{j=i+1}^{n}X_{ij})]&=\\frac{1}{n}\\sum_{i=1}^{n}(1+\\sum_{j=i+1}^{n}E[X_{ij}])\\\\ &=1+\\frac{1}{nm}(n^2-\\frac{n(n+1)}{2})\\\\ &=1+\\frac{\\alpha}{2}-\\frac{\\alpha}{2n} \\end{aligned} $$ \u2003\u56e0\u6b64\uff0c\u67e5\u627e\u9700\u8981\u7684\u65f6\u95f4\u4e3a $\\Theta (2+\\frac{\\alpha}{2}-\\frac{\\alpha}{2n})=\\Theta (1+\\alpha)$\u3002 \u2003\u5982\u679c\u6563\u5217\u8868\u7684\u69fd\u6570\u4e0e\u8868\u4e2d\u7684\u5143\u7d20\u6570\u6210\u6b63\u6bd4\uff0c\u5373 $n=O(m)$\uff0c\u5219 $\\alpha=O(1)$\uff0c\u8fd9\u610f\u5473\u7740\u67e5\u627e\u9700\u8981 $O(1)$ \u65f6\u95f4\uff0c\u4e5f\u610f\u5473\u7740\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u5728\u5185\u7684\u5168\u90e8\u5b57\u5178\u64cd\u4f5c\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\u90fd\u53ea\u9700\u8981 $O(1)$ \u65f6\u95f4\u3002","title":"(1). \u94fe\u63a5\u6cd5 (chaining)"},{"location":"3-DataStructures/3.2/#3","text":"\u4e00\u4e2a\u597d\u7684\u6563\u5217\u51fd\u6570\u5e94(\u8fd1\u4f3c)\u6ee1\u8db3\u7b80\u5355\u5747\u5300\u6563\u5217 ( simple uniform hashing ) \u5047\u8bbe\uff1a\u6bcf\u4e2a\u5173\u952e\u5b57\u90fd\u88ab\u7b49\u53ef\u80fd\u5730\u6563\u5217\u5230 $m$ \u4e2a\u69fd\u4f4d\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u5e76\u4e0e\u5176\u4ed6\u5173\u952e\u5b57\u5df2\u6563\u5217\u5230\u54ea\u4e2a\u69fd\u4f4d\u65e0\u5173\u3002 \u2003\u5047\u5b9a\u5173\u952e\u5b57\u7684\u5168\u57df\u4e3a\u81ea\u7136\u6570\u96c6 $N$\uff0c\u5982\u679c\u6240\u7ed9\u5173\u952e\u5b57\u4e0d\u662f\u81ea\u7136\u6570\u5982\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u76f8\u5e94\u57fa\u6570\u7684\u81ea\u7136\u6570(\u5982 ASCII-128 )\u3002","title":"3. \u6563\u5217\u51fd\u6570"},{"location":"3-DataStructures/3.2/#1-the-division-method","text":"\u6563\u5217\u51fd\u6570\u4e3a\uff1a $$ h(k)=k\\ mod\\ m $$ \u2003$m$ \u5e94\u5c3d\u91cf\u907f\u514d\u4e3a2\u7684\u5e42\uff0c\u5982\u679c $m=2^p$\uff0c\u90a3\u4e48 $h(k)$ \u5c31\u662f $k$ \u7684 $p$ \u4e2a\u6700\u4f4e\u4f4d\u6570\u5b57\u3002\u9664\u975e\u5df2\u77e5\u4f4e\u4f4d\u7684\u5404\u79cd\u6392\u5217\u7684\u51fa\u73b0\u662f\u7b49\u53ef\u80fd\u7684\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u9009\u53d6 $m$ \u4f1a\u63d0\u9ad8\u6563\u5217\u51b2\u7a81\u7684\u6982\u7387\u3002 \u2003$m$ \u4e5f\u5e94\u5f53\u907f\u514d\u63a5\u8fd12\u7684\u5e42\u3002\u8003\u8651\u4ee5\u4e0b\u60c5\u5883\uff1a\u5047\u8bbe $m=2^p-1$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fdb\u5236\u4e3a $2^p$ \u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u901a\u8fc7\u53d6\u4f59\u8fd0\u7b97\u8bc1\u660e $h(xyz...)=(h(x)+h(y)+h(z)+....)mod\\ (2^p-1)$\uff0c\u5373\u5bf9\u6b64\u6761\u4ef6\u4e0b\u7684\u540c\u4e00\u5b57\u7b26\u4e32\u7684\u4e0d\u540c\u6392\u5217\uff0c\u5b83\u4eec\u7684\u6563\u5217\u503c\u662f\u51b2\u7a81\u7684\u3002 \u2003\u5728\u7a0b\u5e8f\u5904\u7406\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f80\u5f80\u5177\u6709\u4e00\u5b9a\u7684\u5c40\u90e8\u6027\uff0c\u4f8b\u5982\u67d0\u4e2a\u6570\u6309\u7167\u4e00\u5b9a\u7684\u6b65\u957f $s$ \u8fed\u4ee3\u589e\u52a0\u3002\u5982\u679c\u53ef\u4ee5\u4fdd\u8bc1 $\\gcd(s,m)=1$\uff0c\u5373 $s$ \u4e0e $m$ \u4e92\u8d28\uff0c\u90a3\u4e48\u7531\u53d6\u4f59\u7684\u6027\u8d28\u53ef\u77e5\u6570\u636e\u5728\u6309\u7167 $s$ \u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5747\u5300\u5206\u5e03\u5728 $m$ \u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u3002\u7531\u4e8e $s$ \u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6211\u4eec\u4ee4 $m$ \u662f\u4e00\u4e2a\u8f83\u5927\u7684\u4e14\u4e0d\u63a5\u8fd1\u4e8e2\u7684\u5e42\u7684\u8d28\u6570\uff0c\u5c31\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u9009\u62e9\u3002","title":"(1). \u9664\u6cd5\u6563\u5217\u6cd5 (the division method)"},{"location":"3-DataStructures/3.2/#2-the-multiplication-method","text":"\u6563\u5217\u51fd\u6570\u4e3a\uff1a $$ h(k)=\\lfloor m(kA\\ mod\\ 1) \\rfloor $$ \u2003\u4e0b\u9762\u89e3\u91ca\u5404\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u3002\u8bbe $w$ \u4e3a\u8ba1\u7b97\u673a\u7684\u5b57\u957f ( word size )\uff0c$A=s/2^w$ \u4e14 $0< A< 1$\uff0c$k$ \u548c $s$ \u90fd\u6b63\u597d\u53ef\u4ee5\u7528\u4e00\u4e2a\u5355\u5b57\u8868\u793a\uff0c\u5373 $0< k< 2^w$\u3001$0< s<2^w$ \u662f\u7528 $w-1$ bit \u4f4d\u8868\u793a\u7684\u6570\u3002$m$ \u4e00\u822c\u4e3a $2$ \u7684\u67d0\u4e2a\u5e42\u6b21\uff0c\u4ee4 $m=2^p$\u3002\u5219\u539f\u5f0f\u53ef\u8f6c\u5316\u4e3a\uff1a $$ h(k)=\\lfloor 2^p(\\frac{k\\ \u00b7s}{2^w}\\ mod\\ 1)\\rfloor $$ \u2003\u6574\u4e2a\u6620\u5c04\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a$k$ \u4e0e $s$ \u7684\u4e58\u79ef\u7ed3\u679c\u7684 $2w$ \u4f4d\u6570\u53f3\u79fb $w$ \u4f4d\u53d8\u6210\u5c0f\u6570\u540e\uff0c\u7528\u53d6\u6a21\u8fd0\u7b97\u4fdd\u7559\u5c0f\u6570\u4f4d\uff0c\u518d\u5de6\u79fb $p$ \u4f4d\u540e\u53d6\u6574\u3002\u6574\u4f53\u76f8\u5f53\u4e8e\u53ea\u4fdd\u7559 $k\\ \u00b7s$ \u7684\u540e $w$ \u4f4d\u7684\u524d $p$ \u4f4d\u3002 \u2003\u6b64\u65b9\u6cd5\u5bf9\u4efb\u4f55 $A$ \u503c\u90fd\u9002\u7528\uff0c\u4f46\u5bf9\u67d0\u4e9b\u7279\u5b9a\u7684 $A$ \u6548\u679c\u66f4\u597d\uff0c\u6700\u4f73\u9009\u62e9\u4e0e\u5f85\u6563\u5217\u7684\u6570\u636e\u6709\u5173\u3002 Knuth \u8ba4\u4e3a $A\\approx (\\sqrt{5}-1)/2=0.6180339887$ \u662f\u4e00\u4e2a\u6bd4\u8f83\u7406\u60f3\u7684\u503c\u3002","title":"(2). \u4e58\u6cd5\u6563\u5217\u6cd5 (the multiplication method)"},{"location":"3-DataStructures/3.2/#3-universal-hashing","text":"\u5bf9\u4efb\u4e00\u4e2a\u6563\u5217\u51fd\u6570\uff0c\u90fd\u5b58\u5728\u6700\u574f\u60c5\u51b5\uff0c\u4f7f\u5f97\u6240\u6709\u5173\u952e\u5b57\u90fd\u88ab\u6563\u5217\u81f3\u540c\u4e00\u4e2a\u69fd\u4e2d\u3002\u552f\u4e00\u6709\u6548\u7684\u6539\u8fdb\u65b9\u6cd5\u662f\u968f\u673a\u9009\u53d6\u6563\u5217\u51fd\u6570\uff0c\u83b7\u5f97\u8f83\u597d\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u5168\u57df\u6563\u5217\u3002 \u2003\u8bbe $\\mathcal{H}$ \u4e3a\u6709\u9650\u6563\u5217\u51fd\u6570 ( $U\\rightarrow \\lbrace 0,...,m-1\\rbrace$ ) \u7684\u96c6\u5408\uff0c\u5982\u679c\u5bf9\u6bcf\u4e00\u5bf9\u4e0d\u540c\u7684\u5173\u952e\u5b57 $k,\\ l\\in U$\uff0c\u6ee1\u8db3 $h(k)=h(l)$ \u7684\u51fd\u6570 $h\\in \\mathcal{H}$ \u7684\u4e2a\u6570\u81f3\u591a\u4e3a $|\\mathcal{H}|/m$\uff0c\u90a3\u4e48\u51fd\u6570\u7ec4 $\\mathcal{H}$ \u662f\u5168\u57df\u7684\u3002( or: \u4ece\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u6563\u5217\u51fd\u6570\uff0c\u5bf9\u4e0d\u540c\u7684 $k,\\ l$\uff0c\u53d1\u751f\u51b2\u7a81\u7684\u6982\u7387\u4e0d\u5927\u4e8e $1/m$). \u2003\u4e0b\u9762\u7684\u7ed3\u8bba\u8bf4\u660e\u4e86\u5168\u57df\u6563\u5217\u5177\u6709\u8f83\u597d\u7684\u5e73\u5747\u6027\u80fd\u3002 \u5b9a\u7406 \uff1a \u8bbe $h\\in \\mathcal{H}$\uff0c\u5c06 $n$ \u4e2a\u5173\u952e\u5b57\u6563\u5217\u81f3\u5927\u5c0f\u4e3a $m$ \u7684\u8868 $T$ \u4e2d\uff0c\u5e76\u4f7f\u7528\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\u3002\u82e5 $k$ \u4e0d\u5728\u8868\u4e2d\uff0c\u5219 $k$ \u88ab\u6563\u5217\u81f3\u5176\u4e2d\u94fe\u8868\u7684\u671f\u671b\u957f\u5ea6 $E[n_{h(k)}]$ \u81f3\u591a\u4e3a $\\alpha$\uff1b\u82e5 $k$ \u5728\u8868\u4e2d\uff0c\u5219\u5305\u542b $k$ \u7684\u94fe\u8868\u671f\u671b\u957f\u5ea6 $E[n_{h(k)}]$ \u81f3\u591a\u4e3a $1+\\alpha$\u3002 [\u8bc1] \u5bf9\u4e0d\u540c\u5173\u952e\u5b57 $k\u3001l$\uff0c\u5b9a\u4e49 $X_{kl}=I\\lbrace h(k)=h(l) \\rbrace$\uff0c\u7531\u5168\u57df\u6563\u5217\u7684\u5b9a\u4e49\uff0c$P(\\lbrace h(k)=h(l) \\rbrace)\\leq 1/m$\uff0c\u6240\u4ee5 $E[X_{kl}]\\leq 1/m$\u3002 \u2003\u5b9a\u4e49\u8868\u793a\u4e0e $k$ \u6563\u5217\u81f3\u540c\u4e00\u4e2a\u69fd\u7684\u5173\u952e\u5b57\u7684\u6570\u91cf\u7684\u968f\u673a\u53d8\u91cf\uff1a$$Y_k=\\sum_{l\\in T,l \\ne k} E[X_{kl}]$$\u3002\u4e8e\u662f\uff0c\u6709 $$E[Y_k]\\leq \\sum_{l\\in T,l \\ne k} \\frac{1}{m}$$\u3002 \u2003 (i). \u5982\u679c $k$ \u4e0d\u5728\u8868 $T$ \u4e2d\uff0c\u90a3\u4e48 $|\\lbrace l\\in T, l\\ne k \\rbrace |=n$\uff0c\u4e8e\u662f $E[n_{h(k)}]=E[Y_k]\\leq n/m$\u3002 \u2003 (ii). \u5982\u679c $k$ \u5728\u8868 $T$ \u4e2d\uff0c\u90a3\u4e48$|\\lbrace l\\in T, l \\ne k \\rbrace |=n-1$\uff0c\u4e8e\u662f $E[n_{h(k)}]=E[Y_k]+1\\leq (n-1)/m+1<1+\\alpha$\u3002 \u2003\u6700\u540e\u7ed9\u51fa\u8bbe\u8ba1\u4e00\u4e2a\u5168\u57df\u6563\u5217\u51fd\u6570\u7c7b\u7684\u65b9\u6cd5\u3002 \u2003\u9996\u5148\uff0c\u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570 $p$\uff0c\u4f7f\u5f97\u5bf9\u4efb\u610f\u7684\u5173\u952e\u5b57\u90fd\u6709 $k\\in [0, p-1]$ ($p>m$) \u3002\u4ee4 $Z_p=\\lbrace 0,1,...,p-1\\rbrace$\uff0c$Z_p^{\\ast} =\\lbrace 1,2,...,p-1\\rbrace$\u3002 \u2003\u7136\u540e\uff0c\u5bf9\u4efb\u4f55 $a\\in Z_p^{\\ast}, b\\in Z_p$\uff0c\u5b9a\u4e49 $$h_{ab}(k)=((ak+b)\\mod p)\\mod m$$ \u6240\u6709\u8fd9\u6837\u7684\u51fd\u6570\u6784\u6210\u7684\u51fd\u6570\u7c07 $\\mathcal{H}_{pm}=\\lbrace h_{ab}:a\\in Z_p^{\\ast}, b\\in Z_p\\rbrace $ \u662f\u5168\u57df\u7684\u3002$\\mathcal{H}$ \u4e2d\u5171\u5305\u542b $p(p-1)$ \u4e2a\u51fd\u6570\uff0c\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5c06 $Z_p$ \u6620\u5c04\u5230 $Z_m$\uff0c\u4e14\u5b83\u6709\u4e00\u4e2a\u826f\u597d\u7684\u6027\u8d28\uff1a$m$ \u7684\u9009\u62e9\u662f\u4efb\u610f\u7684\uff0c\u4e0d\u4e00\u5b9a\u662f\u7d20\u6570\u3002 \u2003\u4e0b\u9762\u8bf4\u660e\u7ed3\u8bba\u7684\u6b63\u786e\u6027\u3002 \u2003\u8003\u8651 $Z_p$ \u4e2d\u4efb\u4e24\u4e2a\u4e0d\u540c\u7684\u5173\u952e\u5b57 $k\u3001l$\uff0c\u4ee4 $r=(ak+b)\\mod p$\uff0c$s=(al+b)\\mod p$\uff0c\u4e8e\u662f\u6709 $r-s\\equiv a(k-l) \\mod p$\u3002\u56e0\u4e3a $a< p$\uff0c$k-l< p$\uff0c\u4e14 $p$ \u662f\u7d20\u6570\uff0c\u90a3\u4e48 $r\\ne s$\uff0c\u8fd9\u6837 $k$ \u548c $l$ \u9996\u5148\u88ab\u6620\u5c04\u5230\u4e0d\u540c\u7684\u5b9e\u6570\u4e0a\u3002\u6b64\u5916\uff0c\u6570\u5bf9 $(a,b)$ \u6709 $p(p-1)$ \u4e2d\u53ef\u80fd\u7684\u9009\u62e9\uff0c\u6bcf\u4e00\u79cd\u9009\u62e9\u90fd\u4f1a\u89e3\u51fa\u4e0d\u540c\u7684 $(r,s)(r\\ne s)$(\u539f\u56e0\u7565)\uff0c\u56e0\u6b64 $(a,b)$ \u4e0e $(r,s)$ \u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u6240\u4ee5 $k$ \u548c $l$ \u51b2\u7a81\u7684\u6982\u7387\u5c31\u7b49\u4e8e $r\\equiv s(\\mod m)$ \u7684\u6982\u7387\u3002 \u2003\u5f53\u9009\u5b9a\u4e00\u4e2a $r$\uff0c$s$ \u5c31\u53ea\u80fd\u5728\u5269\u4e0b $p-1$ \u4e2a\u6570\u4e2d\u9009\u62e9\uff0c\u5176\u4e2d\u6ee1\u8db3 $s\\ne r$ \u4e14 $s\\equiv r(\\mod m)$ \u7684\u503c\u7684\u4e2a\u6570\u81f3\u591a\u4e3a\uff1a$\\lceil p/m \\rceil-1\\leq((p+m-1)/m)-1=(p-1)/m$\u3002 \u2003\u5f53\u8fdb\u884c\u6700\u540e\u4e00\u6b65\u6a21 $m$ \u8fd0\u7b97\u65f6\uff0c$s$ \u4e0e $r$ \u51b2\u7a81\u7684\u6982\u7387\u81f3\u591a\u4e3a $((p-1)/m)/(p-1)=1/m$\u3002 \u2003\u56e0\u6b64\uff0c\u5bf9\u4efb\u610f\u4e0d\u540c\u7684 $k,l\\in Z_p$\uff0c\u6709 $P(\\lbrace h_{ab}(k)=h_{ab}(l) \\rbrace)\\leq 1/m$\u3002","title":"(3). \u5168\u57df\u6563\u5217 (universal hashing)"},{"location":"3-DataStructures/3.3/","text":"1. \u4e8c\u53c9\u641c\u7d22\u6811\u53ca\u5176\u6027\u8d28 (1). \u5b9a\u4e49 \u2003\u7531\u4e00\u68f5\u4e8c\u53c9\u6811\u7ec4\u7ec7\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u5305\u542b\u5c5e\u6027 key\u3001left\u3001right\u3001parent \uff1b\u5bf9\u4efb\u4f55\u7ed3\u70b9 x \uff0c\u5176\u5de6\u5b50\u6811\u7684\u5173\u952e\u5b57\u4e0d\u5927\u4e8e x.key \uff0c\u53f3\u5b50\u6811\u7684\u5173\u952e\u5b57\u4e0d\u5c0f\u4e8e x.key \u3002 \u2003\u7ed3\u70b9\u7684\u524d\u9a71 ( predecessor )\u3001\u540e\u7ee7 ( successor )\uff1a\u4e2d\u5e8f\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9\u548c\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002 code: DEF typedef struct node { int key ; struct node * left ; struct node * right ; struct node * parent ; } Node ; typedef struct Tree { Node * root ; } BST ; (2). \u6027\u8d28 \u2460 \u6ee1\u8db3\u4e8c\u53c9\u6811\u7684\u6240\u6709\u6027\u8d28\u3002 \u2461 \u5728 BST \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u90a3\u4e48\u5b83\u7684\u524d\u9a71\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u540e\u7ee7\u6ca1\u6709\u5de6\u5b69\u5b50\u3002 \u2003- \u524d\u9a71\u4e3a\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u5143\uff0c\u5b83\u4e0d\u53ef\u80fd\u518d\u6709\u53f3\u5b69\u5b50\uff0c\u540e\u7ee7\u540c\u7406\u3002 \u2462 \u5728\u6240\u6709\u5173\u952e\u5b57\u4e92\u4e0d\u76f8\u540c\u7684 BST \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9 x \u7684\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5e76\u4e14\u5b83\u5b58\u5728\u4e00\u4e2a\u540e\u7ee7 y \uff0c\u90a3\u4e48 y \u662f { nodes | node \u548c node.left \u90fd\u662f x \u7684\u7956\u5148 } \u4e2d\u7684\u5c42\u6570\u6700\u4f4e\u7684\u5143\u7d20\uff08\u89c4\u5b9a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002 \u2003- \u9996\u5148\uff0c y \u4e00\u5b9a\u662f x \u7684\u7956\u5148\uff1b\u7136\u540e\uff0c y.left \u4e5f\u4e00\u5b9a\u662f x \u7684\u7956\u5148\uff0c\u5426\u5219 x \u4f1a\u51fa\u73b0\u5728 y \u7684\u53f3\u5b50\u6811\u4e2d\uff1b\u6700\u540e\uff0c\u5047\u8bbe y \u4e0d\u662f\u6700\u4f4e\u7684\uff0c\u90a3\u4e48\u6700\u4f4e\u7684\u90a3\u4e2a\u4e00\u5b9a\u51fa\u73b0\u5728 y \u7684\u5de6\u5b50\u6811\u4e2d\u3002 2. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u64cd\u4f5c (1). SEARCH code: SEARCH Node * IterativeBSTSearch ( Node * r , int key ) { while ( r != NULL && r -> key != key ) { if ( r -> key > key ) { r = r -> left ; } else { r = r -> right ; } } return r ; } $O(h)$ (2). MINIMUM\u3001MAXIMUM \u6700\u5de6\u5373\u6700\u5c0f\uff0c\u6700\u53f3\u5373\u6700\u5927\u3002 code: MINIMUM Node * Minimum ( Node * r ) { while ( r -> left != NULL ) { r = r -> left ; } return r ; } code: MAXIMUM Node * Maximum ( Node * r ) { while ( r -> right != NULL ) { r = r -> right ; } return r ; } $O(h)$ (3). PREDECESSOR\u3001SUCCESSOR \u6839\u636e\u7b2c\u4e00\u90e8\u5206\u7684\u7ed3\u8bba\uff0c\u53ef\u4ee5\u628a\u5bfb\u627e\u524d\u9a71\u6216\u540e\u7ee7\u7684\u8fc7\u7a0b\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\u3002\u524d\u9a71\u548c\u540e\u7ee7\u7684\u8fc7\u7a0b\u662f\u5bf9\u79f0\u7684\u3002 code: PREDECESSOR Node * Predecessor ( Node * node ) { if ( node -> left != NULL ) { return Maximum ( node -> left ); } Node * t = node -> parent ; while ( t != NULL && t -> left == node ) { node = t ; t = t -> parent ; } return t ; // NULL: no pred } code: SUCCESSOR Node * Successor ( Node * node ) { if ( node -> right != NULL ) { return Minimum ( node -> right ); } Node * t = node -> parent ; while ( t != NULL && t -> right == node ) { node = t ; t = t -> parent ; } return t ; } $O(h)$ (4). INSERT \u5bf9\u4efb\u4e00\u4e2a\u5173\u952e\u5b57\uff0c BST \u5b58\u5728\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u5bf9\u5e94\u5b83\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 code: INSERT void Insert ( BST * tree , Node * iNode ) { Node * r = tree -> root ; int key = iNode -> key ; Node * last = NULL ; while ( r != NULL ) { last = r ; if ( key < r -> key ) { r = r -> left ; } else { r = r -> right ; } } iNode -> parent = last ; if ( last == NULL ) { tree -> root = iNode ; } else if ( key < last -> key ) { last -> left = iNode ; } else { last -> right = iNode ; } } $O(h)$ (5). DELETE \u2003\u8bbe\u8981\u5220\u9664\u7684\u7ed3\u70b9\u4e3a z \uff0c\u5176\u540e\u7ee7\u4e3a y \u3002\u5220\u9664\u603b\u4f53\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff0c\u7279\u6b8a\u60c5\u51b5\u662f\u5f53 z \u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u8fd9\u65f6\u9009\u53d6\u5b83\u7684\u540e\u7ee7 y \u66ff\u6362\u5b83\uff0c\u56e0\u4e3a y \u4e00\u5b9a\u6ca1\u6709\u5de6\u5b50\u6811\u3002\u66f4\u8be6\u7ec6\u7684\u8fc7\u7a0b\u4e3a\uff1a \u5982\u679c z \u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u90a3\u4e48\u7528\u5b83\u7684\u53f3\u5b69\u5b50\u66ff\u6362\u5b83\u3002 \u5982\u679c z \u6709\u5de6\u5b69\u5b50\u4e14\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u66ff\u6362\u5b83\u3002 \u5982\u679c z \u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u9700\u8981\u5c06 y \u79fb\u51fa\u5e76\u62fc\u63a5\uff1a \u5982\u679c y \u662f z \u7684\u53f3\u5b69\u5b50\uff0c\u7528 y \u66ff\u6362 z \uff08\u5e76\u628a z \u7684\u5de6\u5b50\u6811\u8f6c\u63a5\u5230 y \u4e0a\uff09\u3002 \u5426\u5219\uff0c\u5148\u7528 y \u7684\u53f3\u5b69\u5b50\u66ff\u6362 y \uff0c\u7136\u540e\u518d\u7528 y \u66ff\u6362 z \uff08\u5e76\u628a z \u7684\u5de6\u53f3\u5b50\u6811\u90fd\u8f6c\u63a5\u5230 y \u4e0a\uff09\u3002 \u2003\u63d0\u53d6\u4e00\u4e2a\u5b50\u8fc7\u7a0b TRANSPLANT \uff1a\u7528\u4e00\u68f5\u5b50\u6811\u66ff\u6362\u53e6\u5916\u4e00\u68f5\u5b50\u6811\u3002 code: TRANSPLANT void Transplant ( BST * tree , Node * des , Node * src ) { if ( des -> parent == NULL ) { tree -> root = src ; } else if ( des -> parent -> left == des ) { des -> parent -> left = src ; } else { des -> parent -> right = src ; } if ( src != NULL ) { src -> parent = des -> parent ; } } code: DELETE void Delete ( BST * tree , Node * z ) { if ( z -> left == NULL ) { Transplant ( tree , z , z -> right ); } else if ( z -> right == NULL ) { Transplant ( tree , z , z -> left ); } else { Node * y = Minimum ( z -> right ); // succ if ( y != z -> right ) { Transplant ( tree , y , y -> right ); y -> right = z -> right ; y -> right -> parent = y ; } Transplant ( tree , z , y ); y -> left = z -> left ; y -> left -> parent = y ; } } $O(h)$","title":"3.Binary search trees"},{"location":"3-DataStructures/3.3/#1","text":"","title":"1. \u4e8c\u53c9\u641c\u7d22\u6811\u53ca\u5176\u6027\u8d28"},{"location":"3-DataStructures/3.3/#1_1","text":"\u7531\u4e00\u68f5\u4e8c\u53c9\u6811\u7ec4\u7ec7\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u5305\u542b\u5c5e\u6027 key\u3001left\u3001right\u3001parent \uff1b\u5bf9\u4efb\u4f55\u7ed3\u70b9 x \uff0c\u5176\u5de6\u5b50\u6811\u7684\u5173\u952e\u5b57\u4e0d\u5927\u4e8e x.key \uff0c\u53f3\u5b50\u6811\u7684\u5173\u952e\u5b57\u4e0d\u5c0f\u4e8e x.key \u3002 \u2003\u7ed3\u70b9\u7684\u524d\u9a71 ( predecessor )\u3001\u540e\u7ee7 ( successor )\uff1a\u4e2d\u5e8f\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9\u548c\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002 code: DEF typedef struct node { int key ; struct node * left ; struct node * right ; struct node * parent ; } Node ; typedef struct Tree { Node * root ; } BST ;","title":"(1). \u5b9a\u4e49"},{"location":"3-DataStructures/3.3/#2","text":"\u2460 \u6ee1\u8db3\u4e8c\u53c9\u6811\u7684\u6240\u6709\u6027\u8d28\u3002 \u2461 \u5728 BST \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u90a3\u4e48\u5b83\u7684\u524d\u9a71\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u540e\u7ee7\u6ca1\u6709\u5de6\u5b69\u5b50\u3002 \u2003- \u524d\u9a71\u4e3a\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u5143\uff0c\u5b83\u4e0d\u53ef\u80fd\u518d\u6709\u53f3\u5b69\u5b50\uff0c\u540e\u7ee7\u540c\u7406\u3002 \u2462 \u5728\u6240\u6709\u5173\u952e\u5b57\u4e92\u4e0d\u76f8\u540c\u7684 BST \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9 x \u7684\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5e76\u4e14\u5b83\u5b58\u5728\u4e00\u4e2a\u540e\u7ee7 y \uff0c\u90a3\u4e48 y \u662f { nodes | node \u548c node.left \u90fd\u662f x \u7684\u7956\u5148 } \u4e2d\u7684\u5c42\u6570\u6700\u4f4e\u7684\u5143\u7d20\uff08\u89c4\u5b9a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002 \u2003- \u9996\u5148\uff0c y \u4e00\u5b9a\u662f x \u7684\u7956\u5148\uff1b\u7136\u540e\uff0c y.left \u4e5f\u4e00\u5b9a\u662f x \u7684\u7956\u5148\uff0c\u5426\u5219 x \u4f1a\u51fa\u73b0\u5728 y \u7684\u53f3\u5b50\u6811\u4e2d\uff1b\u6700\u540e\uff0c\u5047\u8bbe y \u4e0d\u662f\u6700\u4f4e\u7684\uff0c\u90a3\u4e48\u6700\u4f4e\u7684\u90a3\u4e2a\u4e00\u5b9a\u51fa\u73b0\u5728 y \u7684\u5de6\u5b50\u6811\u4e2d\u3002","title":"(2). \u6027\u8d28"},{"location":"3-DataStructures/3.3/#2_1","text":"","title":"2. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u64cd\u4f5c"},{"location":"3-DataStructures/3.3/#1-search","text":"code: SEARCH Node * IterativeBSTSearch ( Node * r , int key ) { while ( r != NULL && r -> key != key ) { if ( r -> key > key ) { r = r -> left ; } else { r = r -> right ; } } return r ; } $O(h)$","title":"(1).  SEARCH"},{"location":"3-DataStructures/3.3/#2-minimummaximum","text":"\u6700\u5de6\u5373\u6700\u5c0f\uff0c\u6700\u53f3\u5373\u6700\u5927\u3002 code: MINIMUM Node * Minimum ( Node * r ) { while ( r -> left != NULL ) { r = r -> left ; } return r ; } code: MAXIMUM Node * Maximum ( Node * r ) { while ( r -> right != NULL ) { r = r -> right ; } return r ; } $O(h)$","title":"(2). MINIMUM\u3001MAXIMUM"},{"location":"3-DataStructures/3.3/#3-predecessorsuccessor","text":"\u6839\u636e\u7b2c\u4e00\u90e8\u5206\u7684\u7ed3\u8bba\uff0c\u53ef\u4ee5\u628a\u5bfb\u627e\u524d\u9a71\u6216\u540e\u7ee7\u7684\u8fc7\u7a0b\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\u3002\u524d\u9a71\u548c\u540e\u7ee7\u7684\u8fc7\u7a0b\u662f\u5bf9\u79f0\u7684\u3002 code: PREDECESSOR Node * Predecessor ( Node * node ) { if ( node -> left != NULL ) { return Maximum ( node -> left ); } Node * t = node -> parent ; while ( t != NULL && t -> left == node ) { node = t ; t = t -> parent ; } return t ; // NULL: no pred } code: SUCCESSOR Node * Successor ( Node * node ) { if ( node -> right != NULL ) { return Minimum ( node -> right ); } Node * t = node -> parent ; while ( t != NULL && t -> right == node ) { node = t ; t = t -> parent ; } return t ; } $O(h)$","title":"(3). PREDECESSOR\u3001SUCCESSOR"},{"location":"3-DataStructures/3.3/#4-insert","text":"\u5bf9\u4efb\u4e00\u4e2a\u5173\u952e\u5b57\uff0c BST \u5b58\u5728\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u5bf9\u5e94\u5b83\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 code: INSERT void Insert ( BST * tree , Node * iNode ) { Node * r = tree -> root ; int key = iNode -> key ; Node * last = NULL ; while ( r != NULL ) { last = r ; if ( key < r -> key ) { r = r -> left ; } else { r = r -> right ; } } iNode -> parent = last ; if ( last == NULL ) { tree -> root = iNode ; } else if ( key < last -> key ) { last -> left = iNode ; } else { last -> right = iNode ; } } $O(h)$","title":"(4). INSERT"},{"location":"3-DataStructures/3.3/#5-delete","text":"\u8bbe\u8981\u5220\u9664\u7684\u7ed3\u70b9\u4e3a z \uff0c\u5176\u540e\u7ee7\u4e3a y \u3002\u5220\u9664\u603b\u4f53\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff0c\u7279\u6b8a\u60c5\u51b5\u662f\u5f53 z \u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u8fd9\u65f6\u9009\u53d6\u5b83\u7684\u540e\u7ee7 y \u66ff\u6362\u5b83\uff0c\u56e0\u4e3a y \u4e00\u5b9a\u6ca1\u6709\u5de6\u5b50\u6811\u3002\u66f4\u8be6\u7ec6\u7684\u8fc7\u7a0b\u4e3a\uff1a \u5982\u679c z \u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u90a3\u4e48\u7528\u5b83\u7684\u53f3\u5b69\u5b50\u66ff\u6362\u5b83\u3002 \u5982\u679c z \u6709\u5de6\u5b69\u5b50\u4e14\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u66ff\u6362\u5b83\u3002 \u5982\u679c z \u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u9700\u8981\u5c06 y \u79fb\u51fa\u5e76\u62fc\u63a5\uff1a \u5982\u679c y \u662f z \u7684\u53f3\u5b69\u5b50\uff0c\u7528 y \u66ff\u6362 z \uff08\u5e76\u628a z \u7684\u5de6\u5b50\u6811\u8f6c\u63a5\u5230 y \u4e0a\uff09\u3002 \u5426\u5219\uff0c\u5148\u7528 y \u7684\u53f3\u5b69\u5b50\u66ff\u6362 y \uff0c\u7136\u540e\u518d\u7528 y \u66ff\u6362 z \uff08\u5e76\u628a z \u7684\u5de6\u53f3\u5b50\u6811\u90fd\u8f6c\u63a5\u5230 y \u4e0a\uff09\u3002 \u2003\u63d0\u53d6\u4e00\u4e2a\u5b50\u8fc7\u7a0b TRANSPLANT \uff1a\u7528\u4e00\u68f5\u5b50\u6811\u66ff\u6362\u53e6\u5916\u4e00\u68f5\u5b50\u6811\u3002 code: TRANSPLANT void Transplant ( BST * tree , Node * des , Node * src ) { if ( des -> parent == NULL ) { tree -> root = src ; } else if ( des -> parent -> left == des ) { des -> parent -> left = src ; } else { des -> parent -> right = src ; } if ( src != NULL ) { src -> parent = des -> parent ; } } code: DELETE void Delete ( BST * tree , Node * z ) { if ( z -> left == NULL ) { Transplant ( tree , z , z -> right ); } else if ( z -> right == NULL ) { Transplant ( tree , z , z -> left ); } else { Node * y = Minimum ( z -> right ); // succ if ( y != z -> right ) { Transplant ( tree , y , y -> right ); y -> right = z -> right ; y -> right -> parent = y ; } Transplant ( tree , z , y ); y -> left = z -> left ; y -> left -> parent = y ; } } $O(h)$","title":"(5). DELETE"},{"location":"3-DataStructures/3.4/","text":"1. \u7ea2\u9ed1\u6811\u53ca\u5176\u6027\u8d28 (1). \u5b9a\u4e49 \u2003\u4e00\u68f5\u7ea2\u9ed1\u6811\u662f\u6ee1\u8db3\u4e0b\u5217 \u7ea2\u9ed1\u6027\u8d28 ( red-black properties ) \u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a \u20031. \u6bcf\u4e2a\u7ed3\u70b9\u6216\u4e3a\u7ea2\u8272\uff0c\u6216\u4e3a\u9ed1\u8272\u3002 \u20032. \u6839\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\u3002 \u20033. \u5916\u90e8\u7ed3\u70b9 NIL \u662f\u9ed1\u8272\u7684\u3002 \u20034. \u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\u3002 \u20035. \u5bf9\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u6240\u6709\u540e\u4ee3\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5747\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u7ed3\u70b9\u3002 \u2003\u7a7a\u7ed3\u70b9\u89c6\u4e3a\u5916\u90e8\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\uff09\uff0c\u5e76\u4e14\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u8fb9\u754c\u6761\u4ef6\uff0c\u6240\u6709\u7684\u7a7a\u7ed3\u70b9\u90fd\u7531\u54e8\u5175\u7ed3\u70b9 NIL \u4ee3\u66ff\u3002 \u2003\u4ece\u67d0\u4e2a\u7ed3\u70b9 x \u51fa\u53d1\uff08 \u4e0d\u542b\u8be5\u7ed3\u70b9\uff0c\u4f46\u5305\u62ec\u7a7a\u7ed3\u70b9 \uff09\uff0c\u5230\u8fbe\u4e00\u4e2a \u5916\u90e8\u7ed3\u70b9 \u7684\u4efb\u4e00\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u6570\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684 \u9ed1\u9ad8\u5ea6 ( black-height )\uff0c\u8bb0\u4e3a $bh(x)$\u3002 \u2003\u4e00\u68f5\u7ea2\u9ed1\u6811\u7684\u9ed1\u9ad8\u5ea6\u4e3a\u5176\u6839\u7ed3\u70b9\u7684\u9ed1\u9ad8\u5ea6\u3002 code: DEF typedef struct node { int key ; struct node * left ; struct node * right ; struct node * parent ; Color color ; } Node ; typedef struct tree { Node * root ; Node * nil ; } RBTree ; (2). \u5176\u4ed6\u6027\u8d28 \u2460 \u5728\u4e00\u68f5\u4ee5 $x$ \u4e3a\u6839\u7684(\u5b50)\u6811\u4e2d\uff0c\u8bbe\u5185\u90e8\u7ed3\u70b9\u6570\u4e3a $n$\uff0c\u5219 $2^{bh(x)}-1\\leq n \\leq 2^{2\u00d7bh(x)}-1$\u3002 \u2003- \u9ed1\u9ad8\u5ea6\u4e0e\u7ed3\u70b9\u6570\u91cf\u7684\u5173\u7cfb\uff0c\u6700\u5c11\uff1a\u5168\u662f\u9ed1\u7ed3\u70b9\uff1b\u6700\u591a\uff1a\u4efb\u4e00\u8def\u5f84\u4e0a\u7ea2\u9ed1\u4ea4\u66ff\u3002 \u2461 \u4ece\u6839\u7ed3\u70b9\u5230\u5916\u90e8\u7ed3\u70b9\u7684\u4efb\u4e00\u6761\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u81f3\u5c11\u6709\u4e00\u534a\u7684\u7ed3\u70b9\u4e3a\u9ed1\u8272\u3002 \u2003- \u9ed1\u9ad8\u5ea6\u4e0e\u6811\u9ad8\u5ea6\u7684\u5173\u7cfb\uff0c$h/2\\leq bh \\leq h$\uff0c\u7531\u7ea2\u9ed1\u6027\u8d28 4 \u53ef\u5f97\u3002 \u2462 \u4ece\u67d0\u7ed3\u70b9 $x$ \u5230\u5176\u540e\u4ee3\u5916\u90e8\u7ed3\u70b9\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e2d\uff0c\u6700\u957f\u7684\u4e00\u6761\u7684\u957f\u5ea6\u81f3\u591a\u662f\u6700\u77ed\u7684\u4e00\u6761\u7684 2 \u500d\u3002 \u2003- \u7531 \u2461 \u548c\u7ea2\u9ed1\u6027\u8d28 5 \u53ef\u5f97\u3002 \u2463 \u4e00\u68f5\u6709 $n$ \u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u9ad8\u5ea6\u81f3\u591a\u4e3a $2$\u00b7$lg(n+1)$\u3002 \u2003- \u8bbe\u6811\u9ad8\u4e3a $h$\uff0c\u7531 \u2461\uff0c\u9ed1\u9ad8\u5ea6\u81f3\u5c11\u4e3a $h/2$\uff0c\u5219\u6709 $n \\geq 2^{h/2}-1$\u3002\u4e24\u8fb9\u53d6\u5bf9\u6570\u5f97 $h\\leq 2$\u00b7$lg(n+1)$\u3002 2. \u7ea2\u9ed1\u6811\u7684\u64cd\u4f5c (1). ROTATION \u2003\u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u6811\u7684\u7ea2\u9ed1\u6027\u8d28\uff0c\u6b64\u65f6\u901a\u8fc7\u4fee\u6539\u7ed3\u70b9\u989c\u8272\u548c\u4fee\u6539\u6811\u7684\u6307\u9488\u7ed3\u6784\u7ef4\u62a4\u8fd9\u4e9b\u6027\u8d28\uff0c\u800c\u4fee\u6539\u6307\u9488\u7ed3\u6784\u901a\u8fc7\u65cb\u8f6c\u5b8c\u6210\u3002 LEFT-ROTATE : \u5047\u8bbe x.right \u4e0d\u4e3a\u7a7a\u3002 code: LEFT-ROTATE void LeftRotate ( RBTree * tree , Node * x ) { Node * y = x -> right ; // step 1. turn y's left subtree x -> right = y -> left ; if ( y -> left != tree -> nil ) { y -> left -> parent = x ; } // step 2. link x's parent to y y -> parent = x -> parent ; if ( x -> parent == tree -> nil ) { tree -> root = y ; } else if ( x == x -> parent -> left ) { x -> parent -> left = y ; } else { x -> parent -> right = y ; } // step 3. link x and y x -> parent = y ; y -> left = x ; } RIGHT-ROTATE : \u548c\u5de6\u65cb\u5bf9\u79f0\u3002 code: RIGHT-ROTATE void RightRotate ( RBTree * tree , Node * y ) { Node * x = y -> left ; y -> left = x -> right ; if ( x -> right != tree -> nil ) { x -> right -> parent = y ; } x -> parent = y -> parent ; if ( y -> parent == tree -> nil ) { tree -> root = x ; } else if ( y == y -> parent -> left ) { y -> parent -> left = x ; } else { y -> parent -> right = x ; } y -> parent = x ; x -> right = y ; } (2). INSERT \u2003\u8c03\u7528 BST \u7684\u63d2\u5165\u8fc7\u7a0b\u63d2\u5165\u7ed3\u70b9 z \uff0c\u4e3a\u5c3d\u91cf\u4fdd\u6301\u6811\u7ed3\u6784\u7684\u5408\u7406\u6027\uff0c\u4ee4 z \u7684\u5de6\u53f3\u5b69\u5b50\u6307\u5411 nil \uff0c\u5e76\u7f6e\u5176\u4e3a\u7ea2\u8272\u3002\u8fd9\u6b65\u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u7ea2\u9ed1\u6027\u8d28 2 \u548c 4 \u5176\u4e2d\u7684\u4e00\u4e2a\u88ab\u7834\u574f\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5f53 z \u7684\u7236\u7ed3\u70b9\u4e3a\u7ea2\u8272\u65f6\u7ea2\u9ed1\u6027\u8d28 4 \u4f1a\u88ab\u7834\u574f\u3002 \u2003\u56e0\u6b64\uff0c\u95ee\u9898\u88ab\u8f6c\u5316\u4e3a\uff1a z \u3001 z.parent \u7684\u989c\u8272\u5df2\u77e5\uff0c\u6839\u636e z \u7684\u7237\u7237\u7ed3\u70b9\u548c\u53d4\u53d4\u7ed3\u70b9\u7684\u60c5\u51b5\u7684\u4e0d\u540c\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\u5982\u4f55\u8c03\u6574\u6811\u7ed3\u6784\u3002 \u2460 z \u7684\u53d4\u7ed3\u70b9 u \u4e3a\u7ea2\u8272 \u2003\u6b64\u65f6 z \u3001 z.parent \u3001 u \u4e3a\u7ea2\u8272\uff0c z.parent.parent \u4e3a\u9ed1\u8272\u3002\u628a z.parent \u3001 u \u7740\u4e3a\u9ed1\u8272\uff0c\u628a z.parent.parent \u7740\u4e3a\u7ea2\u8272\uff0c\u7136\u540e\u4ee4\u77db\u76fe\u8282\u70b9 z = z.parent.parent \uff0c\u91cd\u590d\u8c03\u6574\u6811\u7ed3\u6784\u7684\u8fed\u4ee3\u8fc7\u7a0b\u3002 \u2461 z \u7684\u53d4\u7ed3\u70b9 u \u4e3a\u9ed1\u8272\uff0c z \u3001 z.parent \u3001 z.parent.parent \u5171\u7ebf \u2003\u4ee5 z.parent \u662f\u5de6\u5b69\u5b50\u4e3a\u4f8b\uff0c\u6b64\u65f6 z \u3001 z.parent \u4e3a\u7ea2\u8272\uff0c u \u3001 z.parent.parent \u4e3a\u9ed1\u8272\u3002\u628a z.parent \u7740\u4e3a\u9ed1\u8272\uff0c z.parent.parent \u7740\u4e3a\u7ea2\u8272\uff0c\u7136\u540e\u8c03\u7528\u4e00\u6b21\u53f3\u65cb RIGHT-ROTATE(T, z.p.p) \uff0c\u4fdd\u6301\u4e86\u7ea2\u9ed1\u6811\u6027\u8d28\u3002 \u2462 z \u7684\u53d4\u7ed3\u70b9 u \u4e3a\u9ed1\u8272\uff0c\u4e14\u4e0d\u5171\u7ebf \u2003\u4ee5 z.parent \u662f\u5de6\u5b69\u5b50\u4e3a\u4f8b\uff0c\u6b64\u65f6 z \u662f z.parent \u7684\u53f3\u5b69\u5b50\u3002\u4ee4 z \u4e0a\u79fb\u5230 z.parent \uff0c\u7136\u540e\u5bf9 _z \u8c03\u7528\u5de6\u65cb\u64cd\u4f5c\uff0c\u65e0\u9700\u4fee\u6539\u4efb\u610f\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u7136\u540e\u6309\u60c5\u51b5 \u2461 \u5904\u7406\u3002 \u2003\u6700\u540e\uff0c\u4fee\u6539\u6839\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u786e\u4fdd\u7ea2\u9ed1\u6027\u8d28 2 \u4e0d\u88ab\u7834\u574f\u3002 code: INSERT void Insert ( RBTree * tree , Node * z ) { Node * root = tree -> root ; Node * last = tree -> nil ; int key = z -> key ; while ( root != tree -> nil ) { last = root ; if ( root -> key > key ) { root = root -> left ; } else { root = root -> right ; } } z -> parent = last ; if ( last == tree -> nil ) { tree -> root = z ; } else if ( last -> key > key ) { last -> left = z ; } else { last -> right = z ; } z -> left = z -> right = tree -> nil ; z -> color = RED ; InsertFixup ( tree , z ); } code: INSERT-FIXUP void InsertFixup ( RBTree * tree , Node * z ) { while ( z -> parent -> color == RED ) { if ( z -> parent == z -> parent -> parent -> left ) { Node * uncle = z -> parent -> parent -> right ; if ( uncle -> color == RED ) { z -> parent -> color = BLACK ; uncle -> color = BLACK ; z -> parent -> parent -> color = RED ; z = z -> parent -> parent ; } else { if ( z == z -> parent -> right ) { z = z -> parent ; LeftRotate ( tree , z ); } z -> parent -> color = BLACK ; z -> parent -> parent -> color = RED ; RightRotate ( tree , z -> parent -> parent ); } } else { Node * uncle = z -> parent -> parent -> left ; if ( uncle -> color == RED ) { z -> parent -> color = BLACK ; uncle -> color = BLACK ; z -> parent -> parent -> color = RED ; z = z -> parent -> parent ; } else { if ( z == z -> parent -> left ) { z = z -> parent ; RightRotate ( tree , z ); } z -> parent -> color = BLACK ; z -> parent -> parent -> color = RED ; LeftRotate ( tree , z -> parent -> parent ); } } } tree -> root -> color = BLACK ; } main points \u63d2\u5165\u7ed3\u70b9\u5047\u8bbe \u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u60c5\u51b5 \u4ee5 z.p \u7684\u989c\u8272\u4e3a\u8fed\u4ee3\u6761\u4ef6, \u4ee5 z.p.p.l/r \u4e3a\u5bf9\u79f0\u6761\u4ef6 \u6839\u636e u \u662f\u5426\u4e3a\u7ea2\u8272\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5 1, 2.1, 2.2 \u4fee\u6b63\u6839\u7684\u989c\u8272\uff0c\u4fdd\u8bc1 case1 \u7684\u6b63\u786e\u6027 \u2003\u56e0\u4e3a\u6811\u9ad8 $O(lgn)$\uff0c\u6240\u4ee5\u8fc7\u7a0b INSERT \u63d2\u5165\u5143\u7d20\u7684\u90e8\u5206\u9700\u8981 $O(lgn)$ \u65f6\u95f4\uff1b\u5728\u8fc7\u7a0b INSERT-FIXUP \u4e2d\uff0c\u5f53\u4e14\u4ec5\u5f53\u60c5\u51b5 \u2460 \u53d1\u751f\uff0c while \u5faa\u73af\u624d\u4f1a\u91cd\u590d\u8fdb\u884c\uff0c\u53ef\u80fd\u6267\u884c\u7684\u603b\u6b21\u6570\u4e3a $O(lgn)$\uff1b\u56e0\u6b64\uff0c\u603b\u5171\u9700\u8981\u65f6\u95f4\u4e3a $O(lgn)$\u3002 \u2003\u6b64\u5916\uff0c\u8be5\u7a0b\u5e8f\u6240\u505a\u7684\u65cb\u8f6c\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7 2\u3002 (3). DELETE \u2003\u7c7b\u4f3c\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u5148\u8c03\u7528 BST \u7684\u5220\u9664\u8fc7\u7a0b\uff0c\u518d\u5206\u60c5\u51b5\u8ba8\u8bba\u5982\u4f55\u8c03\u6574\u6811\u7684\u7ed3\u6784\u3002\u7531\u4e8e\u5728\u5b50\u6811\u66ff\u6362\u7684\u8fc7\u7a0b\u53ef\u80fd\u7834\u574f\u7ea2\u9ed1\u6027\u8d28\uff0c\u6b64\u5904\u7684\u5220\u9664\u64cd\u4f5c\u548c BST \u7684\u5220\u9664\u7565\u6709\u4e0d\u540c\u3002 \u53d8\u91cf y : \u88ab\u5220\u9664 (\u4ee3\u66ff) \u6216\u79fb\u52a8\u4e14\u5bfc\u81f4\u4e86\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u7ed3\u70b9\uff0c\u9700\u8981\u6839\u636e\u5b83\u7684\u989c\u8272\u5224\u65ad\u7ea2\u9ed1\u6811\u662f\u5426\u9700\u8981\u8c03\u6574 case 1, 2: y \u5373\u662f\u88ab\u5220\u9664\u7684\u8282\u70b9 z case 3:\u2003 y \u662f z \u5728\u53f3\u5b50\u6811\u4e2d\u7684\u540e\u7ee7\uff0c\u88ab\u79fb\u52a8\u5230 z \u7684\u4f4d\u7f6e\u5e76\u4fdd\u7559 z \u7684\u989c\u8272\uff1b y \u7684\u53f3\u5b69\u5b50\u66ff\u6362 y \u65f6\u53ef\u80fd\u5bfc\u81f4\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u3002 \u53d8\u91cf x : \u7528\u4e8e\u66ff\u6362 y \u7684\u7ed3\u70b9\uff0c\u9700\u8981\u6839\u636e\u5b83\u7684\u989c\u8272\u5224\u65ad\u7ea2\u9ed1\u6811\u5982\u4f55\u8fdb\u884c\u8c03\u6574 case 1, 2: \u662f\u7a7a\u7ed3\u70b9\u6216 y \u7684\u5de6\u5b69\u5b50\u6216\u53f3\u5b69\u5b50 case 3: \u2003\u662f y \u7684\u53f3\u5b69\u5b50\uff0c\u6216\u4e00\u4e2a\u7a7a\u7ed3\u70b9 code: DELETE void Delete ( RBTree * tree , Node * z ) { Node * y = z ; Node * x ; Color yOrgColor = y -> color ; if ( z -> left == tree -> nil ) { x = z -> right ; Transplant ( tree , z , z -> right ); } else if ( z -> right == tree -> nil ) { x = z -> left ; Transplant ( tree , z , z -> left ); } else { y = Minimum ( tree , z -> right ); yOrgColor = y -> color ; x = y -> right ; if ( y -> parent == z ) { x -> parent = y ; // if z->right links to y directly and y->right links // to nil (i.e. x = nil), let nil->parent link to y } else { Transplant ( tree , y , y -> right ); y -> right = z -> right ; z -> right -> parent = y ; } Transplant ( tree , z , y ); y -> left = z -> left ; z -> left -> parent = y ; y -> color = z -> color ; // shift color } if ( yOrgColor == BLACK ) { DeleteFixup ( tree , x ); } } \u2003\u6700\u540e\uff0c\u4f9d\u636e y \u7684\u989c\u8272 y-original-color \u5224\u65ad\u662f\u5426\u8c03\u6574\u6811\u7684\u7ed3\u6784\u3002\u5982\u679c\u662f\u7ea2\u8272\uff0c\u90a3\u4e48 y \u4e0d\u53ef\u80fd\u662f\u6839\uff0c\u4e14 x \u4e00\u5b9a\u662f\u9ed1\u8272\uff0c\u6240\u4ee5\u4efb\u4f55\u7ea2\u9ed1\u6027\u8d28\u90fd\u4e0d\u4f1a\u88ab\u7834\u574f\uff1b\u5982\u679c\u662f\u9ed1\u8272\uff0c(\u53ef\u80fd)\u4f1a\u53d1\u751f (a). \u5982\u679c y \u662f\u6839\uff0c\u5b83\u7684\u7ea2\u5b69\u5b50 x \u6210\u4e3a\u65b0\u6839\uff0c\u5219\u7834\u574f\u4e86\u7ea2\u9ed1\u6027\u8d28 2\uff1b (b). \u5982\u679c\u5728 y \u88ab\u5220\u9664\u6216\u79fb\u52a8\u540e\uff0c x \u548c x.parent \u90fd\u662f\u7ea2\u8272\uff0c\u5219\u7834\u574f\u4e86\u7ea2\u9ed1\u6027\u8d28 4\uff1b (c). \u5148\u524d\u4efb\u4f55\u5305\u542b y \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u6570\u90fd\u5c11\u4e00. \u89e3\u51b3\u7684\u601d\u8def\u662f\uff0c\u628a y \u7684\u9ed1\u8272\u7559\u7ed9 x \uff0c\u89c6 x \u662f\u4e00\u4e2a\u5177\u6709\u53cc\u91cd\u989c\u8272\u7684\u7ed3\u70b9\u3002 \u82e5 x \u662f\u4e00\u4e2a\u7ea2\u9ed1\u8272\u7ed3\u70b9\uff0c\u5373 x \u539f\u672c\u662f\u7ea2\u8272\uff0c\u6839\u636e\u4e0a\u9762\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u4e09\u79cd\u60c5\u51b5\u6765\u770b\uff0c\u53ea\u9700\u8981\u628a\u5b83\u7f6e\u4e3a\u9ed1\u8272\u5373\u53ef\uff1b \u82e5 x \u662f\u4e00\u4e2a\u53cc\u91cd\u9ed1\u8272\u7684\u7ed3\u70b9\uff0c\u8bbe w \u662f\u5b83\u7684\u5144\u5f1f\u7ed3\u70b9\uff0c\u7136\u540e\u5206\u56db\u79cd\u60c5\u51b5\u8ba8\u8bba\u5982\u4f55\u5904\u7406\u3002 \u2460 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u662f\u7ea2\u8272\u7684 \u2003 w \u7684\u4e24\u4e2a\u5b69\u5b50\u548c x.parent \u662f\u9ed1\u8272\u7684\u3002\u5148\u6539\u53d8 w \u548c x.parent \u7684\u989c\u8272\uff0c\u7136\u540e\u5bf9 x.parent \u505a\u5de6\u65cb\u64cd\u4f5c\uff0c w \u7684\u5de6\u5b69\u5b50\u6210\u4e3a new w \u3002\u6b64\u65f6\uff0c x \u5177\u6709\u53cc\u91cd\u9ed1\u8272\uff0c new w \u4e3a\u9ed1\u8272\uff0c\u8fdb\u5165\u60c5\u51b5 \u2461\u3001\u2462\u3001\u2463 \u7684\u8ba8\u8bba\u8303\u56f4\u3002 \u2003\u5bf9\u4e8e\u5b50\u6811 $\\varepsilon$\u3001$\\xi$\uff0c\u4ea4\u6362\u989c\u8272\u4fdd\u8bc1\u4e86\u7ea2\u9ed1\u6027\u8d28 5\u3002 \u2461 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u4e3a\u9ed1\u8272\uff0c\u4e14 w \u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u90fd\u662f\u9ed1\u8272\u7684 \u2003 x \u3001 w \u548c w \u7684\u4e24\u4e2a\u5b69\u5b50\u5747\u4e3a\u9ed1\u8272\u7684\uff0c x.parent \u989c\u8272\u672a\u77e5\u3002\u4ece x \u548c w \u4e0a\u53bb\u6389\u4e00\u91cd\u9ed1\u8272\uff0c\u4f7f\u5f97 x \u53ea\u5269\u4e00\u91cd\u9ed1\u8272\u3001 w \u53d8\u4e3a\u7ea2\u8272\uff0c\u5e76\u628a\u8fd9\u91cd\u9ed1\u8272\u8865\u507f\u5230 x.parent \u4e0a\uff0c\u5e76\u4ee4 x.parent = new x \uff0c\u91cd\u590d\u8fed\u4ee3\u8fc7\u7a0b\u3002 \u2003\u5982\u679c\u60c5\u51b5 \u2461 \u662f\u901a\u8fc7\u60c5\u51b5 \u2460 \u8fdb\u5165\u7684\uff0c\u90a3\u4e48 new x \u4e3a\u7ea2\u9ed1\u8272\uff0c\u5728\u4ee3\u7801\u7684\u6700\u540e\u90e8\u5206\u76f4\u63a5\u7f6e\u9ed1\uff0c\u5b8c\u6210\u6811\u7ed3\u6784\u7684\u8c03\u6574\u3002 \u2462 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u662f\u9ed1\u8272\u7684\uff0c\u4e14 w \u7684\u5de6\u5b69\u5b50\u4e3a\u7ea2\u8272\uff0c\u53f3\u5b69\u5b50\u4e3a\u9ed1\u8272 \u2003 x.p \u989c\u8272\u672a\u77e5\u3002\u6539\u53d8\uff08\u4ea4\u6362\uff09 w \u548c w.left \u7684\u989c\u8272\uff0c\u7136\u540e\u5bf9 w \u505a\u53f3\u65cb\u64cd\u4f5c\u3002\u6b64\u65f6\uff0c new w \u4e3a\u9ed1\u8272\uff0c\u4e14 w \u7684\u53f3\u5b69\u5b50\u662f\u7ea2\u8272\u7684\uff0c\u8fdb\u5165\u60c5\u51b5 \u2463 \u5904\u7406\u3002 \u2463 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u4e3a\u9ed1\u8272\uff0c\u4e14 w \u7684\u53f3\u5b69\u5b50\u4e3a\u7ea2\u8272 \u2003 x.p \u989c\u8272\u672a\u77e5\u3002\u56e0\u4e3a w \u4f1a\u6210\u4e3a\u5b50\u6811\u7684\u65b0\u6839\uff0c\u4ee4 w.color = x.p.color \uff0c\u7136\u540e\u6539\u53d8 w.right \u7684\u989c\u8272\uff0c\u5e76\u7f6e x.p \u4e3a\u9ed1\u8272\uff0c\u518d\u5bf9 x.p \u505a\u5de6\u65cb\u64cd\u4f5c\uff0c\u53bb\u6389\u4e86 x \u4e0a\u989d\u5916\u7684\u4e00\u91cd\u9ed1\u8272\uff0c\u5e76\u4fdd\u6301\u7ea2\u9ed1\u6027\u8d28\u4e0d\u53d8\u3002\u6700\u540e\u9000\u51fa\u5faa\u73af\u3002 \u2003\u5728\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u51e0\u79cd\u60c5\u5f62\u4e2d\uff0c\u5f53 (ii). \u53d1\u751f\uff0c\u5728\u8fc7\u7a0b DELETE-FIXUP \u4e2d\u5faa\u73af\u5916\u88ab\u8c03\u6574\uff1b\u5220\u9664\u7684\u56db\u79cd\u60c5\u51b5\u4e2d\u7684\u53d8\u6362\u4e3b\u8981\u662f\u4e3a\u4e86\u8c03\u6574 (iii). \u9020\u6210\u7684\u7ea2\u9ed1\u6027\u8d28 5 \u88ab\u7834\u574f\uff0c\u6bcf\u79cd\u60c5\u51b5\u5747\u4fdd\u8bc1\u4e86\u53d8\u6362\u524d\u540e\u6839\u7ed3\u70b9\u5230\u5b50\u6811 $\\alpha$ ~ $\\xi$ \u7684\u9ed1\u7ed3\u70b9\u6570\u4e0d\u53d8\u3002 code: DELETE-FIXUP void DeleteFixup ( RBTree * tree , Node * x ) { while ( x != tree -> root && x -> color == BLACK ) { if ( x == x -> parent -> left ) { Node * w = x -> parent -> right ; if ( w -> color == RED ) { w -> color = BLACK ; x -> parent -> color = RED ; LeftRotate ( tree , x -> parent ); w = x -> parent -> right ; } if ( w -> left -> color == BLACK && w -> right -> color == BLACK ) { w -> color = RED ; x = x -> parent ; } else { if ( w -> right -> color == BLACK ) { w -> left -> color = BLACK ; w -> color = RED ; RightRotate ( tree , w ); w = x -> parent -> right ; } w -> color = x -> parent -> color ; x -> parent -> color = BLACK ; w -> right -> color = BLACK ; LeftRotate ( tree , x -> parent ); break ; } } else { Node * w = x -> parent -> left ; if ( w -> color == RED ) { w -> color = BLACK ; x -> parent -> color = RED ; RightRotate ( tree , x -> parent ); w = x -> parent -> left ; } if ( w -> left -> color == BLACK && w -> right -> color == BLACK ) { w -> color = RED ; x = x -> parent ; } else { if ( w -> left -> color == BLACK ) { w -> right -> color = BLACK ; w -> color = RED ; LeftRotate ( tree , w ); w = x -> parent -> left ; } w -> color = x -> parent -> color ; x -> parent -> color = BLACK ; w -> left -> color = BLACK ; RightRotate ( tree , x -> parent ); break ; } } } x -> color = BLACK ; } code: TRANSPLANT void Transplant ( RBTree * tree , Node * des , Node * src ) { if ( des == tree -> root ) { tree -> root = src ; } else if ( des == des -> parent -> left ) { des -> parent -> left = src ; } else { des -> parent -> right = src ; } // src may be T.nil src -> parent = des -> parent ; }","title":"4.Red-Black trees"},{"location":"3-DataStructures/3.4/#1","text":"","title":"1. \u7ea2\u9ed1\u6811\u53ca\u5176\u6027\u8d28"},{"location":"3-DataStructures/3.4/#1_1","text":"\u4e00\u68f5\u7ea2\u9ed1\u6811\u662f\u6ee1\u8db3\u4e0b\u5217 \u7ea2\u9ed1\u6027\u8d28 ( red-black properties ) \u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a \u20031. \u6bcf\u4e2a\u7ed3\u70b9\u6216\u4e3a\u7ea2\u8272\uff0c\u6216\u4e3a\u9ed1\u8272\u3002 \u20032. \u6839\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\u3002 \u20033. \u5916\u90e8\u7ed3\u70b9 NIL \u662f\u9ed1\u8272\u7684\u3002 \u20034. \u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\u3002 \u20035. \u5bf9\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u6240\u6709\u540e\u4ee3\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5747\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u7ed3\u70b9\u3002 \u2003\u7a7a\u7ed3\u70b9\u89c6\u4e3a\u5916\u90e8\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\uff09\uff0c\u5e76\u4e14\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u8fb9\u754c\u6761\u4ef6\uff0c\u6240\u6709\u7684\u7a7a\u7ed3\u70b9\u90fd\u7531\u54e8\u5175\u7ed3\u70b9 NIL \u4ee3\u66ff\u3002 \u2003\u4ece\u67d0\u4e2a\u7ed3\u70b9 x \u51fa\u53d1\uff08 \u4e0d\u542b\u8be5\u7ed3\u70b9\uff0c\u4f46\u5305\u62ec\u7a7a\u7ed3\u70b9 \uff09\uff0c\u5230\u8fbe\u4e00\u4e2a \u5916\u90e8\u7ed3\u70b9 \u7684\u4efb\u4e00\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u6570\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684 \u9ed1\u9ad8\u5ea6 ( black-height )\uff0c\u8bb0\u4e3a $bh(x)$\u3002 \u2003\u4e00\u68f5\u7ea2\u9ed1\u6811\u7684\u9ed1\u9ad8\u5ea6\u4e3a\u5176\u6839\u7ed3\u70b9\u7684\u9ed1\u9ad8\u5ea6\u3002 code: DEF typedef struct node { int key ; struct node * left ; struct node * right ; struct node * parent ; Color color ; } Node ; typedef struct tree { Node * root ; Node * nil ; } RBTree ;","title":"(1). \u5b9a\u4e49"},{"location":"3-DataStructures/3.4/#2","text":"\u2460 \u5728\u4e00\u68f5\u4ee5 $x$ \u4e3a\u6839\u7684(\u5b50)\u6811\u4e2d\uff0c\u8bbe\u5185\u90e8\u7ed3\u70b9\u6570\u4e3a $n$\uff0c\u5219 $2^{bh(x)}-1\\leq n \\leq 2^{2\u00d7bh(x)}-1$\u3002 \u2003- \u9ed1\u9ad8\u5ea6\u4e0e\u7ed3\u70b9\u6570\u91cf\u7684\u5173\u7cfb\uff0c\u6700\u5c11\uff1a\u5168\u662f\u9ed1\u7ed3\u70b9\uff1b\u6700\u591a\uff1a\u4efb\u4e00\u8def\u5f84\u4e0a\u7ea2\u9ed1\u4ea4\u66ff\u3002 \u2461 \u4ece\u6839\u7ed3\u70b9\u5230\u5916\u90e8\u7ed3\u70b9\u7684\u4efb\u4e00\u6761\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u81f3\u5c11\u6709\u4e00\u534a\u7684\u7ed3\u70b9\u4e3a\u9ed1\u8272\u3002 \u2003- \u9ed1\u9ad8\u5ea6\u4e0e\u6811\u9ad8\u5ea6\u7684\u5173\u7cfb\uff0c$h/2\\leq bh \\leq h$\uff0c\u7531\u7ea2\u9ed1\u6027\u8d28 4 \u53ef\u5f97\u3002 \u2462 \u4ece\u67d0\u7ed3\u70b9 $x$ \u5230\u5176\u540e\u4ee3\u5916\u90e8\u7ed3\u70b9\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e2d\uff0c\u6700\u957f\u7684\u4e00\u6761\u7684\u957f\u5ea6\u81f3\u591a\u662f\u6700\u77ed\u7684\u4e00\u6761\u7684 2 \u500d\u3002 \u2003- \u7531 \u2461 \u548c\u7ea2\u9ed1\u6027\u8d28 5 \u53ef\u5f97\u3002 \u2463 \u4e00\u68f5\u6709 $n$ \u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u9ad8\u5ea6\u81f3\u591a\u4e3a $2$\u00b7$lg(n+1)$\u3002 \u2003- \u8bbe\u6811\u9ad8\u4e3a $h$\uff0c\u7531 \u2461\uff0c\u9ed1\u9ad8\u5ea6\u81f3\u5c11\u4e3a $h/2$\uff0c\u5219\u6709 $n \\geq 2^{h/2}-1$\u3002\u4e24\u8fb9\u53d6\u5bf9\u6570\u5f97 $h\\leq 2$\u00b7$lg(n+1)$\u3002","title":"(2). \u5176\u4ed6\u6027\u8d28"},{"location":"3-DataStructures/3.4/#2_1","text":"","title":"2. \u7ea2\u9ed1\u6811\u7684\u64cd\u4f5c"},{"location":"3-DataStructures/3.4/#1-rotation","text":"\u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u6811\u7684\u7ea2\u9ed1\u6027\u8d28\uff0c\u6b64\u65f6\u901a\u8fc7\u4fee\u6539\u7ed3\u70b9\u989c\u8272\u548c\u4fee\u6539\u6811\u7684\u6307\u9488\u7ed3\u6784\u7ef4\u62a4\u8fd9\u4e9b\u6027\u8d28\uff0c\u800c\u4fee\u6539\u6307\u9488\u7ed3\u6784\u901a\u8fc7\u65cb\u8f6c\u5b8c\u6210\u3002 LEFT-ROTATE : \u5047\u8bbe x.right \u4e0d\u4e3a\u7a7a\u3002 code: LEFT-ROTATE void LeftRotate ( RBTree * tree , Node * x ) { Node * y = x -> right ; // step 1. turn y's left subtree x -> right = y -> left ; if ( y -> left != tree -> nil ) { y -> left -> parent = x ; } // step 2. link x's parent to y y -> parent = x -> parent ; if ( x -> parent == tree -> nil ) { tree -> root = y ; } else if ( x == x -> parent -> left ) { x -> parent -> left = y ; } else { x -> parent -> right = y ; } // step 3. link x and y x -> parent = y ; y -> left = x ; } RIGHT-ROTATE : \u548c\u5de6\u65cb\u5bf9\u79f0\u3002 code: RIGHT-ROTATE void RightRotate ( RBTree * tree , Node * y ) { Node * x = y -> left ; y -> left = x -> right ; if ( x -> right != tree -> nil ) { x -> right -> parent = y ; } x -> parent = y -> parent ; if ( y -> parent == tree -> nil ) { tree -> root = x ; } else if ( y == y -> parent -> left ) { y -> parent -> left = x ; } else { y -> parent -> right = x ; } y -> parent = x ; x -> right = y ; }","title":"(1). ROTATION"},{"location":"3-DataStructures/3.4/#2-insert","text":"\u8c03\u7528 BST \u7684\u63d2\u5165\u8fc7\u7a0b\u63d2\u5165\u7ed3\u70b9 z \uff0c\u4e3a\u5c3d\u91cf\u4fdd\u6301\u6811\u7ed3\u6784\u7684\u5408\u7406\u6027\uff0c\u4ee4 z \u7684\u5de6\u53f3\u5b69\u5b50\u6307\u5411 nil \uff0c\u5e76\u7f6e\u5176\u4e3a\u7ea2\u8272\u3002\u8fd9\u6b65\u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u7ea2\u9ed1\u6027\u8d28 2 \u548c 4 \u5176\u4e2d\u7684\u4e00\u4e2a\u88ab\u7834\u574f\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5f53 z \u7684\u7236\u7ed3\u70b9\u4e3a\u7ea2\u8272\u65f6\u7ea2\u9ed1\u6027\u8d28 4 \u4f1a\u88ab\u7834\u574f\u3002 \u2003\u56e0\u6b64\uff0c\u95ee\u9898\u88ab\u8f6c\u5316\u4e3a\uff1a z \u3001 z.parent \u7684\u989c\u8272\u5df2\u77e5\uff0c\u6839\u636e z \u7684\u7237\u7237\u7ed3\u70b9\u548c\u53d4\u53d4\u7ed3\u70b9\u7684\u60c5\u51b5\u7684\u4e0d\u540c\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\u5982\u4f55\u8c03\u6574\u6811\u7ed3\u6784\u3002 \u2460 z \u7684\u53d4\u7ed3\u70b9 u \u4e3a\u7ea2\u8272 \u2003\u6b64\u65f6 z \u3001 z.parent \u3001 u \u4e3a\u7ea2\u8272\uff0c z.parent.parent \u4e3a\u9ed1\u8272\u3002\u628a z.parent \u3001 u \u7740\u4e3a\u9ed1\u8272\uff0c\u628a z.parent.parent \u7740\u4e3a\u7ea2\u8272\uff0c\u7136\u540e\u4ee4\u77db\u76fe\u8282\u70b9 z = z.parent.parent \uff0c\u91cd\u590d\u8c03\u6574\u6811\u7ed3\u6784\u7684\u8fed\u4ee3\u8fc7\u7a0b\u3002 \u2461 z \u7684\u53d4\u7ed3\u70b9 u \u4e3a\u9ed1\u8272\uff0c z \u3001 z.parent \u3001 z.parent.parent \u5171\u7ebf \u2003\u4ee5 z.parent \u662f\u5de6\u5b69\u5b50\u4e3a\u4f8b\uff0c\u6b64\u65f6 z \u3001 z.parent \u4e3a\u7ea2\u8272\uff0c u \u3001 z.parent.parent \u4e3a\u9ed1\u8272\u3002\u628a z.parent \u7740\u4e3a\u9ed1\u8272\uff0c z.parent.parent \u7740\u4e3a\u7ea2\u8272\uff0c\u7136\u540e\u8c03\u7528\u4e00\u6b21\u53f3\u65cb RIGHT-ROTATE(T, z.p.p) \uff0c\u4fdd\u6301\u4e86\u7ea2\u9ed1\u6811\u6027\u8d28\u3002 \u2462 z \u7684\u53d4\u7ed3\u70b9 u \u4e3a\u9ed1\u8272\uff0c\u4e14\u4e0d\u5171\u7ebf \u2003\u4ee5 z.parent \u662f\u5de6\u5b69\u5b50\u4e3a\u4f8b\uff0c\u6b64\u65f6 z \u662f z.parent \u7684\u53f3\u5b69\u5b50\u3002\u4ee4 z \u4e0a\u79fb\u5230 z.parent \uff0c\u7136\u540e\u5bf9 _z \u8c03\u7528\u5de6\u65cb\u64cd\u4f5c\uff0c\u65e0\u9700\u4fee\u6539\u4efb\u610f\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u7136\u540e\u6309\u60c5\u51b5 \u2461 \u5904\u7406\u3002 \u2003\u6700\u540e\uff0c\u4fee\u6539\u6839\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u786e\u4fdd\u7ea2\u9ed1\u6027\u8d28 2 \u4e0d\u88ab\u7834\u574f\u3002 code: INSERT void Insert ( RBTree * tree , Node * z ) { Node * root = tree -> root ; Node * last = tree -> nil ; int key = z -> key ; while ( root != tree -> nil ) { last = root ; if ( root -> key > key ) { root = root -> left ; } else { root = root -> right ; } } z -> parent = last ; if ( last == tree -> nil ) { tree -> root = z ; } else if ( last -> key > key ) { last -> left = z ; } else { last -> right = z ; } z -> left = z -> right = tree -> nil ; z -> color = RED ; InsertFixup ( tree , z ); } code: INSERT-FIXUP void InsertFixup ( RBTree * tree , Node * z ) { while ( z -> parent -> color == RED ) { if ( z -> parent == z -> parent -> parent -> left ) { Node * uncle = z -> parent -> parent -> right ; if ( uncle -> color == RED ) { z -> parent -> color = BLACK ; uncle -> color = BLACK ; z -> parent -> parent -> color = RED ; z = z -> parent -> parent ; } else { if ( z == z -> parent -> right ) { z = z -> parent ; LeftRotate ( tree , z ); } z -> parent -> color = BLACK ; z -> parent -> parent -> color = RED ; RightRotate ( tree , z -> parent -> parent ); } } else { Node * uncle = z -> parent -> parent -> left ; if ( uncle -> color == RED ) { z -> parent -> color = BLACK ; uncle -> color = BLACK ; z -> parent -> parent -> color = RED ; z = z -> parent -> parent ; } else { if ( z == z -> parent -> left ) { z = z -> parent ; RightRotate ( tree , z ); } z -> parent -> color = BLACK ; z -> parent -> parent -> color = RED ; LeftRotate ( tree , z -> parent -> parent ); } } } tree -> root -> color = BLACK ; } main points \u63d2\u5165\u7ed3\u70b9\u5047\u8bbe \u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u60c5\u51b5 \u4ee5 z.p \u7684\u989c\u8272\u4e3a\u8fed\u4ee3\u6761\u4ef6, \u4ee5 z.p.p.l/r \u4e3a\u5bf9\u79f0\u6761\u4ef6 \u6839\u636e u \u662f\u5426\u4e3a\u7ea2\u8272\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5 1, 2.1, 2.2 \u4fee\u6b63\u6839\u7684\u989c\u8272\uff0c\u4fdd\u8bc1 case1 \u7684\u6b63\u786e\u6027 \u2003\u56e0\u4e3a\u6811\u9ad8 $O(lgn)$\uff0c\u6240\u4ee5\u8fc7\u7a0b INSERT \u63d2\u5165\u5143\u7d20\u7684\u90e8\u5206\u9700\u8981 $O(lgn)$ \u65f6\u95f4\uff1b\u5728\u8fc7\u7a0b INSERT-FIXUP \u4e2d\uff0c\u5f53\u4e14\u4ec5\u5f53\u60c5\u51b5 \u2460 \u53d1\u751f\uff0c while \u5faa\u73af\u624d\u4f1a\u91cd\u590d\u8fdb\u884c\uff0c\u53ef\u80fd\u6267\u884c\u7684\u603b\u6b21\u6570\u4e3a $O(lgn)$\uff1b\u56e0\u6b64\uff0c\u603b\u5171\u9700\u8981\u65f6\u95f4\u4e3a $O(lgn)$\u3002 \u2003\u6b64\u5916\uff0c\u8be5\u7a0b\u5e8f\u6240\u505a\u7684\u65cb\u8f6c\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7 2\u3002","title":"(2). INSERT"},{"location":"3-DataStructures/3.4/#3-delete","text":"\u7c7b\u4f3c\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u5148\u8c03\u7528 BST \u7684\u5220\u9664\u8fc7\u7a0b\uff0c\u518d\u5206\u60c5\u51b5\u8ba8\u8bba\u5982\u4f55\u8c03\u6574\u6811\u7684\u7ed3\u6784\u3002\u7531\u4e8e\u5728\u5b50\u6811\u66ff\u6362\u7684\u8fc7\u7a0b\u53ef\u80fd\u7834\u574f\u7ea2\u9ed1\u6027\u8d28\uff0c\u6b64\u5904\u7684\u5220\u9664\u64cd\u4f5c\u548c BST \u7684\u5220\u9664\u7565\u6709\u4e0d\u540c\u3002 \u53d8\u91cf y : \u88ab\u5220\u9664 (\u4ee3\u66ff) \u6216\u79fb\u52a8\u4e14\u5bfc\u81f4\u4e86\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u7ed3\u70b9\uff0c\u9700\u8981\u6839\u636e\u5b83\u7684\u989c\u8272\u5224\u65ad\u7ea2\u9ed1\u6811\u662f\u5426\u9700\u8981\u8c03\u6574 case 1, 2: y \u5373\u662f\u88ab\u5220\u9664\u7684\u8282\u70b9 z case 3:\u2003 y \u662f z \u5728\u53f3\u5b50\u6811\u4e2d\u7684\u540e\u7ee7\uff0c\u88ab\u79fb\u52a8\u5230 z \u7684\u4f4d\u7f6e\u5e76\u4fdd\u7559 z \u7684\u989c\u8272\uff1b y \u7684\u53f3\u5b69\u5b50\u66ff\u6362 y \u65f6\u53ef\u80fd\u5bfc\u81f4\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u3002 \u53d8\u91cf x : \u7528\u4e8e\u66ff\u6362 y \u7684\u7ed3\u70b9\uff0c\u9700\u8981\u6839\u636e\u5b83\u7684\u989c\u8272\u5224\u65ad\u7ea2\u9ed1\u6811\u5982\u4f55\u8fdb\u884c\u8c03\u6574 case 1, 2: \u662f\u7a7a\u7ed3\u70b9\u6216 y \u7684\u5de6\u5b69\u5b50\u6216\u53f3\u5b69\u5b50 case 3: \u2003\u662f y \u7684\u53f3\u5b69\u5b50\uff0c\u6216\u4e00\u4e2a\u7a7a\u7ed3\u70b9 code: DELETE void Delete ( RBTree * tree , Node * z ) { Node * y = z ; Node * x ; Color yOrgColor = y -> color ; if ( z -> left == tree -> nil ) { x = z -> right ; Transplant ( tree , z , z -> right ); } else if ( z -> right == tree -> nil ) { x = z -> left ; Transplant ( tree , z , z -> left ); } else { y = Minimum ( tree , z -> right ); yOrgColor = y -> color ; x = y -> right ; if ( y -> parent == z ) { x -> parent = y ; // if z->right links to y directly and y->right links // to nil (i.e. x = nil), let nil->parent link to y } else { Transplant ( tree , y , y -> right ); y -> right = z -> right ; z -> right -> parent = y ; } Transplant ( tree , z , y ); y -> left = z -> left ; z -> left -> parent = y ; y -> color = z -> color ; // shift color } if ( yOrgColor == BLACK ) { DeleteFixup ( tree , x ); } } \u2003\u6700\u540e\uff0c\u4f9d\u636e y \u7684\u989c\u8272 y-original-color \u5224\u65ad\u662f\u5426\u8c03\u6574\u6811\u7684\u7ed3\u6784\u3002\u5982\u679c\u662f\u7ea2\u8272\uff0c\u90a3\u4e48 y \u4e0d\u53ef\u80fd\u662f\u6839\uff0c\u4e14 x \u4e00\u5b9a\u662f\u9ed1\u8272\uff0c\u6240\u4ee5\u4efb\u4f55\u7ea2\u9ed1\u6027\u8d28\u90fd\u4e0d\u4f1a\u88ab\u7834\u574f\uff1b\u5982\u679c\u662f\u9ed1\u8272\uff0c(\u53ef\u80fd)\u4f1a\u53d1\u751f (a). \u5982\u679c y \u662f\u6839\uff0c\u5b83\u7684\u7ea2\u5b69\u5b50 x \u6210\u4e3a\u65b0\u6839\uff0c\u5219\u7834\u574f\u4e86\u7ea2\u9ed1\u6027\u8d28 2\uff1b (b). \u5982\u679c\u5728 y \u88ab\u5220\u9664\u6216\u79fb\u52a8\u540e\uff0c x \u548c x.parent \u90fd\u662f\u7ea2\u8272\uff0c\u5219\u7834\u574f\u4e86\u7ea2\u9ed1\u6027\u8d28 4\uff1b (c). \u5148\u524d\u4efb\u4f55\u5305\u542b y \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u6570\u90fd\u5c11\u4e00. \u89e3\u51b3\u7684\u601d\u8def\u662f\uff0c\u628a y \u7684\u9ed1\u8272\u7559\u7ed9 x \uff0c\u89c6 x \u662f\u4e00\u4e2a\u5177\u6709\u53cc\u91cd\u989c\u8272\u7684\u7ed3\u70b9\u3002 \u82e5 x \u662f\u4e00\u4e2a\u7ea2\u9ed1\u8272\u7ed3\u70b9\uff0c\u5373 x \u539f\u672c\u662f\u7ea2\u8272\uff0c\u6839\u636e\u4e0a\u9762\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u4e09\u79cd\u60c5\u51b5\u6765\u770b\uff0c\u53ea\u9700\u8981\u628a\u5b83\u7f6e\u4e3a\u9ed1\u8272\u5373\u53ef\uff1b \u82e5 x \u662f\u4e00\u4e2a\u53cc\u91cd\u9ed1\u8272\u7684\u7ed3\u70b9\uff0c\u8bbe w \u662f\u5b83\u7684\u5144\u5f1f\u7ed3\u70b9\uff0c\u7136\u540e\u5206\u56db\u79cd\u60c5\u51b5\u8ba8\u8bba\u5982\u4f55\u5904\u7406\u3002 \u2460 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u662f\u7ea2\u8272\u7684 \u2003 w \u7684\u4e24\u4e2a\u5b69\u5b50\u548c x.parent \u662f\u9ed1\u8272\u7684\u3002\u5148\u6539\u53d8 w \u548c x.parent \u7684\u989c\u8272\uff0c\u7136\u540e\u5bf9 x.parent \u505a\u5de6\u65cb\u64cd\u4f5c\uff0c w \u7684\u5de6\u5b69\u5b50\u6210\u4e3a new w \u3002\u6b64\u65f6\uff0c x \u5177\u6709\u53cc\u91cd\u9ed1\u8272\uff0c new w \u4e3a\u9ed1\u8272\uff0c\u8fdb\u5165\u60c5\u51b5 \u2461\u3001\u2462\u3001\u2463 \u7684\u8ba8\u8bba\u8303\u56f4\u3002 \u2003\u5bf9\u4e8e\u5b50\u6811 $\\varepsilon$\u3001$\\xi$\uff0c\u4ea4\u6362\u989c\u8272\u4fdd\u8bc1\u4e86\u7ea2\u9ed1\u6027\u8d28 5\u3002 \u2461 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u4e3a\u9ed1\u8272\uff0c\u4e14 w \u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u90fd\u662f\u9ed1\u8272\u7684 \u2003 x \u3001 w \u548c w \u7684\u4e24\u4e2a\u5b69\u5b50\u5747\u4e3a\u9ed1\u8272\u7684\uff0c x.parent \u989c\u8272\u672a\u77e5\u3002\u4ece x \u548c w \u4e0a\u53bb\u6389\u4e00\u91cd\u9ed1\u8272\uff0c\u4f7f\u5f97 x \u53ea\u5269\u4e00\u91cd\u9ed1\u8272\u3001 w \u53d8\u4e3a\u7ea2\u8272\uff0c\u5e76\u628a\u8fd9\u91cd\u9ed1\u8272\u8865\u507f\u5230 x.parent \u4e0a\uff0c\u5e76\u4ee4 x.parent = new x \uff0c\u91cd\u590d\u8fed\u4ee3\u8fc7\u7a0b\u3002 \u2003\u5982\u679c\u60c5\u51b5 \u2461 \u662f\u901a\u8fc7\u60c5\u51b5 \u2460 \u8fdb\u5165\u7684\uff0c\u90a3\u4e48 new x \u4e3a\u7ea2\u9ed1\u8272\uff0c\u5728\u4ee3\u7801\u7684\u6700\u540e\u90e8\u5206\u76f4\u63a5\u7f6e\u9ed1\uff0c\u5b8c\u6210\u6811\u7ed3\u6784\u7684\u8c03\u6574\u3002 \u2462 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u662f\u9ed1\u8272\u7684\uff0c\u4e14 w \u7684\u5de6\u5b69\u5b50\u4e3a\u7ea2\u8272\uff0c\u53f3\u5b69\u5b50\u4e3a\u9ed1\u8272 \u2003 x.p \u989c\u8272\u672a\u77e5\u3002\u6539\u53d8\uff08\u4ea4\u6362\uff09 w \u548c w.left \u7684\u989c\u8272\uff0c\u7136\u540e\u5bf9 w \u505a\u53f3\u65cb\u64cd\u4f5c\u3002\u6b64\u65f6\uff0c new w \u4e3a\u9ed1\u8272\uff0c\u4e14 w \u7684\u53f3\u5b69\u5b50\u662f\u7ea2\u8272\u7684\uff0c\u8fdb\u5165\u60c5\u51b5 \u2463 \u5904\u7406\u3002 \u2463 x \u7684\u5144\u5f1f\u7ed3\u70b9 w \u4e3a\u9ed1\u8272\uff0c\u4e14 w \u7684\u53f3\u5b69\u5b50\u4e3a\u7ea2\u8272 \u2003 x.p \u989c\u8272\u672a\u77e5\u3002\u56e0\u4e3a w \u4f1a\u6210\u4e3a\u5b50\u6811\u7684\u65b0\u6839\uff0c\u4ee4 w.color = x.p.color \uff0c\u7136\u540e\u6539\u53d8 w.right \u7684\u989c\u8272\uff0c\u5e76\u7f6e x.p \u4e3a\u9ed1\u8272\uff0c\u518d\u5bf9 x.p \u505a\u5de6\u65cb\u64cd\u4f5c\uff0c\u53bb\u6389\u4e86 x \u4e0a\u989d\u5916\u7684\u4e00\u91cd\u9ed1\u8272\uff0c\u5e76\u4fdd\u6301\u7ea2\u9ed1\u6027\u8d28\u4e0d\u53d8\u3002\u6700\u540e\u9000\u51fa\u5faa\u73af\u3002 \u2003\u5728\u7ea2\u9ed1\u6027\u8d28\u88ab\u7834\u574f\u7684\u51e0\u79cd\u60c5\u5f62\u4e2d\uff0c\u5f53 (ii). \u53d1\u751f\uff0c\u5728\u8fc7\u7a0b DELETE-FIXUP \u4e2d\u5faa\u73af\u5916\u88ab\u8c03\u6574\uff1b\u5220\u9664\u7684\u56db\u79cd\u60c5\u51b5\u4e2d\u7684\u53d8\u6362\u4e3b\u8981\u662f\u4e3a\u4e86\u8c03\u6574 (iii). \u9020\u6210\u7684\u7ea2\u9ed1\u6027\u8d28 5 \u88ab\u7834\u574f\uff0c\u6bcf\u79cd\u60c5\u51b5\u5747\u4fdd\u8bc1\u4e86\u53d8\u6362\u524d\u540e\u6839\u7ed3\u70b9\u5230\u5b50\u6811 $\\alpha$ ~ $\\xi$ \u7684\u9ed1\u7ed3\u70b9\u6570\u4e0d\u53d8\u3002 code: DELETE-FIXUP void DeleteFixup ( RBTree * tree , Node * x ) { while ( x != tree -> root && x -> color == BLACK ) { if ( x == x -> parent -> left ) { Node * w = x -> parent -> right ; if ( w -> color == RED ) { w -> color = BLACK ; x -> parent -> color = RED ; LeftRotate ( tree , x -> parent ); w = x -> parent -> right ; } if ( w -> left -> color == BLACK && w -> right -> color == BLACK ) { w -> color = RED ; x = x -> parent ; } else { if ( w -> right -> color == BLACK ) { w -> left -> color = BLACK ; w -> color = RED ; RightRotate ( tree , w ); w = x -> parent -> right ; } w -> color = x -> parent -> color ; x -> parent -> color = BLACK ; w -> right -> color = BLACK ; LeftRotate ( tree , x -> parent ); break ; } } else { Node * w = x -> parent -> left ; if ( w -> color == RED ) { w -> color = BLACK ; x -> parent -> color = RED ; RightRotate ( tree , x -> parent ); w = x -> parent -> left ; } if ( w -> left -> color == BLACK && w -> right -> color == BLACK ) { w -> color = RED ; x = x -> parent ; } else { if ( w -> left -> color == BLACK ) { w -> right -> color = BLACK ; w -> color = RED ; LeftRotate ( tree , w ); w = x -> parent -> left ; } w -> color = x -> parent -> color ; x -> parent -> color = BLACK ; w -> left -> color = BLACK ; RightRotate ( tree , x -> parent ); break ; } } } x -> color = BLACK ; } code: TRANSPLANT void Transplant ( RBTree * tree , Node * des , Node * src ) { if ( des == tree -> root ) { tree -> root = src ; } else if ( des == des -> parent -> left ) { des -> parent -> left = src ; } else { des -> parent -> right = src ; } // src may be T.nil src -> parent = des -> parent ; }","title":"(3). DELETE"},{"location":"3-DataStructures/3.5/","text":"1. B \u6811\u53ca\u5176\u6027\u8d28 B \u6811\u4e5f\u662f\u5bf9 BST \u7684\u4e00\u79cd\u63a8\u5e7f\u3002\u548c\u7ea2\u9ed1\u6811\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u662f\u4e00\u79cd\u9488\u5bf9\u78c1\u76d8\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u5206\u652f\u56e0\u5b50\u4e0d\u5c0f\u4e8e 2 \uff0c\u5176\u503c\u7531\u78c1\u76d8\u5355\u5143\u7684\u7279\u6027\u51b3\u5b9a\u3002 (1). \u8f85\u5b58\u7684\u7ed3\u6784 \u2003\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u5b58\u901a\u5e38\u7531\u7845\u82af\u7247\u6784\u6210\uff0c\u8f85\u5b58\u57fa\u4e8e\u78c1\u76d8\u3002\u53f3\u56fe\u4e3a\u4e00\u4e2a\u5178\u578b\u7684\u78c1\u76d8\u9a71\u52a8\u5668\uff0c\u5b83\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u76d8\u7247\u6784\u6210 ( platter )\uff0c\u76d8\u7247\u4ee5\u56fa\u5b9a\u7684\u901f\u5ea6\u7ed5\u4e3b\u8f74 ( spindle ) \u65cb\u8f6c\u3002\u9a71\u52a8\u5668\u901a\u8fc7\u78c1\u81c2\u672b\u5c3e\u7684\u78c1\u5934\u8bfb\u5199\u76d8\u7247\uff0c\u78c1\u5934\u53ef\u4ee5\u671d\u4e3b\u8f74\u79fb\u8fd1\u6216\u79fb\u8fdc\u3002\u7531\u4e8e\u9700\u8981\u65cb\u8f6c\u76d8\u7247\u548c\u79fb\u52a8\u78c1\u81c2\uff0c\u78c1\u76d8\u7684\u5b58\u53d6\u901f\u5ea6\u901a\u5e38\u6bd4\u7845\u82af\u7247\u4f4e 5 \u4e2a\u6570\u91cf\u7ea7\u3002 \u2003\u4e3a\u5e73\u644a\u673a\u68b0\u8fd0\u52a8\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u78c1\u76d8\u4e00\u6b21\u4f1a\u5b58\u53d6\u591a\u4e2a\u9875\u9762 ( page )\uff0c\u4e00\u9875\u7684\u957f\u5ea6\u901a\u5e38\u4e3a $2^{11}$~$2^{14}$ \u4e2a\u5b57\u8282\u3002\u4e00\u65e6\u78c1\u5934\u6b63\u786e\u5b9a\u4f4d\uff0c\u76d8\u7247\u4e5f\u65cb\u8f6c\u5230\u9875\u9762\u5f00\u5934\u4f4d\u7f6e\uff0c\u5269\u4e0b\u7684\u8bfb\u5199\u8fc7\u7a0b\u5c31\u5b8c\u5168\u7535\u5b50\u5316\u4e86\u3002 \u2003\u8003\u8651\u9700\u8981\u5728\u78c1\u76d8\u4e0a\u6301\u4e45\u5316\u5b58\u50a8\u5927\u91cf\u7684 $(\\mathit{key,\\ value})$ \u7684\u573a\u666f\uff0c\u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u4fdd\u8bc1\u6548\u7387\u3002\u5982\u679c\u4f7f\u7528 Hash \u8868\u5219\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898\uff1a \u5f00\u9500\u5927\u3001\u6269\u5c55\u6027\u5dee\uff1a\u4e3a\u4e86\u4fdd\u6301\u54c8\u5e0c\u8868\u7684\u6548\u7387\u9700\u8981\u66f4\u5927\u7684\u6570\u7ec4\uff0c\u63a5\u8fd1\u586b\u6ee1\u540e\u8fd8\u9700\u8981\u8f6c\u79fb\u6570\u636e\u81f3\u66f4\u5927\u7684\u54c8\u5e0c\u8868 \u4e0d\u652f\u6301\u6709\u5e8f\u904d\u5386\u3001\u8303\u56f4\u67e5\u8be2 \u5982\u679c\u6876\u4e2d\u7684\u5143\u7d20\u8fc7\u591a\u5bf9\u78c1\u76d8 IO (\u673a\u68b0\u8fd0\u52a8\u7684\u5f00\u9500) \u4e0d\u53cb\u597d \u82e5\u4f7f\u7528\u7ea2\u9ed1\u6811\uff0c\u7531\u4e8e\u6bcf\u8bfb\u53d6\u4e00\u4e2a\u7ed3\u70b9\u5c31\u5f88\u53ef\u80fd\u5bfc\u81f4\u78c1\u76d8\u7684\u673a\u68b0\u8fd0\u52a8\uff0c\u5c3d\u7ba1\u5728 CPU \u8fd0\u884c\u65f6\u95f4\u4e0a\u6709 $\\log$ \u6548\u7387\uff0c\u4f46\u5728\u78c1\u76d8 IO \u4e0a\u5f00\u9500\u5f88\u5927\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u727a\u7272\u4e00\u90e8\u5206\u67e5\u627e\u7684\u6548\u7387\uff0c\u5b9e\u73b0\u4e00\u79cd\u591a\u8def\u7684\u5e73\u8861\u6811 (2). B \u6811\u7684\u5b9a\u4e49 \u4e00\u68f5 B \u6811\u662f\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u6709\u6839\u6811\uff1a \u6bcf\u4e2a\u7ed3\u70b9 $x$ \u5177\u6709\u4ee5\u4e0b\u5c5e\u6027 $x.n$ : \u5b58\u50a8\u5728\u7ed3\u70b9 $x$ \u4e2d\u7684\u5173\u952e\u5b57\u4e2a\u6570 $\\mathit{x.key_1,\\ ...\\ ,x.key_n}$ : \u5173\u952e\u5b57\u672c\u8eab\uff0c\u4ee5\u975e\u964d\u5e8f\u5b58\u653e\uff0c\u5373 $\\mathit{x.key_1\\leq\\ ...\\ \\leq x.key_n}$\u3002\u5e76\u4e14\uff0c\u5185\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u5b58\u50a8\u5728\u5185\u7ed3\u70b9\u4e2d $\\mathit{x.leaf}$ : \u5e03\u5c14\u503c\uff0c\u8868\u793a $x$ \u662f\u5426\u4e3a\u53f6\u7ed3\u70b9 \u6bcf\u4e2a\u5185\u90e8\u8282\u70b9 $x$ \u5305\u542b $n+1$ \u4e2a\u6307\u5411\u5b50\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u4e14 $\\mathit{x.key_i}$ \u5bf9\u5404\u5b50\u6811\u7684\u5173\u952e\u5b57\u8303\u56f4\u52a0\u4ee5\u5206\u5272\uff0c\u5373 $k_1\\leq\\mathit{x.key_1}\\leq k_2\\leq \\mathit{x.key_2}\\ ...$ \u6bcf\u4e2a\u53f6\u7ed3\u70b9\u5177\u6709\u76f8\u540c\u6df1\u5ea6\uff0c\u5373\u6811\u7684\u9ad8\u5ea6 $h$ \u6bcf\u68f5 B \u6811\u5177\u6709\u4e00\u4e2a\u6700\u5c0f\u5ea6\u6570 $t$ 1 \u9664\u4e86\u6839\u7ed3\u70b9\u5916\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u5c11\u6709 $t-1$ \u4e2a\u5173\u952e\u5b57\uff0c\u76f8\u5e94\u5730\uff0c\u5185\u90e8\u8282\u70b9\u81f3\u5c11\u6709 $t$ \u4e2a\u5b69\u5b50 \u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u6709 $2t-1$ \u4e2a\u5173\u952e\u5b57\uff0c\u76f8\u5e94\u5730\uff0c\u5185\u90e8\u8282\u70b9\u81f3\u591a\u6709 $2t$ \u4e2a\u5b69\u5b50 (3). B \u6811\u7684\u9ad8\u5ea6 \u4ee5\u6839\u7ed3\u70b9\u4e3a\u6df1\u5ea6 0 \uff0c\u4e00\u68f5 B \u6811\u5728\u6df1\u5ea6 $h\\ (h > 0)$ \u7684\u4e00\u5c42\u81f3\u5c11\u6709 $2t^{h-1}$ \u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5173\u952e\u5b57\u7684\u4e2a\u6570 $n$\uff0c\u6709 $\\displaystyle n\\geq 1+(t-1)\\sum_{i=1}^h2t^{i-1}=2t^h-1$ \u5373\u53ef\u5f97\u5230 $h\\leq\\log_t (n+1)/2$\u3002\u4e0e\u540c\u4e3a\u5e73\u8861\u6811\u7684\u7ea2\u9ed1\u6811\u76f8\u6bd4\uff0c B \u6811\u7684\u5e95\u6570\u66f4\u5927\uff0c\u56e0\u6b64\u9ad8\u5ea6\u66f4\u4f4e\uff0c\u4ece\u800c\u5728\u5404\u79cd\u6811\u64cd\u4f5c\u4e2d\u51cf\u5c11\u4e86\u8981\u68c0\u67e5\u7684\u7ed3\u70b9\u6570\uff0c\u907f\u514d\u4e86\u5927\u91cf\u7684\u78c1\u76d8\u8bbf\u95ee\u3002 2. B \u6811\u7684\u64cd\u4f5c \u5728 B \u6811\u7684\u64cd\u4f5c\u4e2d\uff0c\u59cb\u7ec8\u4fdd\u6301\u5982\u4e0b\u7ea6\u5b9a\uff1a \u6839\u7ed3\u70b9\u59cb\u7ec8\u56fa\u5b9a\u5728\u4e3b\u5b58\u4e2d\uff0c\u5373\u65e0\u9700\u5bf9\u6839\u505a DISK-READ \u64cd\u4f5c\uff0c\u4f46\u4fee\u6539\u6839\u7ed3\u70b9\u9700\u8981\u4e00\u6b21 DISK-WRITE \u4efb\u4f55\u88ab\u5f53\u505a\u53c2\u6570\u7684\u7ed3\u70b9\u5728\u88ab\u4f20\u9012\u4e4b\u524d\uff0c\u90fd\u8981\u505a\u4e00\u6b21 DISK-READ (1). \u641c\u7d22 B-TREE-SEARCH( x, k ) i = 1 while i \u2264 x.n and k > x.key i i = i + 1 if i \u2264 x.n and k == x.key i return ( x, i ) else if x.leaf return NIL else DISK-READ( x, c i ) return B-TREE-SEARCH( x, c i , k ) \u8bbf\u95ee\u78c1\u76d8\u9875\u9762\u6570\u4e3a $O(h)=O(\\log_t n)$\uff0c\u82b1\u8d39\u65f6\u95f4 $O(tn)$ (2). \u5206\u88c2\u7ed3\u70b9 \u8fc7\u7a0b B-TREE-SPLIT-CHILD \u7684\u8f93\u5165\u662f\u4e00\u4e2a\u975e\u6ee1\u7684\u5185\u7ed3\u70b9 $x$ \u548c\u4e00\u4e2a\u6ee1\u5b50\u7ed3\u70b9 $x.c_i$ \u7684\u4e0b\u6807 $i$\u3002 $x.c_i$ \u6839\u636e\u4e2d\u95f4\u5173\u952e\u5b57\u5206\u88c2\u6210\u4e24\u4e2a\u7ed3\u70b9\uff0c\u5176\u4e2d\u95f4\u5173\u952e\u5b57\u4e0a\u79fb\u5230 $x$ \u7684\u76f8\u5e94\u4f4d\u7f6e\u3002 \u6839\u7ed3\u70b9\u5206\u88c2\u662f\u589e\u52a0\u6811\u9ad8\u7684\u552f\u4e00\u9014\u5f84\u3002 (3). \u63d2\u5165 \u6cbf\u7740\u63d2\u5165\u8def\u5f84\u627e\u5230\u76ee\u6807\u53f6\u5b50\u7ed3\u70b9\u540e\uff0c\u901a\u8fc7\u5206\u88c2\u7ed3\u70b9\u4fdd\u8bc1\u5173\u952e\u5b57\u7684\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u9650\u5236\u3002\u5177\u4f53\u53ef\u6709\u4ee5\u4e0b\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a \u9047\u5230\u6ee1\u7ed3\u70b9\u65f6\u518d\u5206\u88c2\uff1a\u63d2\u5165\u5230\u76ee\u6807\u4f4d\u7f6e\u540e\uff0c\u5982\u679c\u53d1\u751f\u5206\u88c2\uff0c\u5176\u7236\u7ed3\u70b9\u4f1a\u589e\u52a0\u4e00\u4e2a $key$\uff0c\u56e0\u6b64\u9012\u5f52\u5411\u4e0a\u5224\u65ad \u6cbf\u9014\u5206\u88c2\u6ee1\u7ed3\u70b9\uff1a\u4e3a\u4e86\u907f\u514d\u5411\u4e0a\u56de\u6eaf\uff0c\u9700\u8981\u4fdd\u8bc1\u627e\u5230\u76ee\u6807\u7ed3\u70b9\u65f6\uff0c\u5b83\u7684\u7236\u7ed3\u70b9\u672a\u6ee1\u3002\u56e0\u6b64\uff0c\u5728\u6cbf\u63d2\u5165\u8def\u5f84\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u8981\u9047\u5230\u4e00\u4e2a\u6ee1\u7ed3\u70b9\u5c31\u5206\u88c2\u5b83\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u90fd\u4e00\u5b9a\u672a\u6ee1 (4). \u501f\u4f4d\u4e0e\u5408\u5e76 \u8003\u8651\u4ece\u7ed3\u70b9 $x$ \u5904\u5220\u9664\u4e86\u4e00\u4e2a $\\it key$\uff0c\u5bfc\u81f4 $x.n=t-2$\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u7ef4\u62a4 $x.n\\geq t$ \u501f\u4f4d\uff1a\u4ece\u5de6\u5144\u5f1f $x_l$ \u6216\u53f3\u5144\u5f1f $x_r$ \u501f\u6765\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u8981\u6c42 $x_{\\mathit{brother}}.n\\geq t$ $x_l$ \u6700\u53f3\u5173\u952e\u5b57\u4e0a\u79fb\uff0c$k_x$ \u4e0b\u79fb\u81f3 $x$ \u6700\u5de6\u5904\uff0c\u540c\u65f6 $x_l$ \u7684\u6700\u53f3\u6307\u9488\u6210\u4e3a $x$ \u7684\u6700\u5de6\u6307\u9488 $x_r$ \u6700\u5de6\u5173\u952e\u5b57\u4e0a\u79fb\uff0c$k_x$ \u4e0b\u79fb\u81f3 $x$ \u6700\u53f3\u5904\uff0c\u540c\u65f6 $x_l$ \u7684\u6700\u5de6\u6307\u9488\u6210\u4e3a $x$ \u7684\u6700\u53f3\u6307\u9488 \u5408\u5e76\uff1a\u628a $x_{bro}$\u3001$x$ \u4ee5\u53ca $k_x$ \u5408\u5e76\uff0c\u6307\u9488\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u8981\u6c42 $x_{\\mathit{brother}}.n\\leq t$ $x_{\\mathit{brother}}.n + t - 2 + 1\\leq 2t-1$ \u5408\u5e76\u4f1a\u5bfc\u81f4 $x._\\mathit{parent}$ \u51cf\u5c11\u4e00\u4e2a $\\it key$ \u4e8c\u8005\u5747\u53ef\u4ee5\u7528\u4e8e\u4fee\u590d\u5220\u9664\u5bfc\u81f4\u7684 B \u6811\u6027\u8d28\u7684\u7834\u574f (5). \u5220\u9664 \u76f4\u5230\u5220\u9664\u5bfc\u81f4 $n< t-1$ \u518d\u505a\u5904\u7406\uff0c\u5e76\u4e0d\u65ad\u5411\u4e0a\u56de\u6eaf\u5224\u65ad\uff1a \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u975e\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u5219\u5411\u5de6/\u53f3\u627e\u5230 $k$ \u7684\u524d\u9a71/\u540e\u7ee7\uff0c\u7528\u4e4b\u4ee3\u66ff $k$\uff0c\u7136\u540e\u9012\u5f52\u5220\u9664\u8fd9\u4e2a\u524d\u9a71/\u540e\u7ee7 \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u4ece $x$ \u4e2d\u5220\u9664 $k$ 2 \u82e5\u5220\u9664\u540e\u5bfc\u81f4 $n< t-1$\uff0c\u4e14\u67d0\u4e2a\u76f8\u90bb\u5144\u5f1f\u81f3\u5c11\u5305\u542b $t$ \u4e2a\u5173\u952e\u5b57\uff0c\u501f\u4f4d \u5426\u5219\uff0c\u5408\u5e76\uff0c\u5e76\u9012\u5f52\u5411\u4e0a\u5224\u65ad \u548c\u63d2\u5165\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u5982\u679c\u8981\u907f\u514d\u56de\u6eaf\uff0c\u5c31\u8981\u5728\u5220\u9664\u8def\u5f84\u4e0a\u6cbf\u9014\u5904\u7406\u8fbe\u5230\u4e0b\u754c\u7684\u7ed3\u70b9 \u6cbf\u8def\u5f84\u4e0b\u79fb\u524d\u5224\u65ad\u8be5\u5b50\u7ed3\u70b9\u662f\u5426 $x.c_i.n=t-1$\uff0c\u82e5\u662f\u5219\u8fdb\u884c\u5982\u4e0b\u53d8\u6362 \u82e5\u5220\u9664\u540e\u5bfc\u81f4 $n< t-1$\uff0c\u4e14\u67d0\u4e2a\u76f8\u90bb\u5144\u5f1f\u81f3\u5c11\u5305\u542b $t$ \u4e2a\u5173\u952e\u5b57\uff0c\u501f\u4f4d \u5426\u5219\uff0c\u5408\u5e76 \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u975e\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u9012\u5f52\u5220\u9664\u524d\u9a71/\u540e\u7ee7\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u989d\u5916\uff1a \u5982\u679c $k$ \u7684\u5de6\u53f3\u5b69\u5b50\u90fd\u53ea\u6709 $t-1$ \u4e2a\u5173\u952e\u5b57\uff0c\u5219\u5c06\u8fd9\u4e24\u4e2a\u5b69\u5b50\u4e0e $k$ \u5408\u5e76\u4f5c\u4e3a\u65b0\u7684\u5de6\u5b69\u5b50\uff0c\u7136\u540e\u5728\u65b0\u7684\u5b69\u5b50\u4e2d\u9012\u5f52\u5220\u9664 $k$ \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u76f4\u63a5\u4ece $x$ \u4e2d\u5220\u9664 $k$ 3. B + \u6811 (1). B + \u6811\u7684\u5b9a\u4e49 B + \u6811\u662f B \u6811\u7684\u53d8\u4f53\uff1a \u5185\u7ed3\u70b9\u53ea\u50a8\u5b58\u7d22\u5f15\uff0c\u53f6\u7ed3\u70b9\u5b58\u50a8\u7d22\u5f15\u548c\u6570\u636e\uff0c\u4e14\u53f6\u7ed3\u70b9\u6784\u6210\u4e00\u5f20\u6709\u5e8f\u94fe\u8868 \u7531\u4e8e\u5185\u7ed3\u70b9\u53ea\u5b58\u50a8\u7d22\u5f15\uff0c\u5176\u6570\u91cf\u53ef\u4ee5\u63d0\u5347\uff1b\u82e5\u4e00\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u78c1\u76d8\u7684\u4e00\u9875\uff0c B + \u6811\u7684\u9ad8\u5ea6\u66f4\u5c0f B + \u6811\u6bcf\u4e2a\u7d22\u5f15\u7684\u67e5\u8be2\u6548\u7387\u76f8\u540c\uff0c\u800c B \u6811\u4e0e\u4e4b\u76f8\u6bd4\u4e0d\u591f\u7a33\u5b9a (2). \u63d2\u5165\u3001\u5220\u9664 B + \u6811\u7684\u63d2\u5165\u5220\u9664\u76f8\u6bd4 B \u6811\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a \u63d2\u5165\uff1a\u53f6\u7ed3\u70b9\u5206\u88c2\u65f6\uff0c\u5c06\u4e0a\u79fb\u7684\u5173\u952e\u5b57\u4fdd\u5b58\u5728\u5b50\u7ed3\u70b9\u4e2d\uff0c\u5176\u4ed6\u7ed3\u70b9\u5206\u88c2\u8fc7\u7a0b\u76f8\u540c \u901a\u5e38\u4e0a\u79fb\u7684\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u6761\u76ee\u5b58\u653e\u5728\u53f3\u5b69\u5b50\u4e2d\uff0c\u5b9e\u73b0\u5de6\u95ed\u53f3\u5f00 \u5220\u9664\uff1a\u53f6\u7ed3\u70b9\u501f\u4f4d\u65f6\uff0c\u76f4\u63a5\u501f\u6765\u5144\u5f1f\u7684\u8bb0\u5f55\uff0c\u5e76\u4fee\u6539 $k_i$\uff1b\u53f6\u7ed3\u70b9\u5408\u5e76\u65f6\uff0c\u76f4\u63a5\u5220\u9664\u7236\u7ed3\u70b9\u7684 $k_i$\uff0c\u7136\u540e\u4e24\u4e2a\u5144\u5f1f\u95f4\u5408\u5e76 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u9636\u6570\u5b9a\u4e49\uff0c\u9636\u6570\u5373\u7ed3\u70b9\u7684\u6700\u5927\u5ea6\uff0c\u82e5\u8bbe\u5176\u4e3a $n$\uff0c\u5219\u975e\u53f6\u7ed3\u70b9\u7684\u5ea6\u7684\u8303\u56f4\u5728\u95ed\u533a\u95f4 $\\lceil n/2 \\rceil$ \u5230 $n$ \u5185 \u21a9 \u8fd9\u91cc\u662f\u501f\u4f4d\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u4e5f\u53ef\u4ee5\u5408\u5e76\u4f18\u5148\u7ea7\u66f4\u9ad8 \u21a9","title":"5.B-tree"},{"location":"3-DataStructures/3.5/#1-b","text":"B \u6811\u4e5f\u662f\u5bf9 BST \u7684\u4e00\u79cd\u63a8\u5e7f\u3002\u548c\u7ea2\u9ed1\u6811\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u662f\u4e00\u79cd\u9488\u5bf9\u78c1\u76d8\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u5206\u652f\u56e0\u5b50\u4e0d\u5c0f\u4e8e 2 \uff0c\u5176\u503c\u7531\u78c1\u76d8\u5355\u5143\u7684\u7279\u6027\u51b3\u5b9a\u3002","title":"1. B \u6811\u53ca\u5176\u6027\u8d28"},{"location":"3-DataStructures/3.5/#1","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u5b58\u901a\u5e38\u7531\u7845\u82af\u7247\u6784\u6210\uff0c\u8f85\u5b58\u57fa\u4e8e\u78c1\u76d8\u3002\u53f3\u56fe\u4e3a\u4e00\u4e2a\u5178\u578b\u7684\u78c1\u76d8\u9a71\u52a8\u5668\uff0c\u5b83\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u76d8\u7247\u6784\u6210 ( platter )\uff0c\u76d8\u7247\u4ee5\u56fa\u5b9a\u7684\u901f\u5ea6\u7ed5\u4e3b\u8f74 ( spindle ) \u65cb\u8f6c\u3002\u9a71\u52a8\u5668\u901a\u8fc7\u78c1\u81c2\u672b\u5c3e\u7684\u78c1\u5934\u8bfb\u5199\u76d8\u7247\uff0c\u78c1\u5934\u53ef\u4ee5\u671d\u4e3b\u8f74\u79fb\u8fd1\u6216\u79fb\u8fdc\u3002\u7531\u4e8e\u9700\u8981\u65cb\u8f6c\u76d8\u7247\u548c\u79fb\u52a8\u78c1\u81c2\uff0c\u78c1\u76d8\u7684\u5b58\u53d6\u901f\u5ea6\u901a\u5e38\u6bd4\u7845\u82af\u7247\u4f4e 5 \u4e2a\u6570\u91cf\u7ea7\u3002 \u2003\u4e3a\u5e73\u644a\u673a\u68b0\u8fd0\u52a8\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u78c1\u76d8\u4e00\u6b21\u4f1a\u5b58\u53d6\u591a\u4e2a\u9875\u9762 ( page )\uff0c\u4e00\u9875\u7684\u957f\u5ea6\u901a\u5e38\u4e3a $2^{11}$~$2^{14}$ \u4e2a\u5b57\u8282\u3002\u4e00\u65e6\u78c1\u5934\u6b63\u786e\u5b9a\u4f4d\uff0c\u76d8\u7247\u4e5f\u65cb\u8f6c\u5230\u9875\u9762\u5f00\u5934\u4f4d\u7f6e\uff0c\u5269\u4e0b\u7684\u8bfb\u5199\u8fc7\u7a0b\u5c31\u5b8c\u5168\u7535\u5b50\u5316\u4e86\u3002 \u2003\u8003\u8651\u9700\u8981\u5728\u78c1\u76d8\u4e0a\u6301\u4e45\u5316\u5b58\u50a8\u5927\u91cf\u7684 $(\\mathit{key,\\ value})$ \u7684\u573a\u666f\uff0c\u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u4fdd\u8bc1\u6548\u7387\u3002\u5982\u679c\u4f7f\u7528 Hash \u8868\u5219\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898\uff1a \u5f00\u9500\u5927\u3001\u6269\u5c55\u6027\u5dee\uff1a\u4e3a\u4e86\u4fdd\u6301\u54c8\u5e0c\u8868\u7684\u6548\u7387\u9700\u8981\u66f4\u5927\u7684\u6570\u7ec4\uff0c\u63a5\u8fd1\u586b\u6ee1\u540e\u8fd8\u9700\u8981\u8f6c\u79fb\u6570\u636e\u81f3\u66f4\u5927\u7684\u54c8\u5e0c\u8868 \u4e0d\u652f\u6301\u6709\u5e8f\u904d\u5386\u3001\u8303\u56f4\u67e5\u8be2 \u5982\u679c\u6876\u4e2d\u7684\u5143\u7d20\u8fc7\u591a\u5bf9\u78c1\u76d8 IO (\u673a\u68b0\u8fd0\u52a8\u7684\u5f00\u9500) \u4e0d\u53cb\u597d \u82e5\u4f7f\u7528\u7ea2\u9ed1\u6811\uff0c\u7531\u4e8e\u6bcf\u8bfb\u53d6\u4e00\u4e2a\u7ed3\u70b9\u5c31\u5f88\u53ef\u80fd\u5bfc\u81f4\u78c1\u76d8\u7684\u673a\u68b0\u8fd0\u52a8\uff0c\u5c3d\u7ba1\u5728 CPU \u8fd0\u884c\u65f6\u95f4\u4e0a\u6709 $\\log$ \u6548\u7387\uff0c\u4f46\u5728\u78c1\u76d8 IO \u4e0a\u5f00\u9500\u5f88\u5927\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u727a\u7272\u4e00\u90e8\u5206\u67e5\u627e\u7684\u6548\u7387\uff0c\u5b9e\u73b0\u4e00\u79cd\u591a\u8def\u7684\u5e73\u8861\u6811","title":"(1). \u8f85\u5b58\u7684\u7ed3\u6784"},{"location":"3-DataStructures/3.5/#2-b","text":"\u4e00\u68f5 B \u6811\u662f\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u6709\u6839\u6811\uff1a \u6bcf\u4e2a\u7ed3\u70b9 $x$ \u5177\u6709\u4ee5\u4e0b\u5c5e\u6027 $x.n$ : \u5b58\u50a8\u5728\u7ed3\u70b9 $x$ \u4e2d\u7684\u5173\u952e\u5b57\u4e2a\u6570 $\\mathit{x.key_1,\\ ...\\ ,x.key_n}$ : \u5173\u952e\u5b57\u672c\u8eab\uff0c\u4ee5\u975e\u964d\u5e8f\u5b58\u653e\uff0c\u5373 $\\mathit{x.key_1\\leq\\ ...\\ \\leq x.key_n}$\u3002\u5e76\u4e14\uff0c\u5185\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u5b58\u50a8\u5728\u5185\u7ed3\u70b9\u4e2d $\\mathit{x.leaf}$ : \u5e03\u5c14\u503c\uff0c\u8868\u793a $x$ \u662f\u5426\u4e3a\u53f6\u7ed3\u70b9 \u6bcf\u4e2a\u5185\u90e8\u8282\u70b9 $x$ \u5305\u542b $n+1$ \u4e2a\u6307\u5411\u5b50\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u4e14 $\\mathit{x.key_i}$ \u5bf9\u5404\u5b50\u6811\u7684\u5173\u952e\u5b57\u8303\u56f4\u52a0\u4ee5\u5206\u5272\uff0c\u5373 $k_1\\leq\\mathit{x.key_1}\\leq k_2\\leq \\mathit{x.key_2}\\ ...$ \u6bcf\u4e2a\u53f6\u7ed3\u70b9\u5177\u6709\u76f8\u540c\u6df1\u5ea6\uff0c\u5373\u6811\u7684\u9ad8\u5ea6 $h$ \u6bcf\u68f5 B \u6811\u5177\u6709\u4e00\u4e2a\u6700\u5c0f\u5ea6\u6570 $t$ 1 \u9664\u4e86\u6839\u7ed3\u70b9\u5916\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u5c11\u6709 $t-1$ \u4e2a\u5173\u952e\u5b57\uff0c\u76f8\u5e94\u5730\uff0c\u5185\u90e8\u8282\u70b9\u81f3\u5c11\u6709 $t$ \u4e2a\u5b69\u5b50 \u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u6709 $2t-1$ \u4e2a\u5173\u952e\u5b57\uff0c\u76f8\u5e94\u5730\uff0c\u5185\u90e8\u8282\u70b9\u81f3\u591a\u6709 $2t$ \u4e2a\u5b69\u5b50","title":"(2). B \u6811\u7684\u5b9a\u4e49"},{"location":"3-DataStructures/3.5/#3-b","text":"\u4ee5\u6839\u7ed3\u70b9\u4e3a\u6df1\u5ea6 0 \uff0c\u4e00\u68f5 B \u6811\u5728\u6df1\u5ea6 $h\\ (h > 0)$ \u7684\u4e00\u5c42\u81f3\u5c11\u6709 $2t^{h-1}$ \u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5173\u952e\u5b57\u7684\u4e2a\u6570 $n$\uff0c\u6709 $\\displaystyle n\\geq 1+(t-1)\\sum_{i=1}^h2t^{i-1}=2t^h-1$ \u5373\u53ef\u5f97\u5230 $h\\leq\\log_t (n+1)/2$\u3002\u4e0e\u540c\u4e3a\u5e73\u8861\u6811\u7684\u7ea2\u9ed1\u6811\u76f8\u6bd4\uff0c B \u6811\u7684\u5e95\u6570\u66f4\u5927\uff0c\u56e0\u6b64\u9ad8\u5ea6\u66f4\u4f4e\uff0c\u4ece\u800c\u5728\u5404\u79cd\u6811\u64cd\u4f5c\u4e2d\u51cf\u5c11\u4e86\u8981\u68c0\u67e5\u7684\u7ed3\u70b9\u6570\uff0c\u907f\u514d\u4e86\u5927\u91cf\u7684\u78c1\u76d8\u8bbf\u95ee\u3002","title":"(3). B \u6811\u7684\u9ad8\u5ea6"},{"location":"3-DataStructures/3.5/#2-b_1","text":"\u5728 B \u6811\u7684\u64cd\u4f5c\u4e2d\uff0c\u59cb\u7ec8\u4fdd\u6301\u5982\u4e0b\u7ea6\u5b9a\uff1a \u6839\u7ed3\u70b9\u59cb\u7ec8\u56fa\u5b9a\u5728\u4e3b\u5b58\u4e2d\uff0c\u5373\u65e0\u9700\u5bf9\u6839\u505a DISK-READ \u64cd\u4f5c\uff0c\u4f46\u4fee\u6539\u6839\u7ed3\u70b9\u9700\u8981\u4e00\u6b21 DISK-WRITE \u4efb\u4f55\u88ab\u5f53\u505a\u53c2\u6570\u7684\u7ed3\u70b9\u5728\u88ab\u4f20\u9012\u4e4b\u524d\uff0c\u90fd\u8981\u505a\u4e00\u6b21 DISK-READ","title":"2. B \u6811\u7684\u64cd\u4f5c"},{"location":"3-DataStructures/3.5/#1_1","text":"B-TREE-SEARCH( x, k ) i = 1 while i \u2264 x.n and k > x.key i i = i + 1 if i \u2264 x.n and k == x.key i return ( x, i ) else if x.leaf return NIL else DISK-READ( x, c i ) return B-TREE-SEARCH( x, c i , k ) \u8bbf\u95ee\u78c1\u76d8\u9875\u9762\u6570\u4e3a $O(h)=O(\\log_t n)$\uff0c\u82b1\u8d39\u65f6\u95f4 $O(tn)$","title":"(1). \u641c\u7d22"},{"location":"3-DataStructures/3.5/#2","text":"\u8fc7\u7a0b B-TREE-SPLIT-CHILD \u7684\u8f93\u5165\u662f\u4e00\u4e2a\u975e\u6ee1\u7684\u5185\u7ed3\u70b9 $x$ \u548c\u4e00\u4e2a\u6ee1\u5b50\u7ed3\u70b9 $x.c_i$ \u7684\u4e0b\u6807 $i$\u3002 $x.c_i$ \u6839\u636e\u4e2d\u95f4\u5173\u952e\u5b57\u5206\u88c2\u6210\u4e24\u4e2a\u7ed3\u70b9\uff0c\u5176\u4e2d\u95f4\u5173\u952e\u5b57\u4e0a\u79fb\u5230 $x$ \u7684\u76f8\u5e94\u4f4d\u7f6e\u3002 \u6839\u7ed3\u70b9\u5206\u88c2\u662f\u589e\u52a0\u6811\u9ad8\u7684\u552f\u4e00\u9014\u5f84\u3002","title":"(2). \u5206\u88c2\u7ed3\u70b9"},{"location":"3-DataStructures/3.5/#3","text":"\u6cbf\u7740\u63d2\u5165\u8def\u5f84\u627e\u5230\u76ee\u6807\u53f6\u5b50\u7ed3\u70b9\u540e\uff0c\u901a\u8fc7\u5206\u88c2\u7ed3\u70b9\u4fdd\u8bc1\u5173\u952e\u5b57\u7684\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u9650\u5236\u3002\u5177\u4f53\u53ef\u6709\u4ee5\u4e0b\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a \u9047\u5230\u6ee1\u7ed3\u70b9\u65f6\u518d\u5206\u88c2\uff1a\u63d2\u5165\u5230\u76ee\u6807\u4f4d\u7f6e\u540e\uff0c\u5982\u679c\u53d1\u751f\u5206\u88c2\uff0c\u5176\u7236\u7ed3\u70b9\u4f1a\u589e\u52a0\u4e00\u4e2a $key$\uff0c\u56e0\u6b64\u9012\u5f52\u5411\u4e0a\u5224\u65ad \u6cbf\u9014\u5206\u88c2\u6ee1\u7ed3\u70b9\uff1a\u4e3a\u4e86\u907f\u514d\u5411\u4e0a\u56de\u6eaf\uff0c\u9700\u8981\u4fdd\u8bc1\u627e\u5230\u76ee\u6807\u7ed3\u70b9\u65f6\uff0c\u5b83\u7684\u7236\u7ed3\u70b9\u672a\u6ee1\u3002\u56e0\u6b64\uff0c\u5728\u6cbf\u63d2\u5165\u8def\u5f84\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u8981\u9047\u5230\u4e00\u4e2a\u6ee1\u7ed3\u70b9\u5c31\u5206\u88c2\u5b83\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u90fd\u4e00\u5b9a\u672a\u6ee1","title":"(3). \u63d2\u5165"},{"location":"3-DataStructures/3.5/#4","text":"\u8003\u8651\u4ece\u7ed3\u70b9 $x$ \u5904\u5220\u9664\u4e86\u4e00\u4e2a $\\it key$\uff0c\u5bfc\u81f4 $x.n=t-2$\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u7ef4\u62a4 $x.n\\geq t$ \u501f\u4f4d\uff1a\u4ece\u5de6\u5144\u5f1f $x_l$ \u6216\u53f3\u5144\u5f1f $x_r$ \u501f\u6765\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u8981\u6c42 $x_{\\mathit{brother}}.n\\geq t$ $x_l$ \u6700\u53f3\u5173\u952e\u5b57\u4e0a\u79fb\uff0c$k_x$ \u4e0b\u79fb\u81f3 $x$ \u6700\u5de6\u5904\uff0c\u540c\u65f6 $x_l$ \u7684\u6700\u53f3\u6307\u9488\u6210\u4e3a $x$ \u7684\u6700\u5de6\u6307\u9488 $x_r$ \u6700\u5de6\u5173\u952e\u5b57\u4e0a\u79fb\uff0c$k_x$ \u4e0b\u79fb\u81f3 $x$ \u6700\u53f3\u5904\uff0c\u540c\u65f6 $x_l$ \u7684\u6700\u5de6\u6307\u9488\u6210\u4e3a $x$ \u7684\u6700\u53f3\u6307\u9488 \u5408\u5e76\uff1a\u628a $x_{bro}$\u3001$x$ \u4ee5\u53ca $k_x$ \u5408\u5e76\uff0c\u6307\u9488\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u8981\u6c42 $x_{\\mathit{brother}}.n\\leq t$ $x_{\\mathit{brother}}.n + t - 2 + 1\\leq 2t-1$ \u5408\u5e76\u4f1a\u5bfc\u81f4 $x._\\mathit{parent}$ \u51cf\u5c11\u4e00\u4e2a $\\it key$ \u4e8c\u8005\u5747\u53ef\u4ee5\u7528\u4e8e\u4fee\u590d\u5220\u9664\u5bfc\u81f4\u7684 B \u6811\u6027\u8d28\u7684\u7834\u574f","title":"(4). \u501f\u4f4d\u4e0e\u5408\u5e76"},{"location":"3-DataStructures/3.5/#5","text":"\u76f4\u5230\u5220\u9664\u5bfc\u81f4 $n< t-1$ \u518d\u505a\u5904\u7406\uff0c\u5e76\u4e0d\u65ad\u5411\u4e0a\u56de\u6eaf\u5224\u65ad\uff1a \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u975e\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u5219\u5411\u5de6/\u53f3\u627e\u5230 $k$ \u7684\u524d\u9a71/\u540e\u7ee7\uff0c\u7528\u4e4b\u4ee3\u66ff $k$\uff0c\u7136\u540e\u9012\u5f52\u5220\u9664\u8fd9\u4e2a\u524d\u9a71/\u540e\u7ee7 \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u4ece $x$ \u4e2d\u5220\u9664 $k$ 2 \u82e5\u5220\u9664\u540e\u5bfc\u81f4 $n< t-1$\uff0c\u4e14\u67d0\u4e2a\u76f8\u90bb\u5144\u5f1f\u81f3\u5c11\u5305\u542b $t$ \u4e2a\u5173\u952e\u5b57\uff0c\u501f\u4f4d \u5426\u5219\uff0c\u5408\u5e76\uff0c\u5e76\u9012\u5f52\u5411\u4e0a\u5224\u65ad \u548c\u63d2\u5165\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u5982\u679c\u8981\u907f\u514d\u56de\u6eaf\uff0c\u5c31\u8981\u5728\u5220\u9664\u8def\u5f84\u4e0a\u6cbf\u9014\u5904\u7406\u8fbe\u5230\u4e0b\u754c\u7684\u7ed3\u70b9 \u6cbf\u8def\u5f84\u4e0b\u79fb\u524d\u5224\u65ad\u8be5\u5b50\u7ed3\u70b9\u662f\u5426 $x.c_i.n=t-1$\uff0c\u82e5\u662f\u5219\u8fdb\u884c\u5982\u4e0b\u53d8\u6362 \u82e5\u5220\u9664\u540e\u5bfc\u81f4 $n< t-1$\uff0c\u4e14\u67d0\u4e2a\u76f8\u90bb\u5144\u5f1f\u81f3\u5c11\u5305\u542b $t$ \u4e2a\u5173\u952e\u5b57\uff0c\u501f\u4f4d \u5426\u5219\uff0c\u5408\u5e76 \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u975e\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u9012\u5f52\u5220\u9664\u524d\u9a71/\u540e\u7ee7\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u989d\u5916\uff1a \u5982\u679c $k$ \u7684\u5de6\u53f3\u5b69\u5b50\u90fd\u53ea\u6709 $t-1$ \u4e2a\u5173\u952e\u5b57\uff0c\u5219\u5c06\u8fd9\u4e24\u4e2a\u5b69\u5b50\u4e0e $k$ \u5408\u5e76\u4f5c\u4e3a\u65b0\u7684\u5de6\u5b69\u5b50\uff0c\u7136\u540e\u5728\u65b0\u7684\u5b69\u5b50\u4e2d\u9012\u5f52\u5220\u9664 $k$ \u5982\u679c\u5f85\u5220\u5173\u952e\u5b57 $k$ \u5728\u53f6\u7ed3\u70b9 $x$ \u4e2d\uff0c\u76f4\u63a5\u4ece $x$ \u4e2d\u5220\u9664 $k$","title":"(5). \u5220\u9664"},{"location":"3-DataStructures/3.5/#3-b_1","text":"","title":"3. B+ \u6811"},{"location":"3-DataStructures/3.5/#1-b_1","text":"B + \u6811\u662f B \u6811\u7684\u53d8\u4f53\uff1a \u5185\u7ed3\u70b9\u53ea\u50a8\u5b58\u7d22\u5f15\uff0c\u53f6\u7ed3\u70b9\u5b58\u50a8\u7d22\u5f15\u548c\u6570\u636e\uff0c\u4e14\u53f6\u7ed3\u70b9\u6784\u6210\u4e00\u5f20\u6709\u5e8f\u94fe\u8868 \u7531\u4e8e\u5185\u7ed3\u70b9\u53ea\u5b58\u50a8\u7d22\u5f15\uff0c\u5176\u6570\u91cf\u53ef\u4ee5\u63d0\u5347\uff1b\u82e5\u4e00\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u78c1\u76d8\u7684\u4e00\u9875\uff0c B + \u6811\u7684\u9ad8\u5ea6\u66f4\u5c0f B + \u6811\u6bcf\u4e2a\u7d22\u5f15\u7684\u67e5\u8be2\u6548\u7387\u76f8\u540c\uff0c\u800c B \u6811\u4e0e\u4e4b\u76f8\u6bd4\u4e0d\u591f\u7a33\u5b9a","title":"(1). B+ \u6811\u7684\u5b9a\u4e49"},{"location":"3-DataStructures/3.5/#2_1","text":"B + \u6811\u7684\u63d2\u5165\u5220\u9664\u76f8\u6bd4 B \u6811\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a \u63d2\u5165\uff1a\u53f6\u7ed3\u70b9\u5206\u88c2\u65f6\uff0c\u5c06\u4e0a\u79fb\u7684\u5173\u952e\u5b57\u4fdd\u5b58\u5728\u5b50\u7ed3\u70b9\u4e2d\uff0c\u5176\u4ed6\u7ed3\u70b9\u5206\u88c2\u8fc7\u7a0b\u76f8\u540c \u901a\u5e38\u4e0a\u79fb\u7684\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u6761\u76ee\u5b58\u653e\u5728\u53f3\u5b69\u5b50\u4e2d\uff0c\u5b9e\u73b0\u5de6\u95ed\u53f3\u5f00 \u5220\u9664\uff1a\u53f6\u7ed3\u70b9\u501f\u4f4d\u65f6\uff0c\u76f4\u63a5\u501f\u6765\u5144\u5f1f\u7684\u8bb0\u5f55\uff0c\u5e76\u4fee\u6539 $k_i$\uff1b\u53f6\u7ed3\u70b9\u5408\u5e76\u65f6\uff0c\u76f4\u63a5\u5220\u9664\u7236\u7ed3\u70b9\u7684 $k_i$\uff0c\u7136\u540e\u4e24\u4e2a\u5144\u5f1f\u95f4\u5408\u5e76 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u9636\u6570\u5b9a\u4e49\uff0c\u9636\u6570\u5373\u7ed3\u70b9\u7684\u6700\u5927\u5ea6\uff0c\u82e5\u8bbe\u5176\u4e3a $n$\uff0c\u5219\u975e\u53f6\u7ed3\u70b9\u7684\u5ea6\u7684\u8303\u56f4\u5728\u95ed\u533a\u95f4 $\\lceil n/2 \\rceil$ \u5230 $n$ \u5185 \u21a9 \u8fd9\u91cc\u662f\u501f\u4f4d\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u4e5f\u53ef\u4ee5\u5408\u5e76\u4f18\u5148\u7ea7\u66f4\u9ad8 \u21a9","title":"(2). \u63d2\u5165\u3001\u5220\u9664"},{"location":"3-DataStructures/3.6/","text":"1. \u7ea2\u9ed1\u6811\u7684\u6269\u5f20 ( Augmenting ) \u2003\u5bf9\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u6269\u5c55\u4f7f\u4e4b\u652f\u6301\u4e00\u4e9b\u9644\u52a0\u529f\u80fd\uff0c\u5728\u7b97\u6cd5\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u662f\u5341\u5206\u5e38\u89c1\u7684\u3002\u5f53\u628a\u7ea2\u9ed1\u6811\u4f5c\u4e3a\u57fa\u7840\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6269\u5f20\u65f6\uff1a \u5b9a\u7406\uff1a\u8bbe $f$ \u662f\u5305\u542b $n$ \u4e2a\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811 $T$ \u8981\u6269\u5f20\u7684\u5c5e\u6027\uff0c\u5e76\u4e14\u5047\u8bbe\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9 $x$\uff0c$f$ \u7684\u503c\u4ec5\u4f9d\u8d56\u4e8e $x$ \u672c\u8eab\u3001$x.left$ \u4ee5\u53ca $x.right$ \u7684\u4fe1\u606f (\u4e5f\u53ef\u4ee5\u5305\u62ec $x.left.p$ \u548c $x.right.p$)\uff0c\u90a3\u4e48\u53ef\u4ee5\u505a\u5230\u5728\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u671f\u95f4\u5bf9 $T$ \u7684\u6240\u6709\u503c $f$ \u8fdb\u884c\u7ef4\u62a4\uff0c\u5e76\u4e14\u4e0d\u5f71\u54cd\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684 $O(lgn)$ \u7684\u6e10\u8fdb\u6027\u80fd\u3002 \u6b64\u5b9a\u7406\u6210\u7acb\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u6811\u4e2d\u67d0\u7ed3\u70b9 $x$ \u7684 $f$ \u5c5e\u6027\u53d8\u52a8\u53ea\u4f1a\u5f71\u54cd\u5230 $x$ \u7684\u7236\u7ed3\u70b9\uff0c\u4fee\u6539 $x.f$ \u53ea\u9700\u8981\u66f4\u65b0 $x.p.f$\u3002\u4ee5\u63d2\u5165\u64cd\u4f5c\u4e3a\u4f8b\uff0c\u7b2c\u4e00\u9636\u6bb5\u63d2\u5165\u7ed3\u70b9\uff0c\u63d2\u5165\u540e $x.f$ \u7684\u503c\u6cbf\u6811\u5411\u4e0a\u4f20\u64ad\uff0c\u9700\u8981\u65f6\u95f4 $O(lgn)$\uff1b\u7b2c\u4e8c\u9636\u6bb5\u8fdb\u884c\u65cb\u8f6c\uff0c\u63d2\u5165\u64cd\u4f5c\u81f3\u591a\u8fdb\u884c\u4e24\u6b21\u65cb\u8f6c\uff0c\u6bcf\u6b21\u53ea\u6709\u4e24\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u53d1\u751f\u53d8\u5316\uff0c\u5176\u66f4\u65b0\u5c5e\u6027\u4e5f\u9700\u8981\u65f6\u95f4 $O(lgn)$\u3002 2. \u533a\u95f4\u6811 ( Interval Tree ) (1). \u533a\u95f4\u7684\u6027\u8d28 \u2003\u8bbe\u5bf9\u8c61 $i$ \u662f\u4e00\u4e2a\u533a\u95f4 $[t_1,\\ t_2]$\uff0c\u5b83\u5305\u62ec\u4e24\u4e2a\u7aef\u70b9 ( endpoint ) \u5c5e\u6027 $low$ \u548c $high$\u3002\u5bf9\u4efb\u610f\u4e24\u4e2a\u533a\u95f4 $i$ \u548c $i'$ \uff0c\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u4e4b\u4e00\u6210\u7acb\uff1a (a). $i$ \u548c $i'$ \u91cd\u53e0 ( overlap )\uff0c\u5373\u6709 $i.high\\leq i'.low\\ \\mathsf{and}\\ i'.high\\leq i.low$\uff1b (b). $i$ \u5728 $i'$ \u5de6\u8fb9\uff0c\u5373\u6709 $i.high < i'.low$\uff1b (c). $i$ \u5728 $i'$ \u53f3\u8fb9\uff0c\u5373\u6709 $i'.high < i.low$\u3002 (2). \u6269\u5f20\u7684\u5c5e\u6027 \u2003\u533a\u95f4\u6811\u7684\u7ed3\u70b9\u5305\u62ec\u4e09\u4e2a\u5c5e\u6027\uff0c\u5176\u4e2d\u4ee5\u533a\u95f4\u7684\u4f4e\u7aef\u70b9 $x.low$ \u4f5c\u4e3a\u7ea2\u9ed1\u6811\u7684\u5173\u952e\u5b57\uff1b\u9664\u4e24\u4e2a\u7aef\u70b9\u5c5e\u6027\u5916\uff0c\u8fd8\u5305\u62ec\u5c5e\u6027 $x.max$\uff0c\u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\u7684\u533a\u95f4\u7684\u7aef\u70b9\u7684\u6700\u5927\u503c\u3002\u56e0\u6b64\u6709\uff1a $$ x.max\\ = \\ \\mathrm{max}(x.high,\\ x.left.max,\\ x.right.max) $$ \u56e0\u6b64\uff0c\u6839\u636e\u4e0a\u9762\u7684\u5b9a\u7406\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u4e3a $O(lgn)$\uff0c\u5e76\u4e14\uff0c\u4e00\u6b21\u65cb\u8f6c\u66f4\u65b0 $max$ \u503c\u53ea\u9700\u8981 $O(1)$ \u7684\u4ee3\u4ef7\u3002 (3). \u67e5\u8be2\u64cd\u4f5c INTERVAL-SEARCH(T, i) \uff1a\u627e\u51fa\u6811 T \u4e2d\u4e0e i \u91cd\u53e0\u7684\u90a3\u4e2a\u7ed3\u70b9\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u8fd4\u56de T.nil \u3002 code: INTERVAL-SEARCH Node * IntervalSearch ( IntTree * tree , int low , int high ) { Node * x = tree -> root ; // condition: x \u2260 T.nil and i does not overlap x.int while ( x != tree -> nil && ! ( low <= x -> high && x -> low <= high )) { if ( x -> left != tree -> nil && x -> left -> max >= low ) x = x -> left ; else x = x -> right ; } return x ; } \u6b64\u4ee3\u7801\u7684\u4e3b\u8981\u601d\u60f3\u4e3a\uff0c\u82e5\u5f53\u524d\u9047\u5230\u7684\u7ed3\u70b9\u672a\u8986\u76d6\u6307\u5b9a\u533a\u95f4 i \uff0c\u5219\u67e5\u8be2\u4e00\u5b9a\u4f1a\u6309\u5b89\u5168\u7684\u65b9\u5411\u8fdb\u884c\uff1a \u5982\u679c x = x->left \u672a\u6267\u884c\uff0c\u5219\u4ee3\u8868\u5de6\u5b50\u6811\u4e2d\u4e00\u5b9a\u6ca1\u6709\u89e3\uff1b \u5982\u679c x = x->left \u6267\u884c\u4e14\u5de6\u5b50\u6811\u4e2d\u6ca1\u6709\u89e3\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u4e2d\u4e5f\u4e00\u5b9a\u6ca1\u6709\u89e3\u3002 \u7b2c\u4e8c\u70b9\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u82e5\u5de6\u5b50\u6811\u65e0\u89e3\uff0c\u5219\u5de6\u5b50\u6811\u76f8\u5e94\u533a\u95f4\u5927\u4e8e\u76ee\u7684\u533a\u95f4\uff0c\u7531\u4e8e\u5173\u952e\u5b57\u6309 $low$ \u6392\u5e8f\uff0c\u53f3\u5b50\u6811\u4e2d\u4e5f\u65e0\u89e3\u3002","title":"6.Interval trees"},{"location":"3-DataStructures/3.6/#1-augmenting","text":"\u5bf9\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u6269\u5c55\u4f7f\u4e4b\u652f\u6301\u4e00\u4e9b\u9644\u52a0\u529f\u80fd\uff0c\u5728\u7b97\u6cd5\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u662f\u5341\u5206\u5e38\u89c1\u7684\u3002\u5f53\u628a\u7ea2\u9ed1\u6811\u4f5c\u4e3a\u57fa\u7840\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6269\u5f20\u65f6\uff1a \u5b9a\u7406\uff1a\u8bbe $f$ \u662f\u5305\u542b $n$ \u4e2a\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811 $T$ \u8981\u6269\u5f20\u7684\u5c5e\u6027\uff0c\u5e76\u4e14\u5047\u8bbe\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9 $x$\uff0c$f$ \u7684\u503c\u4ec5\u4f9d\u8d56\u4e8e $x$ \u672c\u8eab\u3001$x.left$ \u4ee5\u53ca $x.right$ \u7684\u4fe1\u606f (\u4e5f\u53ef\u4ee5\u5305\u62ec $x.left.p$ \u548c $x.right.p$)\uff0c\u90a3\u4e48\u53ef\u4ee5\u505a\u5230\u5728\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u671f\u95f4\u5bf9 $T$ \u7684\u6240\u6709\u503c $f$ \u8fdb\u884c\u7ef4\u62a4\uff0c\u5e76\u4e14\u4e0d\u5f71\u54cd\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684 $O(lgn)$ \u7684\u6e10\u8fdb\u6027\u80fd\u3002 \u6b64\u5b9a\u7406\u6210\u7acb\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u6811\u4e2d\u67d0\u7ed3\u70b9 $x$ \u7684 $f$ \u5c5e\u6027\u53d8\u52a8\u53ea\u4f1a\u5f71\u54cd\u5230 $x$ \u7684\u7236\u7ed3\u70b9\uff0c\u4fee\u6539 $x.f$ \u53ea\u9700\u8981\u66f4\u65b0 $x.p.f$\u3002\u4ee5\u63d2\u5165\u64cd\u4f5c\u4e3a\u4f8b\uff0c\u7b2c\u4e00\u9636\u6bb5\u63d2\u5165\u7ed3\u70b9\uff0c\u63d2\u5165\u540e $x.f$ \u7684\u503c\u6cbf\u6811\u5411\u4e0a\u4f20\u64ad\uff0c\u9700\u8981\u65f6\u95f4 $O(lgn)$\uff1b\u7b2c\u4e8c\u9636\u6bb5\u8fdb\u884c\u65cb\u8f6c\uff0c\u63d2\u5165\u64cd\u4f5c\u81f3\u591a\u8fdb\u884c\u4e24\u6b21\u65cb\u8f6c\uff0c\u6bcf\u6b21\u53ea\u6709\u4e24\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u53d1\u751f\u53d8\u5316\uff0c\u5176\u66f4\u65b0\u5c5e\u6027\u4e5f\u9700\u8981\u65f6\u95f4 $O(lgn)$\u3002","title":"1. \u7ea2\u9ed1\u6811\u7684\u6269\u5f20 (Augmenting)"},{"location":"3-DataStructures/3.6/#2-interval-tree","text":"","title":"2. \u533a\u95f4\u6811  (Interval Tree)"},{"location":"3-DataStructures/3.6/#1","text":"\u8bbe\u5bf9\u8c61 $i$ \u662f\u4e00\u4e2a\u533a\u95f4 $[t_1,\\ t_2]$\uff0c\u5b83\u5305\u62ec\u4e24\u4e2a\u7aef\u70b9 ( endpoint ) \u5c5e\u6027 $low$ \u548c $high$\u3002\u5bf9\u4efb\u610f\u4e24\u4e2a\u533a\u95f4 $i$ \u548c $i'$ \uff0c\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u4e4b\u4e00\u6210\u7acb\uff1a (a). $i$ \u548c $i'$ \u91cd\u53e0 ( overlap )\uff0c\u5373\u6709 $i.high\\leq i'.low\\ \\mathsf{and}\\ i'.high\\leq i.low$\uff1b (b). $i$ \u5728 $i'$ \u5de6\u8fb9\uff0c\u5373\u6709 $i.high < i'.low$\uff1b (c). $i$ \u5728 $i'$ \u53f3\u8fb9\uff0c\u5373\u6709 $i'.high < i.low$\u3002","title":"(1). \u533a\u95f4\u7684\u6027\u8d28"},{"location":"3-DataStructures/3.6/#2","text":"\u533a\u95f4\u6811\u7684\u7ed3\u70b9\u5305\u62ec\u4e09\u4e2a\u5c5e\u6027\uff0c\u5176\u4e2d\u4ee5\u533a\u95f4\u7684\u4f4e\u7aef\u70b9 $x.low$ \u4f5c\u4e3a\u7ea2\u9ed1\u6811\u7684\u5173\u952e\u5b57\uff1b\u9664\u4e24\u4e2a\u7aef\u70b9\u5c5e\u6027\u5916\uff0c\u8fd8\u5305\u62ec\u5c5e\u6027 $x.max$\uff0c\u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\u7684\u533a\u95f4\u7684\u7aef\u70b9\u7684\u6700\u5927\u503c\u3002\u56e0\u6b64\u6709\uff1a $$ x.max\\ = \\ \\mathrm{max}(x.high,\\ x.left.max,\\ x.right.max) $$ \u56e0\u6b64\uff0c\u6839\u636e\u4e0a\u9762\u7684\u5b9a\u7406\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u4e3a $O(lgn)$\uff0c\u5e76\u4e14\uff0c\u4e00\u6b21\u65cb\u8f6c\u66f4\u65b0 $max$ \u503c\u53ea\u9700\u8981 $O(1)$ \u7684\u4ee3\u4ef7\u3002","title":"(2). \u6269\u5f20\u7684\u5c5e\u6027"},{"location":"3-DataStructures/3.6/#3","text":"INTERVAL-SEARCH(T, i) \uff1a\u627e\u51fa\u6811 T \u4e2d\u4e0e i \u91cd\u53e0\u7684\u90a3\u4e2a\u7ed3\u70b9\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u8fd4\u56de T.nil \u3002 code: INTERVAL-SEARCH Node * IntervalSearch ( IntTree * tree , int low , int high ) { Node * x = tree -> root ; // condition: x \u2260 T.nil and i does not overlap x.int while ( x != tree -> nil && ! ( low <= x -> high && x -> low <= high )) { if ( x -> left != tree -> nil && x -> left -> max >= low ) x = x -> left ; else x = x -> right ; } return x ; } \u6b64\u4ee3\u7801\u7684\u4e3b\u8981\u601d\u60f3\u4e3a\uff0c\u82e5\u5f53\u524d\u9047\u5230\u7684\u7ed3\u70b9\u672a\u8986\u76d6\u6307\u5b9a\u533a\u95f4 i \uff0c\u5219\u67e5\u8be2\u4e00\u5b9a\u4f1a\u6309\u5b89\u5168\u7684\u65b9\u5411\u8fdb\u884c\uff1a \u5982\u679c x = x->left \u672a\u6267\u884c\uff0c\u5219\u4ee3\u8868\u5de6\u5b50\u6811\u4e2d\u4e00\u5b9a\u6ca1\u6709\u89e3\uff1b \u5982\u679c x = x->left \u6267\u884c\u4e14\u5de6\u5b50\u6811\u4e2d\u6ca1\u6709\u89e3\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u4e2d\u4e5f\u4e00\u5b9a\u6ca1\u6709\u89e3\u3002 \u7b2c\u4e8c\u70b9\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u82e5\u5de6\u5b50\u6811\u65e0\u89e3\uff0c\u5219\u5de6\u5b50\u6811\u76f8\u5e94\u533a\u95f4\u5927\u4e8e\u76ee\u7684\u533a\u95f4\uff0c\u7531\u4e8e\u5173\u952e\u5b57\u6309 $low$ \u6392\u5e8f\uff0c\u53f3\u5b50\u6811\u4e2d\u4e5f\u65e0\u89e3\u3002","title":"(3). \u67e5\u8be2\u64cd\u4f5c"},{"location":"3-DataStructures/3.7/","text":"1. \u7ebf\u6bb5\u6811\u7684\u6027\u8d28 \u4e00\u68f5\u7ebf\u6bb5\u6811\u5b58\u50a8\u4e00\u4e2a\u533a\u95f4\u8303\u56f4\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e2d\u5b58\u50a8\u9644\u52a0\u5c5e\u6027\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u4e3a $[l,\\ r)$ \u7684\u7ed3\u70b9\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u5bf9\u5e94\u7684\u533a\u95f4\u5206\u522b\u4e3a $[l,\\ mid)$ \u548c $[mid+1,\\ r)$; \u7531\u4e8e\u533a\u95f4\u5411\u4e0b\u4e8c\u5206\uff0c\u5144\u5f1f\u7ed3\u70b9\u95f4\u7684\u533a\u95f4\u5927\u5c0f\u7684\u5dee\u503c\u81f3\u591a\u4e3a $1$\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u6216\u4e3a\u6ee1\u4e8c\u53c9\u6811 (\u603b\u5143\u7d20\u6570\u4e3a $2$ \u7684\u5e42)\uff0c\u6216\u4e3a\u6700\u540e\u4e00\u5c42\u672a\u6ee1\u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u6811\u9ad8\u4e3a $O(\\lg n)$\uff0c\u901a\u5e38\u6839\u636e\u6839\u8282\u70b9\u533a\u95f4\u5927\u5c0f\u5f00 $4$ \u500d\u7a7a\u95f4\uff1b \u53f6\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u662f\u4e00\u4e2a\u5355\u70b9\uff1b \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u5b50\u533a\u95f4 $i$\uff0c\u5b58\u5728\u552f\u4e00\u786e\u5b9a\u7684 $\\log n$ \u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e9b\u7ed3\u70b9\u533a\u95f4\u4ea4\u96c6\u4e3a\u7a7a\u3001\u5e76\u96c6\u4e3a $i$ \u4e14 $n$ \u503c\u6700\u5c0f\u3002 2. \u5efa\u6811 \ud83c\udf33 \u2003\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\u7684\u4e00\u70b9\u4e0d\u540c\u662f\uff0c\u5176\u7ed3\u6784\u4e00\u65e6\u5efa\u7acb\u4fbf\u4e0d\u53ef\u6539\u53d8\u3002 \u2003\u5f53\u5ffd\u7565\u6700\u540e\u4e00\u5c42\u7684\u7ed3\u70b9\uff0c\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\uff0c\u56e0\u6b64\u53ef\u7528\u6570\u7ec4\u8868\u793a\u3002\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5c5e\u6027\u901a\u5e38\u4ec5\u4e0e\u5de6\u53f3\u5b50\u6811\u6709\u5173\uff0c\u8fd9\u91cc\u4ee5\u533a\u95f4\u548c\u4e3a\u4f8b\u3002 /* build a interval [l, r) */ void build ( int idx , int l , int r ) { if ( l + 1 == r ) { nodes [ idx ] = attr [ l ]; return ; } int mid = l + ( r - l ) / 2 ; build ( idx * 2 + 1 , l , mid ); build ( idx * 2 + 2 , mid , r ); nodes [ idx ] = nodes [ idx * 2 + 1 ] + nodes [ idx * 2 + 2 ]; } 3. \u67e5\u8be2\u4e0e\u4fee\u6539 (1). \u5355\u70b9\u4fee\u6539 + \u533a\u95f4\u67e5\u8be2 \u5982\u679c\u8981\u4fee\u6539\u67d0\u4e2a\u5355\u70b9\u7684\u7ed3\u70b9\u5c5e\u6027\u503c\uff0c\u9700\u8981\u66f4\u65b0\u5176\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u3002 void modify ( int idx , int l , int r , int point , int val ) { if ( l + 1 == r && l == point ) { nodes [ idx ] = val ; return ; } int mid = l + ( r - l ) / 2 ; if ( point < mid ) modify ( idx * 2 + 1 , l , mid , point , val ); else modify ( idx * 2 + 2 , mid , r , point , val ); nodes [ idx ] = nodes [ idx * 2 + 1 ] + nodes [ idx * 2 + 2 ]; } \u7ed9\u5b9a\u7ebf\u6bb5\u6811\u533a\u95f4\u7684\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u67e5\u8be2\u8be5\u533a\u95f4\u5185\u6240\u6709\u7ed3\u70b9\u7684\u805a\u5408\u5c5e\u6027\u4fe1\u606f\u3002\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u662f\u4e00\u4e2a\u904d\u5386\u4e8c\u53c9\u6811\u5bfb\u627e\u5b50\u533a\u95f4\u7684\u8fc7\u7a0b\uff0c\u6839\u636e\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\uff0c\u53ef\u5c06\u67e5\u8be2\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a \u67e5\u8be2\u533a\u95f4\u4e0e\u5f53\u524d\u533a\u95f4\u65e0\u4ea4\u96c6\uff0c\u5219\u4e0d\u518d\u5411\u4e0b\u904d\u5386\u5e76\u8fd4\u56de 0\uff1b \u67e5\u8be2\u533a\u95f4\u5305\u542b\u4e86\u5f53\u524d\u533a\u95f4\uff0c\u5219\u4e0d\u518d\u5411\u4e0b\u904d\u5386\u5e76\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u5c5e\u6027\uff1b \u67e5\u8be2\u533a\u95f4\u4e0e\u5f53\u524d\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u5219\u5411\u5de6\u53f3\u4f9d\u6b21\u9012\u5f52\u7ee7\u7eed\u67e5\u8be2\uff0c\u7ed3\u675f\u540e\u8fd4\u56de\u4e8c\u4e2a\u67e5\u8be2\u7ed3\u679c\u7684\u548c\u3002 \u5982\u679c\u5bf9\u5411\u5de6\u53f3\u5b50\u6811\u8f6c\u79fb\u52a0\u4ee5\u9650\u5236\uff0c\u5219\u53ef\u4ee5\u5ffd\u7565\u4e0d\u76f8\u4ea4\u533a\u95f4\u7684\u60c5\u51b5\u3002 /* * [lc, rc): current interval; [ls, rs): interval to search */ int query ( int idx , int lc , int rc , int ls , int rs ) { if ( lc >= ls && rc <= rs ) { return nodes [ idx ]; } int mid = lc + ( rc - lc ) / 2 , res = 0 ; if ( ls < mid ) res += query ( idx * 2 + 1 , lc , mid , ls , rs ); if ( rs > mid ) res += query ( idx * 2 + 2 , mid , rc , ls , rs ); return res ; } (2). \u533a\u95f4\u4fee\u6539 + \u533a\u95f4\u67e5\u8be2 \u5982\u679c\u9700\u8981\u4fee\u6539\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u503c\uff0c\u5373\u4ee4 $[ls, rs)$ \u7684\u6240\u6709\u5355\u70b9\u540c\u65f6\u52a0\u4e0a $val$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u6240\u6709\u5b50\u533a\u95f4\u7ed3\u70b9\u7684\u5c5e\u6027\u503c\u90fd\u8981\u66f4\u65b0\uff0c\u5176\u590d\u6742\u5ea6\u65e0\u6cd5\u63a5\u53d7\u3002\u6b64\u95ee\u9898\u53ef\u901a\u8fc7\u6c38\u4e45\u5316\u6807\u8bb0\u89e3\u51b3\uff0c\u5373\u4e3a\u6bcf\u4e2a\u7ed3\u70b9\u6dfb\u52a0\u4e00\u4e2a\u6807\u8bb0\u5c5e\u6027\uff0c\u533a\u95f4\u4fee\u6539\u65f6\uff0c\u53ea\u5728\u5bf9\u5e94\u6839\u7ed3\u70b9\u4e0a\u505a\u4e2a\u6807\u8bb0\u3002\u5219\uff1a \u533a\u95f4\u4fee\u6539\u65f6\uff0c\u9700\u8981\u66f4\u65b0\u88ab\u6807\u8bb0\u7ed3\u70b9\u7684\u7956\u5148\u7ed3\u70b9\u7684\u7ed3\u70b9\u5c5e\u6027\u503c\uff1b \u533a\u95f4\u67e5\u8be2\u65f6\uff0c\u4e3a\u4f7f\u6807\u8bb0\u751f\u6548\uff0c\u67e5\u8be2\u7ed3\u679c = \u5f53\u524d\u7ed3\u70b9\u5b50\u533a\u95f4\u6807\u8bb0\u8ba1\u7b97 + \u5de6\u53f3\u5b50\u6811\u67e5\u8be2\u7ed3\u679c\u3002 void modify ( int idx , int lc , int rc , int ls , int rs , int val ) { if ( lc >= ls && rc <= rs ) { addsum [ idx ] += val ; return ; } nodes [ idx ] += ( min ( rs , rc ) - max ( ls , lc )) * val ; int mid = lc + ( rc - lc ) / 2 ; if ( ls < mid ) modify ( idx * 2 + 1 , lc , mid , ls , rs , val ); if ( rs > mid ) modify ( idx * 2 + 2 , mid , rc , ls , rs , val ); } int query ( int idx , int lc , int rc , int ls , int rs ) { if ( lc >= ls && rc <= rs ) { return nodes [ idx ] + ( rc - lc ) * addsum [ idx ]; } int mid = lc + ( rc - lc ) / 2 ; int res = ( min ( rs , rc ) - max ( ls , lc )) * addsum [ idx ]; if ( ls < mid ) res += query ( idx * 2 + 1 , lc , mid , ls , rs ); if ( rs > mid ) res += query ( idx * 2 + 2 , mid , rc , ls , rs ); return res ; } 4. \u79bb\u6563\u5316 \u2003\u5f53\u533a\u95f4 $[l, r)$ \u7684\u8303\u56f4\u5f88\u5927\uff0c\u4e14\u5176\u4e2d\u7684\u6709\u6548\u5b50\u533a\u95f4\u5f88\u5c11\uff0c\u4e3a\u8282\u7701\u7a7a\u95f4\u5e76\u63d0\u5347\u7ebf\u6bb5\u6811\u7684\u6548\u7387\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u79bb\u6563\u5316\u3002\u5047\u8bbe\u8981\u5b58\u50a8\u7684\u533a\u95f4\u4e3a $[1, 100)$ \u548c $[100, \\mathrm{inf})$\uff0c\u5219\u53ef\u4ee5\u628a\u8fd9\u51e0\u4e2a\u6570\u5206\u522b\u6620\u5c04\u5230 $1\u30012\u30013$ \u518d\u901a\u8fc7\u7ebf\u6bb5\u6811\u5b58\u50a8\u3002 \u2003\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u7ebf\u6bb5\u6811\u5b58\u50a8\u533a\u95f4\u7684\u5f62\u5f0f\u4e3a\u5de6\u95ed\u53f3\u95ed\u4e14\u9700\u8981\u79bb\u6563\u5316\u65f6\uff0c$(\\mathrm{mid}, \\mathrm{mid+1})$ \u5185\u7684\u6570\u636e\u65e0\u6cd5\u8868\u793a\u3002","title":"7.Segment trees"},{"location":"3-DataStructures/3.7/#1","text":"\u4e00\u68f5\u7ebf\u6bb5\u6811\u5b58\u50a8\u4e00\u4e2a\u533a\u95f4\u8303\u56f4\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e2d\u5b58\u50a8\u9644\u52a0\u5c5e\u6027\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u4e3a $[l,\\ r)$ \u7684\u7ed3\u70b9\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u5bf9\u5e94\u7684\u533a\u95f4\u5206\u522b\u4e3a $[l,\\ mid)$ \u548c $[mid+1,\\ r)$; \u7531\u4e8e\u533a\u95f4\u5411\u4e0b\u4e8c\u5206\uff0c\u5144\u5f1f\u7ed3\u70b9\u95f4\u7684\u533a\u95f4\u5927\u5c0f\u7684\u5dee\u503c\u81f3\u591a\u4e3a $1$\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u6216\u4e3a\u6ee1\u4e8c\u53c9\u6811 (\u603b\u5143\u7d20\u6570\u4e3a $2$ \u7684\u5e42)\uff0c\u6216\u4e3a\u6700\u540e\u4e00\u5c42\u672a\u6ee1\u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u6811\u9ad8\u4e3a $O(\\lg n)$\uff0c\u901a\u5e38\u6839\u636e\u6839\u8282\u70b9\u533a\u95f4\u5927\u5c0f\u5f00 $4$ \u500d\u7a7a\u95f4\uff1b \u53f6\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u662f\u4e00\u4e2a\u5355\u70b9\uff1b \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u5b50\u533a\u95f4 $i$\uff0c\u5b58\u5728\u552f\u4e00\u786e\u5b9a\u7684 $\\log n$ \u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e9b\u7ed3\u70b9\u533a\u95f4\u4ea4\u96c6\u4e3a\u7a7a\u3001\u5e76\u96c6\u4e3a $i$ \u4e14 $n$ \u503c\u6700\u5c0f\u3002","title":"1. \u7ebf\u6bb5\u6811\u7684\u6027\u8d28"},{"location":"3-DataStructures/3.7/#2","text":"\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\u7684\u4e00\u70b9\u4e0d\u540c\u662f\uff0c\u5176\u7ed3\u6784\u4e00\u65e6\u5efa\u7acb\u4fbf\u4e0d\u53ef\u6539\u53d8\u3002 \u2003\u5f53\u5ffd\u7565\u6700\u540e\u4e00\u5c42\u7684\u7ed3\u70b9\uff0c\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\uff0c\u56e0\u6b64\u53ef\u7528\u6570\u7ec4\u8868\u793a\u3002\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5c5e\u6027\u901a\u5e38\u4ec5\u4e0e\u5de6\u53f3\u5b50\u6811\u6709\u5173\uff0c\u8fd9\u91cc\u4ee5\u533a\u95f4\u548c\u4e3a\u4f8b\u3002 /* build a interval [l, r) */ void build ( int idx , int l , int r ) { if ( l + 1 == r ) { nodes [ idx ] = attr [ l ]; return ; } int mid = l + ( r - l ) / 2 ; build ( idx * 2 + 1 , l , mid ); build ( idx * 2 + 2 , mid , r ); nodes [ idx ] = nodes [ idx * 2 + 1 ] + nodes [ idx * 2 + 2 ]; }","title":"2. \u5efa\u6811 \ud83c\udf33"},{"location":"3-DataStructures/3.7/#3","text":"","title":"3. \u67e5\u8be2\u4e0e\u4fee\u6539"},{"location":"3-DataStructures/3.7/#1_1","text":"\u5982\u679c\u8981\u4fee\u6539\u67d0\u4e2a\u5355\u70b9\u7684\u7ed3\u70b9\u5c5e\u6027\u503c\uff0c\u9700\u8981\u66f4\u65b0\u5176\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u3002 void modify ( int idx , int l , int r , int point , int val ) { if ( l + 1 == r && l == point ) { nodes [ idx ] = val ; return ; } int mid = l + ( r - l ) / 2 ; if ( point < mid ) modify ( idx * 2 + 1 , l , mid , point , val ); else modify ( idx * 2 + 2 , mid , r , point , val ); nodes [ idx ] = nodes [ idx * 2 + 1 ] + nodes [ idx * 2 + 2 ]; } \u7ed9\u5b9a\u7ebf\u6bb5\u6811\u533a\u95f4\u7684\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u67e5\u8be2\u8be5\u533a\u95f4\u5185\u6240\u6709\u7ed3\u70b9\u7684\u805a\u5408\u5c5e\u6027\u4fe1\u606f\u3002\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u662f\u4e00\u4e2a\u904d\u5386\u4e8c\u53c9\u6811\u5bfb\u627e\u5b50\u533a\u95f4\u7684\u8fc7\u7a0b\uff0c\u6839\u636e\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\uff0c\u53ef\u5c06\u67e5\u8be2\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a \u67e5\u8be2\u533a\u95f4\u4e0e\u5f53\u524d\u533a\u95f4\u65e0\u4ea4\u96c6\uff0c\u5219\u4e0d\u518d\u5411\u4e0b\u904d\u5386\u5e76\u8fd4\u56de 0\uff1b \u67e5\u8be2\u533a\u95f4\u5305\u542b\u4e86\u5f53\u524d\u533a\u95f4\uff0c\u5219\u4e0d\u518d\u5411\u4e0b\u904d\u5386\u5e76\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u5c5e\u6027\uff1b \u67e5\u8be2\u533a\u95f4\u4e0e\u5f53\u524d\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u5219\u5411\u5de6\u53f3\u4f9d\u6b21\u9012\u5f52\u7ee7\u7eed\u67e5\u8be2\uff0c\u7ed3\u675f\u540e\u8fd4\u56de\u4e8c\u4e2a\u67e5\u8be2\u7ed3\u679c\u7684\u548c\u3002 \u5982\u679c\u5bf9\u5411\u5de6\u53f3\u5b50\u6811\u8f6c\u79fb\u52a0\u4ee5\u9650\u5236\uff0c\u5219\u53ef\u4ee5\u5ffd\u7565\u4e0d\u76f8\u4ea4\u533a\u95f4\u7684\u60c5\u51b5\u3002 /* * [lc, rc): current interval; [ls, rs): interval to search */ int query ( int idx , int lc , int rc , int ls , int rs ) { if ( lc >= ls && rc <= rs ) { return nodes [ idx ]; } int mid = lc + ( rc - lc ) / 2 , res = 0 ; if ( ls < mid ) res += query ( idx * 2 + 1 , lc , mid , ls , rs ); if ( rs > mid ) res += query ( idx * 2 + 2 , mid , rc , ls , rs ); return res ; }","title":"(1). \u5355\u70b9\u4fee\u6539 + \u533a\u95f4\u67e5\u8be2"},{"location":"3-DataStructures/3.7/#2_1","text":"\u5982\u679c\u9700\u8981\u4fee\u6539\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u503c\uff0c\u5373\u4ee4 $[ls, rs)$ \u7684\u6240\u6709\u5355\u70b9\u540c\u65f6\u52a0\u4e0a $val$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u6240\u6709\u5b50\u533a\u95f4\u7ed3\u70b9\u7684\u5c5e\u6027\u503c\u90fd\u8981\u66f4\u65b0\uff0c\u5176\u590d\u6742\u5ea6\u65e0\u6cd5\u63a5\u53d7\u3002\u6b64\u95ee\u9898\u53ef\u901a\u8fc7\u6c38\u4e45\u5316\u6807\u8bb0\u89e3\u51b3\uff0c\u5373\u4e3a\u6bcf\u4e2a\u7ed3\u70b9\u6dfb\u52a0\u4e00\u4e2a\u6807\u8bb0\u5c5e\u6027\uff0c\u533a\u95f4\u4fee\u6539\u65f6\uff0c\u53ea\u5728\u5bf9\u5e94\u6839\u7ed3\u70b9\u4e0a\u505a\u4e2a\u6807\u8bb0\u3002\u5219\uff1a \u533a\u95f4\u4fee\u6539\u65f6\uff0c\u9700\u8981\u66f4\u65b0\u88ab\u6807\u8bb0\u7ed3\u70b9\u7684\u7956\u5148\u7ed3\u70b9\u7684\u7ed3\u70b9\u5c5e\u6027\u503c\uff1b \u533a\u95f4\u67e5\u8be2\u65f6\uff0c\u4e3a\u4f7f\u6807\u8bb0\u751f\u6548\uff0c\u67e5\u8be2\u7ed3\u679c = \u5f53\u524d\u7ed3\u70b9\u5b50\u533a\u95f4\u6807\u8bb0\u8ba1\u7b97 + \u5de6\u53f3\u5b50\u6811\u67e5\u8be2\u7ed3\u679c\u3002 void modify ( int idx , int lc , int rc , int ls , int rs , int val ) { if ( lc >= ls && rc <= rs ) { addsum [ idx ] += val ; return ; } nodes [ idx ] += ( min ( rs , rc ) - max ( ls , lc )) * val ; int mid = lc + ( rc - lc ) / 2 ; if ( ls < mid ) modify ( idx * 2 + 1 , lc , mid , ls , rs , val ); if ( rs > mid ) modify ( idx * 2 + 2 , mid , rc , ls , rs , val ); } int query ( int idx , int lc , int rc , int ls , int rs ) { if ( lc >= ls && rc <= rs ) { return nodes [ idx ] + ( rc - lc ) * addsum [ idx ]; } int mid = lc + ( rc - lc ) / 2 ; int res = ( min ( rs , rc ) - max ( ls , lc )) * addsum [ idx ]; if ( ls < mid ) res += query ( idx * 2 + 1 , lc , mid , ls , rs ); if ( rs > mid ) res += query ( idx * 2 + 2 , mid , rc , ls , rs ); return res ; }","title":"(2). \u533a\u95f4\u4fee\u6539 + \u533a\u95f4\u67e5\u8be2"},{"location":"3-DataStructures/3.7/#4","text":"\u5f53\u533a\u95f4 $[l, r)$ \u7684\u8303\u56f4\u5f88\u5927\uff0c\u4e14\u5176\u4e2d\u7684\u6709\u6548\u5b50\u533a\u95f4\u5f88\u5c11\uff0c\u4e3a\u8282\u7701\u7a7a\u95f4\u5e76\u63d0\u5347\u7ebf\u6bb5\u6811\u7684\u6548\u7387\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u79bb\u6563\u5316\u3002\u5047\u8bbe\u8981\u5b58\u50a8\u7684\u533a\u95f4\u4e3a $[1, 100)$ \u548c $[100, \\mathrm{inf})$\uff0c\u5219\u53ef\u4ee5\u628a\u8fd9\u51e0\u4e2a\u6570\u5206\u522b\u6620\u5c04\u5230 $1\u30012\u30013$ \u518d\u901a\u8fc7\u7ebf\u6bb5\u6811\u5b58\u50a8\u3002 \u2003\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u7ebf\u6bb5\u6811\u5b58\u50a8\u533a\u95f4\u7684\u5f62\u5f0f\u4e3a\u5de6\u95ed\u53f3\u95ed\u4e14\u9700\u8981\u79bb\u6563\u5316\u65f6\uff0c$(\\mathrm{mid}, \\mathrm{mid+1})$ \u5185\u7684\u6570\u636e\u65e0\u6cd5\u8868\u793a\u3002","title":"4. \u79bb\u6563\u5316"},{"location":"3-DataStructures/3.8/","text":"1. \u4e0d\u76f8\u4ea4\u96c6\u5408\u6982\u8ff0 \u2003\u4e00\u4e9b\u5e94\u7528\u6d89\u53ca\u628a $n$ \u4e2a\u5143\u7d20\u5206\u6210\u4e00\u7ec4\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff0c\u4e4b\u540e\u4e0d\u65ad\u8fdb\u884c\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e0e\u5bfb\u627e\u7ed9\u9876\u5143\u7d20\u7684\u552f\u4e00\u96c6\u5408\u4e24\u79cd\u64cd\u4f5c\u3002\u4e0d\u76f8\u4ea4\u96c6\u5408 ( disjoint-set , \u6216\u79f0\u5e76\u67e5\u96c6, union-find set ) \u662f\u652f\u6301\u4e0a\u8ff0\u60c5\u5f62\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a MAKE-SET( x ) : \u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\uff0c\u5b83\u7684\u552f\u4e00\u6210\u5458\u662f x \uff1b UNION( x, y ) : \u5c06\u5305\u542b x \u548c y \u7684\u4e24\u4e2a\u96c6\u5408 S x \u548c S y \u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002 FIND-SET( x ) : \u8fd4\u56de\u96c6\u5408 S x \u7684\u4ee3\u8868\u3002 \u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u4e00\u4e2a\u91cd\u8981\u601d\u60f3\u662f\u7528\u96c6\u5408\u4e2d\u67d0\u4e2a\u5143\u7d20\u4ee3\u8868\u6574\u4e2a\u96c6\u5408\uff0c\u54ea\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4ee3\u8868\u5e76\u4e0d\u91cd\u8981\uff0c\u5173\u952e\u5728\u4e8e\u5982\u679c\u4e24\u6b21\u67e5\u8be2 ( FIND-SET ) \u4e4b\u95f4\u52a8\u6001\u96c6\u5408\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u4e24\u6b21\u67e5\u5230\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002 \u5b9a\u4e49\u4e0d\u76f8\u4ea4\u96c6\u5408\u8fd0\u884c\u65f6\u95f4\u7684\u53c2\u6570\uff1a $n$ : MAKE-SET \u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9 $n$ \u4e2a\u64cd\u4f5c\u603b\u662f\u6700\u5148\u88ab\u6267\u884c\uff1b $m$ : MAKE-SET\u3001UNION \u548c FIND-SET \u7684\u603b\u6b21\u6570\u3002 2. \u94fe\u8868\u8868\u793a \u2003\u7528\u8fd9\u79cd\u65b9\u6cd5\u8868\u793a\uff0c MAKE-SET \u548c FIND-SET \u90fd\u53ea\u9700\u8981 $O(1)$ \u65f6\u95f4\uff0c\u4f46\u7531\u4e8e UNION \u9700\u8981\u66f4\u65b0\u6307\u5411\u5934\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u6700\u574f\u60c5\u51b5\u4e0b $m$ \u4e2a\u64cd\u4f5c\u603b\u65f6\u95f4\u4e3a $\\Theta(n^2)$\u3002\u5982\u679c\u5728\u5408\u5e76\u65f6\u8ba9\u7ed3\u70b9\u6570\u5c11\u7684\u94fe\u8868\u88ab\u5408\u5e76\uff0c\u5219\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\u6700\u591a\u88ab\u66f4\u65b0 $\\lceil \\lg n \\rceil$ \u6b21\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u4e3a $O(m + n\\lg n)$\u3002 3. \u6709\u6839\u6811\u8868\u793a \u2003\u2003\u2003 \u2003\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u4ee3\u8868\u4e00\u4e2a\u6210\u5458\uff0c\u6bcf\u68f5\u6811\u4ee3\u8868\u4e00\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u6210\u5458\u4ec5\u6307\u5411\u7236\u7ed3\u70b9\uff0c\u6bcf\u68f5\u6811\u7684\u6839\u662f\u96c6\u5408\u7684\u4ee3\u8868\uff0c\u5e76\u4e14\u662f\u5176\u81ea\u5df1\u7684\u7236\u7ed3\u70b9\u3002\u5219\u4e09\u79cd\u64cd\u4f5c\u5206\u522b\u5bf9\u5e94\uff1a MAKE-SET : \u4ee4\u67d0\u7ed3\u70b9\u6307\u5411\u81ea\u5df1\uff1b FIND-SET : \u6cbf\u6307\u9488\u4e0a\u6eaf\u5230\u6839\uff1b UNION : \u8ba9\u4e00\u68f5\u6811\u7684\u6839\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u3002 void makeset () { for ( int i = 0 ; i < MAXN ; ++ i ) nodes [ i ] = i ; } int find ( int x ) { return ( nodes [ x ] == x ) ? x : find ( nodes [ x ]); } void merge ( int x , int y ) { nodes [ find ( x )] = find ( y ); } \u5982\u679c\u4ec5\u9650\u4e8e\u6b64\uff0c\u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u4e0d\u5feb\u4e8e\u94fe\u8868\u8868\u793a\u6cd5\uff0c\u4f46\u901a\u8fc7\u4e24\u79cd\u542f\u53d1\u7b56\u7565\uff0c\u53ef\u4ee5\u4f7f\u4e0d\u76f8\u4ea4\u96c6\u5408\u8fbe\u5230\u6e10\u8fdb\u6700\u4f18\u3002 (1). \u542f\u53d1\u7b56\u7565 \u2460 \u6309\u79e9\u5408\u5e76 ( union by rank ) \u2003\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u94fe\u8868\u8868\u793a\u4f46\u66f4\u6613\u4e8e\u5206\u6790\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u79e9 $\\small rank$\uff0c\u8868\u793a\u8be5\u7ed3\u70b9\u9ad8\u5ea6\u7684\u4e00\u4e2a\u4e0a\u754c\u3002 \u901a\u8fc7 MAKE-SET \u521b\u5efa\u4e00\u4e2a\u5355\u5143\u7d20\u96c6\u5408\u65f6\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7684\u521d\u59cb\u79e9\u4e3a $0$\uff1b \u5373\u4f7f\u91c7\u7528\u8def\u5f84\u538b\u7f29\uff0c\u6bcf\u4e2a FIND-SET \u64cd\u4f5c\u4e5f\u4e0d\u6539\u53d8\u4efb\u4f55\u79e9\uff1b \u901a\u8fc7 UNION \u5408\u5e76\u4e24\u68f5\u6709\u6839\u6811\u65f6\uff1a \u5982\u679c\u4e24\u6839\u7684\u79e9\u4e0d\u540c\uff0c\u5219\u5927\u79e9\u6839\u79f0\u4e3a\u5c0f\u79e9\u6839\u7684\u7236\u7ed3\u70b9\uff0c\u79e9\u7684\u503c\u4e0d\u53d8\uff1b \u5982\u679c\u4e24\u6839\u7684\u79e9\u76f8\u7b49\uff0c\u4efb\u9009\u4e00\u4e2a\u4f5c\u4e3a\u65b0\u6839\uff0c\u5e76\u4ee4\u5b83\u7684\u79e9\u52a0\u4e00\u3002 void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; } else { nodes [ rx ] = ry ; } if ( rank [ rx ] == rank [ ry ] && rx != ry ) ++ rank [ ry ]; } \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4ee4 $\\small rank$ \u8868\u793a\u7ed3\u70b9\u6570\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u2461 \u8def\u5f84\u538b\u7f29 ( path compression ) \u5373\u5728 FIND-SET \u64cd\u4f5c\u4e2d\uff0c\u4f7f\u67e5\u627e\u8def\u5f84\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u6307\u5411\u6839\uff0c\u4e14\u4e0d\u6539\u53d8\u4efb\u4f55\u7ed3\u70b9\u7684\u79e9\u3002 int find ( int x ) { return ( nodes [ x ] == x ) ? x : ( nodes [ x ] = find ( nodes [ x ])); } (2). \u8fd0\u884c\u65f6\u95f4 \u5355\u72ec\u4f7f\u7528\u6309\u79e9\u5408\u5e76\uff1a$O(m\\lg n)$ \u5355\u7528\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff1a\u8bbe FIND-SET \u64cd\u4f5c\u6709 $f$ \u4e2a\uff0c\u5219\u6700\u574f\u8fd0\u884c\u65f6\u95f4\u4e3a $O(n+f\\cdot (1+\\log_{2+f/n}n))$ \u540c\u65f6\u4f7f\u7528\uff1a\u6700\u574f\u8fd0\u884c\u65f6\u95f4\u4e3a $O(m\\cdot \\alpha(n))$\u3002\u8fd9\u91cc $\\alpha(n)$ \u662f\u4e00\u4e2a\u589e\u957f\u975e\u5e38\u6162\u7684\u51fd\u6570\uff0c\u5728\u4efb\u4f55\u5e94\u7528\u4e2d\uff0c\u90fd\u6709 $\\alpha(n)\\leq 4$\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u8fd0\u884c\u65f6\u95f4\u548c $m$ \u5448\u7ebf\u6027\u5173\u7cfb\uff0c\u4f46\u4e25\u683c\u6765\u8bf4\u662f\u8d85\u7ebf\u6027\u7684\u3002 \u5728\u4e00\u4e9b\u7a7a\u95f4\u654f\u611f\u7684\u5e94\u7528\u4e2d\u9700\u8981\u6ce8\u610f\u6309\u79e9\u5408\u5e76\u5f15\u5165\u7684\u989d\u5916\u7a7a\u95f4\u3002","title":"8.Disjoint-Set"},{"location":"3-DataStructures/3.8/#1","text":"\u4e00\u4e9b\u5e94\u7528\u6d89\u53ca\u628a $n$ \u4e2a\u5143\u7d20\u5206\u6210\u4e00\u7ec4\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff0c\u4e4b\u540e\u4e0d\u65ad\u8fdb\u884c\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e0e\u5bfb\u627e\u7ed9\u9876\u5143\u7d20\u7684\u552f\u4e00\u96c6\u5408\u4e24\u79cd\u64cd\u4f5c\u3002\u4e0d\u76f8\u4ea4\u96c6\u5408 ( disjoint-set , \u6216\u79f0\u5e76\u67e5\u96c6, union-find set ) \u662f\u652f\u6301\u4e0a\u8ff0\u60c5\u5f62\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a MAKE-SET( x ) : \u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\uff0c\u5b83\u7684\u552f\u4e00\u6210\u5458\u662f x \uff1b UNION( x, y ) : \u5c06\u5305\u542b x \u548c y \u7684\u4e24\u4e2a\u96c6\u5408 S x \u548c S y \u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002 FIND-SET( x ) : \u8fd4\u56de\u96c6\u5408 S x \u7684\u4ee3\u8868\u3002 \u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u4e00\u4e2a\u91cd\u8981\u601d\u60f3\u662f\u7528\u96c6\u5408\u4e2d\u67d0\u4e2a\u5143\u7d20\u4ee3\u8868\u6574\u4e2a\u96c6\u5408\uff0c\u54ea\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4ee3\u8868\u5e76\u4e0d\u91cd\u8981\uff0c\u5173\u952e\u5728\u4e8e\u5982\u679c\u4e24\u6b21\u67e5\u8be2 ( FIND-SET ) \u4e4b\u95f4\u52a8\u6001\u96c6\u5408\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u4e24\u6b21\u67e5\u5230\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002 \u5b9a\u4e49\u4e0d\u76f8\u4ea4\u96c6\u5408\u8fd0\u884c\u65f6\u95f4\u7684\u53c2\u6570\uff1a $n$ : MAKE-SET \u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9 $n$ \u4e2a\u64cd\u4f5c\u603b\u662f\u6700\u5148\u88ab\u6267\u884c\uff1b $m$ : MAKE-SET\u3001UNION \u548c FIND-SET \u7684\u603b\u6b21\u6570\u3002","title":"1. \u4e0d\u76f8\u4ea4\u96c6\u5408\u6982\u8ff0"},{"location":"3-DataStructures/3.8/#2","text":"\u7528\u8fd9\u79cd\u65b9\u6cd5\u8868\u793a\uff0c MAKE-SET \u548c FIND-SET \u90fd\u53ea\u9700\u8981 $O(1)$ \u65f6\u95f4\uff0c\u4f46\u7531\u4e8e UNION \u9700\u8981\u66f4\u65b0\u6307\u5411\u5934\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u6700\u574f\u60c5\u51b5\u4e0b $m$ \u4e2a\u64cd\u4f5c\u603b\u65f6\u95f4\u4e3a $\\Theta(n^2)$\u3002\u5982\u679c\u5728\u5408\u5e76\u65f6\u8ba9\u7ed3\u70b9\u6570\u5c11\u7684\u94fe\u8868\u88ab\u5408\u5e76\uff0c\u5219\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\u6700\u591a\u88ab\u66f4\u65b0 $\\lceil \\lg n \\rceil$ \u6b21\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u4e3a $O(m + n\\lg n)$\u3002","title":"2. \u94fe\u8868\u8868\u793a"},{"location":"3-DataStructures/3.8/#3","text":"\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u4ee3\u8868\u4e00\u4e2a\u6210\u5458\uff0c\u6bcf\u68f5\u6811\u4ee3\u8868\u4e00\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u6210\u5458\u4ec5\u6307\u5411\u7236\u7ed3\u70b9\uff0c\u6bcf\u68f5\u6811\u7684\u6839\u662f\u96c6\u5408\u7684\u4ee3\u8868\uff0c\u5e76\u4e14\u662f\u5176\u81ea\u5df1\u7684\u7236\u7ed3\u70b9\u3002\u5219\u4e09\u79cd\u64cd\u4f5c\u5206\u522b\u5bf9\u5e94\uff1a MAKE-SET : \u4ee4\u67d0\u7ed3\u70b9\u6307\u5411\u81ea\u5df1\uff1b FIND-SET : \u6cbf\u6307\u9488\u4e0a\u6eaf\u5230\u6839\uff1b UNION : \u8ba9\u4e00\u68f5\u6811\u7684\u6839\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u3002 void makeset () { for ( int i = 0 ; i < MAXN ; ++ i ) nodes [ i ] = i ; } int find ( int x ) { return ( nodes [ x ] == x ) ? x : find ( nodes [ x ]); } void merge ( int x , int y ) { nodes [ find ( x )] = find ( y ); } \u5982\u679c\u4ec5\u9650\u4e8e\u6b64\uff0c\u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u4e0d\u5feb\u4e8e\u94fe\u8868\u8868\u793a\u6cd5\uff0c\u4f46\u901a\u8fc7\u4e24\u79cd\u542f\u53d1\u7b56\u7565\uff0c\u53ef\u4ee5\u4f7f\u4e0d\u76f8\u4ea4\u96c6\u5408\u8fbe\u5230\u6e10\u8fdb\u6700\u4f18\u3002","title":"3. \u6709\u6839\u6811\u8868\u793a"},{"location":"3-DataStructures/3.8/#1_1","text":"\u2460 \u6309\u79e9\u5408\u5e76 ( union by rank ) \u2003\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u94fe\u8868\u8868\u793a\u4f46\u66f4\u6613\u4e8e\u5206\u6790\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u79e9 $\\small rank$\uff0c\u8868\u793a\u8be5\u7ed3\u70b9\u9ad8\u5ea6\u7684\u4e00\u4e2a\u4e0a\u754c\u3002 \u901a\u8fc7 MAKE-SET \u521b\u5efa\u4e00\u4e2a\u5355\u5143\u7d20\u96c6\u5408\u65f6\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7684\u521d\u59cb\u79e9\u4e3a $0$\uff1b \u5373\u4f7f\u91c7\u7528\u8def\u5f84\u538b\u7f29\uff0c\u6bcf\u4e2a FIND-SET \u64cd\u4f5c\u4e5f\u4e0d\u6539\u53d8\u4efb\u4f55\u79e9\uff1b \u901a\u8fc7 UNION \u5408\u5e76\u4e24\u68f5\u6709\u6839\u6811\u65f6\uff1a \u5982\u679c\u4e24\u6839\u7684\u79e9\u4e0d\u540c\uff0c\u5219\u5927\u79e9\u6839\u79f0\u4e3a\u5c0f\u79e9\u6839\u7684\u7236\u7ed3\u70b9\uff0c\u79e9\u7684\u503c\u4e0d\u53d8\uff1b \u5982\u679c\u4e24\u6839\u7684\u79e9\u76f8\u7b49\uff0c\u4efb\u9009\u4e00\u4e2a\u4f5c\u4e3a\u65b0\u6839\uff0c\u5e76\u4ee4\u5b83\u7684\u79e9\u52a0\u4e00\u3002 void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; } else { nodes [ rx ] = ry ; } if ( rank [ rx ] == rank [ ry ] && rx != ry ) ++ rank [ ry ]; } \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4ee4 $\\small rank$ \u8868\u793a\u7ed3\u70b9\u6570\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u2461 \u8def\u5f84\u538b\u7f29 ( path compression ) \u5373\u5728 FIND-SET \u64cd\u4f5c\u4e2d\uff0c\u4f7f\u67e5\u627e\u8def\u5f84\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u6307\u5411\u6839\uff0c\u4e14\u4e0d\u6539\u53d8\u4efb\u4f55\u7ed3\u70b9\u7684\u79e9\u3002 int find ( int x ) { return ( nodes [ x ] == x ) ? x : ( nodes [ x ] = find ( nodes [ x ])); }","title":"(1). \u542f\u53d1\u7b56\u7565"},{"location":"3-DataStructures/3.8/#2_1","text":"\u5355\u72ec\u4f7f\u7528\u6309\u79e9\u5408\u5e76\uff1a$O(m\\lg n)$ \u5355\u7528\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff1a\u8bbe FIND-SET \u64cd\u4f5c\u6709 $f$ \u4e2a\uff0c\u5219\u6700\u574f\u8fd0\u884c\u65f6\u95f4\u4e3a $O(n+f\\cdot (1+\\log_{2+f/n}n))$ \u540c\u65f6\u4f7f\u7528\uff1a\u6700\u574f\u8fd0\u884c\u65f6\u95f4\u4e3a $O(m\\cdot \\alpha(n))$\u3002\u8fd9\u91cc $\\alpha(n)$ \u662f\u4e00\u4e2a\u589e\u957f\u975e\u5e38\u6162\u7684\u51fd\u6570\uff0c\u5728\u4efb\u4f55\u5e94\u7528\u4e2d\uff0c\u90fd\u6709 $\\alpha(n)\\leq 4$\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u8fd0\u884c\u65f6\u95f4\u548c $m$ \u5448\u7ebf\u6027\u5173\u7cfb\uff0c\u4f46\u4e25\u683c\u6765\u8bf4\u662f\u8d85\u7ebf\u6027\u7684\u3002 \u5728\u4e00\u4e9b\u7a7a\u95f4\u654f\u611f\u7684\u5e94\u7528\u4e2d\u9700\u8981\u6ce8\u610f\u6309\u79e9\u5408\u5e76\u5f15\u5165\u7684\u989d\u5916\u7a7a\u95f4\u3002","title":"(2). \u8fd0\u884c\u65f6\u95f4"},{"location":"4-Advanced/dp/","text":"1. \u539f\u7406 (1). \u57fa\u672c\u6982\u5ff5 \u52a8\u6001\u89c4\u5212\u9002\u7528\u4e8e\u6c42\u89e3\u591a\u9636\u6bb5\u51b3\u7b56\u8fc7\u7a0b\u7684\u6700\u4f18\u7b56\u7565\uff0c\u5176\u57fa\u672c\u8981\u7d20\u5982\u4e0b\u3002 \u9636\u6bb5\uff1a\u628a\u4e00\u4e2a\u95ee\u9898\u7684\u8fc7\u7a0b\u5212\u5206\u4e3a\u76f8\u4e92\u8054\u7cfb\u7684\u9636\u6bb5 (\u5373\u5b50\u95ee\u9898) \u72b6\u6001\uff1a\u63cf\u8ff0\u7cfb\u7edf\u60c5\u51b5\u7684\u4fe1\u606f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u72b6\u6001\u53ef\u7528\u4e00\u4e2a\u72b6\u6001\u53d8\u91cf\u63cf\u8ff0\uff0c\u8bb0\u7b2c $k$ \u9636\u6bb5\u7684\u72b6\u6001\u53d8\u91cf\u4e3a $s_k$\u3002 \u51b3\u7b56\uff1a\u7cfb\u7edf\u5728\u6bcf\u4e2a\u9636\u6bb5\u90fd\u9700\u8981\u4f5c\u51fa\u51b3\u7b56\uff0c\u51b3\u7b56\u4f7f\u5f97\u7cfb\u7edf\u4ece\u5f53\u524d\u9636\u6bb5\u7684\u72b6\u6001\u6f14\u53d8\u5230\u4e0b\u4e00\u9636\u6bb5\u7684\u72b6\u6001\u3002\u63cf\u8ff0\u51b3\u7b56\u7684\u53d8\u91cf\u8bb0\u4e3a $u_k(s_k)$\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e24\u9636\u6bb5\u4e4b\u95f4\u7684\u72b6\u6001\u8f6c\u79fb\uff0c$s_{k+1}=T(s_k, u_k)$\u3002 \u6307\u6807\u51fd\u6570\uff1a\u8bc4\u4ef7\u6240\u9009\u7b56\u7565\u7684\u4f18\u52a3\uff0c\u901a\u5e38\u8bb0\u4e3a $V_{k,n}(s_k, u_k, ..., s_n)$\uff0c\u5176\u6700\u4f18\u503c\u79f0\u4e3a\u6700\u4f18\u503c\u51fd\u6570\uff0c\u901a\u5e38\u8bb0\u4e3a $f_k(s_k)=opt\\ V_{k,n}(s_k, u_k, s_n)$ \u52a8\u6001\u89c4\u5212\u57fa\u672c\u65b9\u7a0b\uff1a\u901a\u5e38\u5f62\u5f0f\u4e3a $f_k(s_k)=opt\\ V_k(s_k, u_k(s_k))+f_{k+1}(u_k(s_k)), k=n,...,1$\u3002\u901a\u5e38\u6c42\u89e3\u8fc7\u7a0b\u662f\u6309\u9006\u9636\u6bb5\u987a\u5e8f\u8fdb\u884c\u3002 (2). \u9002\u7528\u6761\u4ef6 \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7531\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7ec4\u6210\uff1b \u65e0\u540e\u6548\u6027\uff1a\u67d0\u9636\u6bb5\u7684\u72b6\u6001\u4e00\u65e6\u786e\u5b9a\uff0c\u5219\u6b64\u540e\u8fc7\u7a0b\u7684\u6f14\u53d8\u4e0d\u518d\u53d7\u6b64\u524d\u5404\u79cd\u72b6\u6001\u53ca\u51b3\u7b56\u7684\u5f71\u54cd\uff1b \u91cd\u53e0\u5b50\u95ee\u9898\uff1a\u975e\u5fc5\u8981\u6761\u4ef6\uff0c\u662f\u52a8\u6001\u89c4\u5212\u76f8\u5bf9\u4e8e\u641c\u7d22\u548c\u5206\u6cbb\u7684\u4e00\u4e2a\u4f18\u52bf\uff0c\u4e5f\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u4f53\u73b0\u3002","title":"1.Dynamic Programming"},{"location":"4-Advanced/dp/#1","text":"","title":"1. \u539f\u7406"},{"location":"4-Advanced/dp/#1_1","text":"\u52a8\u6001\u89c4\u5212\u9002\u7528\u4e8e\u6c42\u89e3\u591a\u9636\u6bb5\u51b3\u7b56\u8fc7\u7a0b\u7684\u6700\u4f18\u7b56\u7565\uff0c\u5176\u57fa\u672c\u8981\u7d20\u5982\u4e0b\u3002 \u9636\u6bb5\uff1a\u628a\u4e00\u4e2a\u95ee\u9898\u7684\u8fc7\u7a0b\u5212\u5206\u4e3a\u76f8\u4e92\u8054\u7cfb\u7684\u9636\u6bb5 (\u5373\u5b50\u95ee\u9898) \u72b6\u6001\uff1a\u63cf\u8ff0\u7cfb\u7edf\u60c5\u51b5\u7684\u4fe1\u606f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u72b6\u6001\u53ef\u7528\u4e00\u4e2a\u72b6\u6001\u53d8\u91cf\u63cf\u8ff0\uff0c\u8bb0\u7b2c $k$ \u9636\u6bb5\u7684\u72b6\u6001\u53d8\u91cf\u4e3a $s_k$\u3002 \u51b3\u7b56\uff1a\u7cfb\u7edf\u5728\u6bcf\u4e2a\u9636\u6bb5\u90fd\u9700\u8981\u4f5c\u51fa\u51b3\u7b56\uff0c\u51b3\u7b56\u4f7f\u5f97\u7cfb\u7edf\u4ece\u5f53\u524d\u9636\u6bb5\u7684\u72b6\u6001\u6f14\u53d8\u5230\u4e0b\u4e00\u9636\u6bb5\u7684\u72b6\u6001\u3002\u63cf\u8ff0\u51b3\u7b56\u7684\u53d8\u91cf\u8bb0\u4e3a $u_k(s_k)$\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e24\u9636\u6bb5\u4e4b\u95f4\u7684\u72b6\u6001\u8f6c\u79fb\uff0c$s_{k+1}=T(s_k, u_k)$\u3002 \u6307\u6807\u51fd\u6570\uff1a\u8bc4\u4ef7\u6240\u9009\u7b56\u7565\u7684\u4f18\u52a3\uff0c\u901a\u5e38\u8bb0\u4e3a $V_{k,n}(s_k, u_k, ..., s_n)$\uff0c\u5176\u6700\u4f18\u503c\u79f0\u4e3a\u6700\u4f18\u503c\u51fd\u6570\uff0c\u901a\u5e38\u8bb0\u4e3a $f_k(s_k)=opt\\ V_{k,n}(s_k, u_k, s_n)$ \u52a8\u6001\u89c4\u5212\u57fa\u672c\u65b9\u7a0b\uff1a\u901a\u5e38\u5f62\u5f0f\u4e3a $f_k(s_k)=opt\\ V_k(s_k, u_k(s_k))+f_{k+1}(u_k(s_k)), k=n,...,1$\u3002\u901a\u5e38\u6c42\u89e3\u8fc7\u7a0b\u662f\u6309\u9006\u9636\u6bb5\u987a\u5e8f\u8fdb\u884c\u3002","title":"(1). \u57fa\u672c\u6982\u5ff5"},{"location":"4-Advanced/dp/#2","text":"\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7531\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7ec4\u6210\uff1b \u65e0\u540e\u6548\u6027\uff1a\u67d0\u9636\u6bb5\u7684\u72b6\u6001\u4e00\u65e6\u786e\u5b9a\uff0c\u5219\u6b64\u540e\u8fc7\u7a0b\u7684\u6f14\u53d8\u4e0d\u518d\u53d7\u6b64\u524d\u5404\u79cd\u72b6\u6001\u53ca\u51b3\u7b56\u7684\u5f71\u54cd\uff1b \u91cd\u53e0\u5b50\u95ee\u9898\uff1a\u975e\u5fc5\u8981\u6761\u4ef6\uff0c\u662f\u52a8\u6001\u89c4\u5212\u76f8\u5bf9\u4e8e\u641c\u7d22\u548c\u5206\u6cbb\u7684\u4e00\u4e2a\u4f18\u52bf\uff0c\u4e5f\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u4f53\u73b0\u3002","title":"(2). \u9002\u7528\u6761\u4ef6"},{"location":"PART2/dp/editdistance/","text":"Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2. Examples: Input : word1 = \"horse\", word2 = \"ros\" Output : 3 Note: You have the following 3 operations permitted on a word: - Insert a character - Delete a character - Replace a character (Source: LeetCode 72) \u4e3b\u8981\u662f\u5904\u7406\u8fb9\u754c\u6761\u4ef6\u3002 $\\mathrm{dp}[i][j]$\uff1a$\\mathit{word1}[0...i)$ \u548c $\\mathit{word2}[0...j)$ \u7684\u7f16\u8f91\u8ddd\u79bb\u3002 Code int minDistance ( string word1 , string word2 ) { int M = word1 . size () + 1 , N = word2 . size () + 1 ; int dp [ M ][ N ]; for ( int i = 0 ; i < M ; ++ i ) dp [ i ][ 0 ] = i ; for ( int i = 0 ; i < N ; ++ i ) dp [ 0 ][ i ] = i ; for ( int i = 1 ; i < M ; ++ i ) for ( int j = 1 ; j < N ; ++ j ) dp [ i ][ j ] = min ( dp [ i - 1 ][ j ] + 1 , dp [ i ][ j - 1 ] + 1 , dp [ i - 1 ][ j - 1 ] + ( word1 [ i - 1 ] != word2 [ j - 1 ])); return dp [ M - 1 ][ N - 1 ]; }","title":"edit distance"},{"location":"PART2/dp/longestvalidparentheses/","text":"Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring. Examples: Input : \"()(()(()))\" Output : 10 (Source: LeetCode 32) \u601d\u8def \"(\" \u548c \")\" \u6309\u6808\u7684\u8fdb\u51fa\u89c4\u5219\u5339\u914d\uff0c\u4e14\u5339\u914d\u5173\u7cfb\u5728\u5b57\u7b26\u4e32\u4e2d\u5168\u5c40\u552f\u4e00\uff1b \u6bcf\u4e2a\u6709\u6548\u4e32\u4ee5 \"(\" \u8d77\u59cb\uff0c\u4ee5 \")\" \u7ed3\u675f\uff1b \u4e00\u4e2a\u6709\u6548\u5339\u914d\u4e32\u53ef\u80fd\u7531\u591a\u4e2a\u6709\u6548\u4e32\u76f8\u90bb\u800c\u5f62\u6210\u3002 \u52a8\u6001\u89c4\u5212 $\\small \\mathrm{dp}[i]$: \u4ee5 $\\mathrm{s}[i]$ \u4e3a\u7ed3\u5c3e\u7b26\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\u4e32\u7684\u957f\u5ea6\uff0c\u5219\uff1a $$\\small\\mathrm{dp}[i]= \\begin{cases} dp[i-1]+2+dp[i-(\\mathrm{dp}[i-1]+2)]& if\\ \\mathrm{s}[i]=\")\"\\ and\\ \\mathrm{s}[i-\\mathrm{len}]=\"(\"\\\\ 0& else \\end{cases}$$ $$ Code: DP int longestValidParentheses ( string s ) { int dp [ s . size () + 1 ] = { 0 }; s = \"?\" + s ; int max = 0 ; for ( int i = 1 ; i <= s . size (); ++ i ) { if ( s [ i ] == ')' && s [ i - dp [ i - 1 ] - 1 ] == '(' ) { dp [ i ] = dp [ i - 1 ] + 2 + dp [ i - dp [ i - 1 ] - 2 ]; if ( dp [ i ] > max ) max = dp [ i ]; } } return max ; } \u6808 \u2003\u5728\u6808\u4e2d\u5b58\u50a8 \"(\" \u7684\u4e0b\u6807\uff0c\u6bcf\u9047\u5230 \")\" \u5f39\u51fa\u6808\u4e2d\u5143\u7d20\uff0c\u7136\u540e\u8ba1\u7b97\u957f\u5ea6\u3002\u8fd9\u6837\u65e0\u6cd5\u8ba1\u7b97\u591a\u4e2a\u5339\u914d\u4e32\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5904\u7406\u3002 Code: stack int longestValidParentheses ( string s ) { stack < pair < int , int >> stack ; int max = 0 , tag = 0 ; for ( int i = 0 ; i < s . size (); ++ i ) { if ( s [ i ] == '(' ) { stack . push ({ i , tag }); tag = 0 ; } else if ( ! stack . empty ()){ int t = i - stack . top (). first + 1 + stack . top (). second ; stack . pop (); if ( t > max ) max = t ; tag = t ; } else { tag = 0 ; } } return max ; }","title":"longest valid parentheses"},{"location":"PART2/dp/longestvalidparentheses/#_1","text":"\"(\" \u548c \")\" \u6309\u6808\u7684\u8fdb\u51fa\u89c4\u5219\u5339\u914d\uff0c\u4e14\u5339\u914d\u5173\u7cfb\u5728\u5b57\u7b26\u4e32\u4e2d\u5168\u5c40\u552f\u4e00\uff1b \u6bcf\u4e2a\u6709\u6548\u4e32\u4ee5 \"(\" \u8d77\u59cb\uff0c\u4ee5 \")\" \u7ed3\u675f\uff1b \u4e00\u4e2a\u6709\u6548\u5339\u914d\u4e32\u53ef\u80fd\u7531\u591a\u4e2a\u6709\u6548\u4e32\u76f8\u90bb\u800c\u5f62\u6210\u3002","title":"\u601d\u8def"},{"location":"PART2/dp/longestvalidparentheses/#_2","text":"$\\small \\mathrm{dp}[i]$: \u4ee5 $\\mathrm{s}[i]$ \u4e3a\u7ed3\u5c3e\u7b26\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\u4e32\u7684\u957f\u5ea6\uff0c\u5219\uff1a $$\\small\\mathrm{dp}[i]= \\begin{cases} dp[i-1]+2+dp[i-(\\mathrm{dp}[i-1]+2)]& if\\ \\mathrm{s}[i]=\")\"\\ and\\ \\mathrm{s}[i-\\mathrm{len}]=\"(\"\\\\ 0& else \\end{cases}$$ $$ Code: DP int longestValidParentheses ( string s ) { int dp [ s . size () + 1 ] = { 0 }; s = \"?\" + s ; int max = 0 ; for ( int i = 1 ; i <= s . size (); ++ i ) { if ( s [ i ] == ')' && s [ i - dp [ i - 1 ] - 1 ] == '(' ) { dp [ i ] = dp [ i - 1 ] + 2 + dp [ i - dp [ i - 1 ] - 2 ]; if ( dp [ i ] > max ) max = dp [ i ]; } } return max ; }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"PART2/dp/longestvalidparentheses/#_3","text":"\u5728\u6808\u4e2d\u5b58\u50a8 \"(\" \u7684\u4e0b\u6807\uff0c\u6bcf\u9047\u5230 \")\" \u5f39\u51fa\u6808\u4e2d\u5143\u7d20\uff0c\u7136\u540e\u8ba1\u7b97\u957f\u5ea6\u3002\u8fd9\u6837\u65e0\u6cd5\u8ba1\u7b97\u591a\u4e2a\u5339\u914d\u4e32\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5904\u7406\u3002 Code: stack int longestValidParentheses ( string s ) { stack < pair < int , int >> stack ; int max = 0 , tag = 0 ; for ( int i = 0 ; i < s . size (); ++ i ) { if ( s [ i ] == '(' ) { stack . push ({ i , tag }); tag = 0 ; } else if ( ! stack . empty ()){ int t = i - stack . top (). first + 1 + stack . top (). second ; stack . pop (); if ( t > max ) max = t ; tag = t ; } else { tag = 0 ; } } return max ; }","title":"\u6808"},{"location":"PART2/dp/maxrect/","text":"Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area. Examples: Input : \u2002 [[\"1\",\"0\",\"1\",\"0\",\"0\"], [\"1\",\"0\",\"1\",\"1\",\"1\"], [\"1\",\"1\",\"1\",\"1\",\"1\"], [\"1\",\"0\",\"0\",\"1\",\"0\"]] Output : 6 (Source: LeetCode 85) \u52a8\u6001\u89c4\u5212 1 $\\small\\mathrm{dp}[i][j][k]$\uff1a\u4ee5\u6570\u7ec4\u4e2d $(i,j)$ \u4f4d\u7f6e\u7684\u70b9\u4f5c\u4e3a\u77e9\u5f62\u53f3\u4e0b\u89d2\u70b9\u3001\u957f\u4e3a $k+1$ \u7684\u6700\u5927\u77e9\u5f62\u7684\u9762\u79ef\u3002 $$\\small\\mathrm{dp}[i][j][k]= \\begin{cases} \\min(\\mathrm{dp}[i][j-k][0],\\mathrm{dp}[i][j][k-1]/k)\\cdot (k+1)& if\\ k>0\\\\ \\mathrm{dp}[i-1][j][0]+1& if\\ k=0\\ \\&\\&\\ j>0\\ \\&\\&\\ m[i][j]=1 \\end{cases} $$ \u7531\u4e8e $\\small\\mathrm{dp}[i][j][k]$ \u53ea\u9700\u8981\u957f\u4e3a $1$ \u548c $k-1$ \u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u3002 Code: DP1 int maximalRectangle ( vector < vector < char >>& matrix ) { if ( matrix . size () == 0 ) return 0 ; int M = matrix . size (), N = matrix [ 0 ]. size (); int max = 0 ; int dp [ M ][ N ]; for ( int j = 0 ; j < N ; ++ j ) { int t = matrix [ 0 ][ j ] - '0' ; dp [ 0 ][ j ] = t ; if ( t > 0 ) max = 1 ; } for ( int i = 1 ; i < M ; ++ i ) { for ( int j = 0 ; j < N ; ++ j ) { int t = matrix [ i ][ j ] - '0' ; dp [ i ][ j ] = ( t > 0 ) ? ( dp [ i - 1 ][ j ] + 1 ) : 0 ; if ( dp [ i ][ j ] > max ) max = dp [ i ][ j ]; } } int karray [ N ]; for ( int i = 0 ; i < M ; ++ i ) { for ( int j = 1 ; j < N ; ++ j ) { karray [ 0 ] = dp [ i ][ j ]; for ( int k = 1 ; k <= j ; ++ k ) { int t = min ( dp [ i ][ j - k ], karray [ k - 1 ] / k ) * ( k + 1 ); if ( t > max ) max = t ; karray [ k ] = t ; } } } return max ; } \u65f6\u95f4\uff1a$\\small O(MN^2)$\uff0c\u7a7a\u95f4\uff1a$\\small O(MN)$\u3002 \u52a8\u6001\u89c4\u5212 2 \u5bf9\u4e8e\u6ee1\u8db3 $m[i][j]=1$ \u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u77e9\u5f62\uff1a \u4ece $(i,j)$ \u5f00\u59cb\uff0c\u5411\u4e0a\u626b\u63cf\u81f3\u7b2c\u4e00\u4e2a\u4e3a $0$ \u7684\u70b9 $(i-h,j)$\uff1b \u518d\u4ece\u8fb9 $(i,j)\\leftrightarrow (i-h-1,j)$ \u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u626b\u63cf\uff0c\u5f97\u5230\u4e00\u4e2a\u77e9\u5f62\u3002 \u7531\u6b64\u53ef\u5f97\u5230 $M\\cdot N$ \u4e2a\u77e9\u5f62\uff0c\u4e14 $m[i][j]$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u77e9\u5f62\u90fd\u5728\u5176\u4e2d\u3002 \u4ee4 $H_i[j]\u3001L_i[j]$ \u548c $R_i[j]$ \u5206\u522b\u8868\u793a\u901a\u8fc7 $(i,j)$ \u6784\u9020\u7684\u77e9\u5f62\u7684\u9ad8\u548c\u5de6\u53f3\u5ef6\u5c55\u5bbd\u5ea6\uff0c\u7136\u540e\u6709\uff1a \u2003\u2003$\\small H_i[j]= \\begin{cases} H_i[j-1]+1& if\\ m[i][j]=1\\\\ 0& else \\end{cases}$ \u2003\u2003$\\small L_i[j]= \\begin{cases} \\max(lp,L_{i-1}[j])& if\\ m[i][j]=1\\\\ -1& else \\end{cases}$ \u2003\u2003$\\small R_i[j]= \\begin{cases} \\min(rp,R_{i-1}[j])& if\\ m[i][j]=1\\\\ N& else \\end{cases}$ \u5176\u4e2d $lp$ \u548c $rp$ \u5206\u522b\u4e3a\u5728\u7b2c $i$ \u884c\u5411\u5de6\u548c\u5411\u53f3\u626b\u63cf\u5230\u7684\u7b2c\u4e00\u4e2a $0$ \u7684\u4f4d\u7f6e\u3002 Code: DP2 int maximalRectangle ( vector < vector < char >>& matrix ) { if ( matrix . size () == 0 ) return 0 ; int M = matrix . size (), N = matrix [ 0 ]. size (); int max_area = 0 ; int H [ N ] = { 0 }, L [ N ], R [ N ]; fill_n ( L , N , - 1 ); fill_n ( R , N , N ); for ( int i = 0 ; i < M ; ++ i ) { int rp = N ; for ( int j = N - 1 ; j >= 0 ; -- j ) { if ( matrix [ i ][ j ] == '1' ) R [ j ] = min ( R [ j ], rp ); else rp = j , R [ j ] = N ; } int lp = - 1 ; for ( int j = 0 ; j < N ; ++ j ) { if ( matrix [ i ][ j ] == '1' ) L [ j ] = max ( L [ j ], lp ); else lp = j , L [ j ] = - 1 ; } for ( int j = 0 ; j < N ; ++ j ) { H [ j ] = ( matrix [ i ][ j ] == '1' ) ? ( H [ j ] + 1 ) : 0 ; max_area = max (( R [ j ] - L [ j ] - 1 ) * H [ j ], max_area ); } } return max_area ; } \u65f6\u95f4\uff1a$\\small O(MN)$\uff0c\u7a7a\u95f4\uff1a$\\small O(N)$\u3002","title":"maximal rectangle"},{"location":"PART2/dp/maxrect/#1","text":"$\\small\\mathrm{dp}[i][j][k]$\uff1a\u4ee5\u6570\u7ec4\u4e2d $(i,j)$ \u4f4d\u7f6e\u7684\u70b9\u4f5c\u4e3a\u77e9\u5f62\u53f3\u4e0b\u89d2\u70b9\u3001\u957f\u4e3a $k+1$ \u7684\u6700\u5927\u77e9\u5f62\u7684\u9762\u79ef\u3002 $$\\small\\mathrm{dp}[i][j][k]= \\begin{cases} \\min(\\mathrm{dp}[i][j-k][0],\\mathrm{dp}[i][j][k-1]/k)\\cdot (k+1)& if\\ k>0\\\\ \\mathrm{dp}[i-1][j][0]+1& if\\ k=0\\ \\&\\&\\ j>0\\ \\&\\&\\ m[i][j]=1 \\end{cases} $$ \u7531\u4e8e $\\small\\mathrm{dp}[i][j][k]$ \u53ea\u9700\u8981\u957f\u4e3a $1$ \u548c $k-1$ \u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u3002 Code: DP1 int maximalRectangle ( vector < vector < char >>& matrix ) { if ( matrix . size () == 0 ) return 0 ; int M = matrix . size (), N = matrix [ 0 ]. size (); int max = 0 ; int dp [ M ][ N ]; for ( int j = 0 ; j < N ; ++ j ) { int t = matrix [ 0 ][ j ] - '0' ; dp [ 0 ][ j ] = t ; if ( t > 0 ) max = 1 ; } for ( int i = 1 ; i < M ; ++ i ) { for ( int j = 0 ; j < N ; ++ j ) { int t = matrix [ i ][ j ] - '0' ; dp [ i ][ j ] = ( t > 0 ) ? ( dp [ i - 1 ][ j ] + 1 ) : 0 ; if ( dp [ i ][ j ] > max ) max = dp [ i ][ j ]; } } int karray [ N ]; for ( int i = 0 ; i < M ; ++ i ) { for ( int j = 1 ; j < N ; ++ j ) { karray [ 0 ] = dp [ i ][ j ]; for ( int k = 1 ; k <= j ; ++ k ) { int t = min ( dp [ i ][ j - k ], karray [ k - 1 ] / k ) * ( k + 1 ); if ( t > max ) max = t ; karray [ k ] = t ; } } } return max ; } \u65f6\u95f4\uff1a$\\small O(MN^2)$\uff0c\u7a7a\u95f4\uff1a$\\small O(MN)$\u3002","title":"\u52a8\u6001\u89c4\u5212 1"},{"location":"PART2/dp/maxrect/#2","text":"\u5bf9\u4e8e\u6ee1\u8db3 $m[i][j]=1$ \u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u77e9\u5f62\uff1a \u4ece $(i,j)$ \u5f00\u59cb\uff0c\u5411\u4e0a\u626b\u63cf\u81f3\u7b2c\u4e00\u4e2a\u4e3a $0$ \u7684\u70b9 $(i-h,j)$\uff1b \u518d\u4ece\u8fb9 $(i,j)\\leftrightarrow (i-h-1,j)$ \u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u626b\u63cf\uff0c\u5f97\u5230\u4e00\u4e2a\u77e9\u5f62\u3002 \u7531\u6b64\u53ef\u5f97\u5230 $M\\cdot N$ \u4e2a\u77e9\u5f62\uff0c\u4e14 $m[i][j]$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u77e9\u5f62\u90fd\u5728\u5176\u4e2d\u3002 \u4ee4 $H_i[j]\u3001L_i[j]$ \u548c $R_i[j]$ \u5206\u522b\u8868\u793a\u901a\u8fc7 $(i,j)$ \u6784\u9020\u7684\u77e9\u5f62\u7684\u9ad8\u548c\u5de6\u53f3\u5ef6\u5c55\u5bbd\u5ea6\uff0c\u7136\u540e\u6709\uff1a \u2003\u2003$\\small H_i[j]= \\begin{cases} H_i[j-1]+1& if\\ m[i][j]=1\\\\ 0& else \\end{cases}$ \u2003\u2003$\\small L_i[j]= \\begin{cases} \\max(lp,L_{i-1}[j])& if\\ m[i][j]=1\\\\ -1& else \\end{cases}$ \u2003\u2003$\\small R_i[j]= \\begin{cases} \\min(rp,R_{i-1}[j])& if\\ m[i][j]=1\\\\ N& else \\end{cases}$ \u5176\u4e2d $lp$ \u548c $rp$ \u5206\u522b\u4e3a\u5728\u7b2c $i$ \u884c\u5411\u5de6\u548c\u5411\u53f3\u626b\u63cf\u5230\u7684\u7b2c\u4e00\u4e2a $0$ \u7684\u4f4d\u7f6e\u3002 Code: DP2 int maximalRectangle ( vector < vector < char >>& matrix ) { if ( matrix . size () == 0 ) return 0 ; int M = matrix . size (), N = matrix [ 0 ]. size (); int max_area = 0 ; int H [ N ] = { 0 }, L [ N ], R [ N ]; fill_n ( L , N , - 1 ); fill_n ( R , N , N ); for ( int i = 0 ; i < M ; ++ i ) { int rp = N ; for ( int j = N - 1 ; j >= 0 ; -- j ) { if ( matrix [ i ][ j ] == '1' ) R [ j ] = min ( R [ j ], rp ); else rp = j , R [ j ] = N ; } int lp = - 1 ; for ( int j = 0 ; j < N ; ++ j ) { if ( matrix [ i ][ j ] == '1' ) L [ j ] = max ( L [ j ], lp ); else lp = j , L [ j ] = - 1 ; } for ( int j = 0 ; j < N ; ++ j ) { H [ j ] = ( matrix [ i ][ j ] == '1' ) ? ( H [ j ] + 1 ) : 0 ; max_area = max (( R [ j ] - L [ j ] - 1 ) * H [ j ], max_area ); } } return max_area ; } \u65f6\u95f4\uff1a$\\small O(MN)$\uff0c\u7a7a\u95f4\uff1a$\\small O(N)$\u3002","title":"\u52a8\u6001\u89c4\u5212 2"},{"location":"PART2/dp/maxsubarray/","text":"Given an integer array nums , find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Examples: Input : [-2,1,-3,4,-1,2,1,-5,4] Output : 6 Explanation : [4,-1,2,1] has the largest sum = 6. (LeetCode 53) \u52a8\u6001\u89c4\u5212 Code: DP int maxSubArray ( vector < int >& nums ) { int res = nums [ 0 ]; int dp [ nums . size ()] = { res }; for ( int i = 1 ; i < nums . size (); ++ i ) { dp [ i ] = ( dp [ i - 1 ] > 0 ) ? ( dp [ i - 1 ] + nums [ i ]) : nums [ i ]; if ( dp [ i ] > res ) res = dp [ i ]; } return res ; } \u5206\u6cbb Code: Divide And Conquer int maxSubArray ( vector < int >& nums ) { return maxsubarray ( 0 , nums . size (), nums ); } int maxsubarray ( int i , int j , vector < int >& nums ) { if ( i + 1 == j ) return nums [ i ]; int mid = i + ( j - i ) / 2 ; int r1 = maxsubarray ( i , mid , nums ); int r2 = maxsubarray ( mid , j , nums ); int lsum = nums [ mid - 1 ], rsum = nums [ mid ]; for ( int k = mid - 2 , tsum = nums [ mid - 1 ]; k >= i ; -- k ) { tsum += nums [ k ]; if ( tsum > lsum ) lsum = tsum ; } for ( int k = mid + 1 , tsum = nums [ mid ]; k < j ; ++ k ) { tsum += nums [ k ]; if ( tsum > rsum ) rsum = tsum ; } return max ( max ( r1 , r2 ), lsum + rsum ); } int max ( int a , int b ) { return a > b ? a : b ; }","title":"maximum subarray"},{"location":"PART2/dp/maxsubarray/#_1","text":"Code: DP int maxSubArray ( vector < int >& nums ) { int res = nums [ 0 ]; int dp [ nums . size ()] = { res }; for ( int i = 1 ; i < nums . size (); ++ i ) { dp [ i ] = ( dp [ i - 1 ] > 0 ) ? ( dp [ i - 1 ] + nums [ i ]) : nums [ i ]; if ( dp [ i ] > res ) res = dp [ i ]; } return res ; }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"PART2/dp/maxsubarray/#_2","text":"Code: Divide And Conquer int maxSubArray ( vector < int >& nums ) { return maxsubarray ( 0 , nums . size (), nums ); } int maxsubarray ( int i , int j , vector < int >& nums ) { if ( i + 1 == j ) return nums [ i ]; int mid = i + ( j - i ) / 2 ; int r1 = maxsubarray ( i , mid , nums ); int r2 = maxsubarray ( mid , j , nums ); int lsum = nums [ mid - 1 ], rsum = nums [ mid ]; for ( int k = mid - 2 , tsum = nums [ mid - 1 ]; k >= i ; -- k ) { tsum += nums [ k ]; if ( tsum > lsum ) lsum = tsum ; } for ( int k = mid + 1 , tsum = nums [ mid ]; k < j ; ++ k ) { tsum += nums [ k ]; if ( tsum > rsum ) rsum = tsum ; } return max ( max ( r1 , r2 ), lsum + rsum ); } int max ( int a , int b ) { return a > b ? a : b ; }","title":"\u5206\u6cbb"},{"location":"PART2/dp/rematch/","text":"regular expression matching Given an input string ( s ) and a pattern ( p ), implement regular expression matching with support for '.' and '*'. Examples: Input : s = \"aab\", p = \"c*a*b\" Output : true Input : s = \"ab\", p = \".*\" Output : true Note: - '.' Matches any single character. - '*' Matches zero or more of the preceding element. - s could be empty and contains only lowercase letters a-z. - p could be empty and contains only lowercase letters a-z, and characters like . or *. (Source: LeetCode 10) $\\small \\mathrm{dp}[i][j]: \\mathsf{if\\ source[0...i]\\ matches\\ with\\ pattern[0...j]}$ $\\small \\mathrm{dp}[i][j]=(\\mathrm{dp}[i][j-1]\\ $ && $\\small\\ \\mathit{matches}(\\epsilon,\\mathrm{p}[j-1]))\\ $ || $\\small\\ (\\mathrm{dp}[i-1][j-1]\\ $ && $\\small\\ \\mathit{matches}(\\mathrm{s}[i...i],\\mathrm{p}[j-1]))\\ $|| ... \u4e3a\u65b9\u4fbf\u5904\u7406 $\\small \\mathrm{p}[0...]$ \u88ab\u7a7a\u5339\u914d\u7684\u60c5\u51b5\uff0c\u5728 $\\small\\mathrm{s}$ \u548c $\\small\\mathrm{p}$ \u4e4b\u524d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u3002 Code bool isMatch ( string s , string p ) { p = \"a\" + p ; s = \"a\" + s ; vector < int > dest = generateIndex ( p ); int M = s . size (), N = dest . size () - 1 ; bool dp [ M ][ N ]; string t = p . substr ( 0 , dest [ 1 ] - dest [ 0 ]); for ( int i = 0 ; i < M ; ++ i ) dp [ i ][ 0 ] = singleMatch ( s . substr ( 0 , i + 1 ), t ); for ( int j = 1 ; j < N ; ++ j ) { string pi = p . substr ( dest [ j ], dest [ j + 1 ] - dest [ j ]); for ( int i = 0 ; i < M ; ++ i ) { bool t = false ; for ( int k = 0 ; k <= i ; ++ k ) { t = t || ( dp [ i - k ][ j - 1 ] && singleMatch ( s . substr ( i + 1 - k , k ), pi )); if ( t ) break ; } dp [ i ][ j ] = t ; } } return dp [ M - 1 ][ N - 1 ]; } vector < int > generateIndex ( string & p ) { vector < int > ret ; int i ; for ( i = 0 ; i < p . size (); ++ i ) { if ( p [ i ] == '*' ) continue ; ret . push_back ( i ); } ret . push_back ( i ); return ret ; } bool singleMatch ( const string & src , const string & pat ) { if ( pat [ 0 ] == '.' ) { if ( pat . size () == 1 ) return src . size () == 1 ; return true ; } if ( pat . size () == 1 ) return src . size () == 1 && src [ 0 ] == pat [ 0 ]; for ( auto & c : src ) if ( c != pat [ 0 ]) return false ; return true ; } wildcard matching (\u901a\u914d\u7b26\u5339\u914d) Given an input string ( s ) and a pattern ( p ), implement wildcard pattern matching with support for '?' and ' ' . Examples: Input : s = \"adceb\", p = \"*a*b\" Output : true Input : s = \"\", p = \"*\" Output *: true Note: - '?' Matches any single character. - '*' Matches any sequence of characters (including the empty sequence). - s could be empty and contains only lowercase letters a-z. - p could be empty and contains only lowercase letters a-z, and characters like ? or *. (Source: LeetCode 44) \u7c7b\u4f3c\u4e8e\u4e0a\u9762\u4e00\u9898\uff0c\u6b64\u9898\u4e5f\u53ef\u4ee5\u901a\u8fc7 DP \u89e3\u51b3\uff0c\u601d\u8def\u57fa\u672c\u4e00\u6837\uff0c\u4f46\u8fd9\u91cc\u9700\u8981\u4f18\u5316\u4e00\u4e0b\u3002 Code: DP (Only Doing Time Optimization) bool isMatch ( string s , string p ) { p = \"a\" + p ; s = \"a\" + s ; int M = s . size (), N = p . size (); bool dp [ M ][ N ]; bool tagp [ M ], tagc [ M ]; bool * tagpre = tagp , * tagcur = tagc ; dp [ 0 ][ 0 ] = true ; tagpre [ 0 ] = true ; for ( int i = 1 ; i < M ; ++ i ) { dp [ i ][ 0 ] = false ; tagpre [ i ] = true ; } for ( int j = 1 ; j < N ; ++ j ) { bool havetrue = false ; for ( int i = 0 ; i < M ; ++ i ) { bool t = false ; if ( p [ j ] == '*' ) { t = tagpre [ i ]; } else if ( i != 0 ) { t = dp [ i - 1 ][ j - 1 ] && singleMatch ( s . substr ( i , 1 ), p [ j ]); } dp [ i ][ j ] = t ; if ( t ) havetrue = true ; tagcur [ i ] = havetrue ; } bool * tmp = tagcur ; tagpre = tagcur ; tagcur = tmp ; } return dp [ M - 1 ][ N - 1 ]; } bool singleMatch ( const string & src , char & pat ) { if ( pat == '*' ) return true ; if ( pat == '?' ) return src . size () == 1 ; return src . size () == 1 && src [ 0 ] == pat ; } \u2003\u4f46\u6b64\u9898\u53ef\u7528\u8d2a\u5fc3\u89e3\u51b3\uff0c\u4e24\u79cd\u65b9\u6cd5\u7684\u6548\u7387\u7684\u5dee\u522b\u4f53\u73b0\u5728\u5bf9 $*$ \u7684\u5904\u7406\u4e0a\u3002 \u2003\u4e3b\u4f53\u601d\u8def\u662f\uff0c\u4ece\u5de6\u5411\u53f3\u626b\u63cf $\\mathrm{s}$ \u548c $\\mathrm{p}$\uff0c\u5f53\u9047\u5230 $\\mathrm{p}$ \u4e2d\u7684 $*$ \u65f6\uff0c\u8bb0\u5f55\u5b83\u7684\u4f4d\u7f6e\uff0c\u6682\u4ee4\u5176\u5339\u914d $\\mathrm{s}$ \u4e2d\u957f\u5ea6\u4e3a $x$ \u7684\u4e32\uff1b\u82e5\u540e\u9762\u7684\u5339\u914d\u8fc7\u7a0b\u6210\u529f\uff0c\u5219\u8fd4\u56de $true$\uff1b\u5426\u5219\uff0c\u56de\u6eaf\u5230\u8bb0\u5f55\u7684\u4f4d\u7f6e\uff0c\u518d\u5c1d\u8bd5\u4ee4 $*$ \u5339\u914d\u957f\u4e3a $x+1$ \u7684\u4e32\uff0c\u5982\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u6210\u529f\u6216\u5931\u8d25\u3002 \u2003\u8d2a\u5fc3\u6027\u8d28\u7684\u4f53\u73b0\u5728\u4e8e\uff0c\u56de\u6eaf\u53ea\u9700\u8981\u56de\u6eaf\u5230\u8ddd $\\mathrm{p}$ \u4e2d\u6307\u9488\u6700\u8fd1\u7684\u4e00\u4e2a $*$ \u5373\u53ef\u3002 \u7ed3\u8bba\uff1a\u8bbe $\\mathrm{s}=s_1s_2s_3, \\mathrm{p}=p_1*s_2*p_3$\uff0c\u5176\u4e2d $s_{ij}\\in\\lbrace a...z\\rbrace$\uff0c$p_{ij}\\in\\lbrace a...z\\rbrace\\cup\\lbrace*, ?\\rbrace$\uff0c\u82e5 $\\mathrm{s}$ \u4e0e $\\mathrm{p}$ \u5339 \u2003\u2003\u2003\u914d\u4e14 $s_1s_2$ \u4e0e $p_1*s_2$ \u5339\u914d\uff0c\u90a3\u4e48 $s_3$ \u4e00\u5b9a\u4e0e $*\\ p_3$ \u5339\u914d\u3002 \u8bf4\u660e\uff1a\u5047\u8bbe $s_3$ \u4e0d\u4e0e $*p_3$ \u5339\u914d\uff0c\u90a3\u4e48\u56de\u6eaf\u5230 $s_2$ \u4e4b\u524d\u7684\u90a3\u4e2a $*$\uff0c\u4ee4\u5176\u5339\u914d\u66f4\u591a\u7684\u5143\u7d20\uff0c\u540c\u65f6\u8fd8\u8981\u5728 $\\mathrm{s}$ \u4e2d\u7684\u4e00\u4e2a\u65b0\u7684\u4f4d\u7f6e\u5339\u914d $s_2$ (\u5047\u8bbe\u6b64\u4f4d\u7f6e\u5b58\u5728)\uff0c$\\mathrm{s}$ \u5269\u4e0b\u7684\u90e8\u5206\u8bb0\u4e3a $s_3[i...]$\u3002\u7531 $s_3$ \u4e0d\u4e0e $*p_3$ \u5339\u914d\uff0c\u5219\u5de6\u4fa7\u622a\u53bb\u4e00\u90e8\u5206\u540e\u4e5f\u4e0d\u5339\u914d (\u7531\u4e8e $p_3$ \u524d\u9762\u7684 $*$ \u53ef\u5438\u6536\u4e00\u5207\u5b57\u7b26)\uff0c\u5219 $\\mathrm{s}$ \u4e0e $\\mathrm{p}$ \u4e0d\u5339\u914d\uff0c\u77db\u76fe\u4ea7\u751f\u3002 Code: Greedy // ver1 // the behavior equals to ver2 bool isMatch ( string s , string p ) { s += \"-\" , p += \"-\" ; int i = 0 , j = 0 , pi = - 1 , pj = - 1 ; while ( i < s . size ()) { if ( s [ i ] == p [ j ] || p [ j ] == '?' ) { ++ i , ++ j ; } else if ( p [ j ] == '*' ) { pi = i ; pj = j ++ ; } else if ( pi >= 0 ) { i = ++ pi ; j = pj + 1 ; } else return false ; } return j == p . size (); } // ver2 // i j \u540c\u65f6\u626b\u63cf\u5b8c\uff1a\u6210\u529f\u9000\u51fa // i \u5148\u626b\u63cf\u5b8c\uff0c\u5219\u9700\u8981\u5224\u65ad j \u5269\u4e0b\u7684\u90e8\u5206\u662f\u5426\u90fd\u662f * // j \u5148\u626b\u63cf\u5b8c\uff0c\u5931\u914d\uff0c\u8fdb\u5165 case3\uff0c\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a * \u7684\u4f4d\u7f6e (*p3 <--> s3) bool isMatch ( string s , string p ) { int i = 0 , j = 0 , pi = - 1 , pj = - 1 ; while ( i < s . size ()) { if (( s [ i ] == p [ j ] || p [ j ] == '?' ) && j < p . size ()) { // case1 ++ i , ++ j ; } else if ( j < p . size () && p [ j ] == '*' ) { // case2 pi = i ; pj = j ++ ; } else if ( pi >= 0 ) { // case3 i = ++ pi ; j = pj + 1 ; } else return false ; // case4 } while ( j < p . size () && p [ j ] == '*' ) ++ j ; return j == p . size (); } \u5f53 $i$ \u5148\u8d8a\u754c\uff0c\u8bbe $\\mathrm{p}$ \u5269\u4e0b\u7684\u4e32\u4e3a $r$\uff0c\u4ecd\u6cbf\u7528\u7ed3\u8bba\u4e2d\u7684\u7b26\u53f7\uff0c\u8bf4\u660e $s_3$ \u548c $*p_3$(\u53ef\u4ee5\u5047\u8bbe $*$ \u5b58\u5728\u4e14 $p_3$ \u4e0d\u4e3a\u7a7a) \u5339\u914d\u3002\u7531\u4e8e $p_3$ \u4e2d\u5728\u6b64\u5904\u4e0d\u5305\u542b $*$\uff0c\u56e0\u6b64 $\\mathrm{s}$ \u4e0e $\\mathrm{p}$ \u5339\u914d\u7b49\u4ef7\u4e8e $r$ \u4e2d\u5143\u7d20\u5168\u662f $*$\u3002","title":"expression matching"},{"location":"PART2/dp/rematch/#regular-expression-matching","text":"Given an input string ( s ) and a pattern ( p ), implement regular expression matching with support for '.' and '*'. Examples: Input : s = \"aab\", p = \"c*a*b\" Output : true Input : s = \"ab\", p = \".*\" Output : true Note: - '.' Matches any single character. - '*' Matches zero or more of the preceding element. - s could be empty and contains only lowercase letters a-z. - p could be empty and contains only lowercase letters a-z, and characters like . or *. (Source: LeetCode 10) $\\small \\mathrm{dp}[i][j]: \\mathsf{if\\ source[0...i]\\ matches\\ with\\ pattern[0...j]}$ $\\small \\mathrm{dp}[i][j]=(\\mathrm{dp}[i][j-1]\\ $ && $\\small\\ \\mathit{matches}(\\epsilon,\\mathrm{p}[j-1]))\\ $ || $\\small\\ (\\mathrm{dp}[i-1][j-1]\\ $ && $\\small\\ \\mathit{matches}(\\mathrm{s}[i...i],\\mathrm{p}[j-1]))\\ $|| ... \u4e3a\u65b9\u4fbf\u5904\u7406 $\\small \\mathrm{p}[0...]$ \u88ab\u7a7a\u5339\u914d\u7684\u60c5\u51b5\uff0c\u5728 $\\small\\mathrm{s}$ \u548c $\\small\\mathrm{p}$ \u4e4b\u524d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u3002 Code bool isMatch ( string s , string p ) { p = \"a\" + p ; s = \"a\" + s ; vector < int > dest = generateIndex ( p ); int M = s . size (), N = dest . size () - 1 ; bool dp [ M ][ N ]; string t = p . substr ( 0 , dest [ 1 ] - dest [ 0 ]); for ( int i = 0 ; i < M ; ++ i ) dp [ i ][ 0 ] = singleMatch ( s . substr ( 0 , i + 1 ), t ); for ( int j = 1 ; j < N ; ++ j ) { string pi = p . substr ( dest [ j ], dest [ j + 1 ] - dest [ j ]); for ( int i = 0 ; i < M ; ++ i ) { bool t = false ; for ( int k = 0 ; k <= i ; ++ k ) { t = t || ( dp [ i - k ][ j - 1 ] && singleMatch ( s . substr ( i + 1 - k , k ), pi )); if ( t ) break ; } dp [ i ][ j ] = t ; } } return dp [ M - 1 ][ N - 1 ]; } vector < int > generateIndex ( string & p ) { vector < int > ret ; int i ; for ( i = 0 ; i < p . size (); ++ i ) { if ( p [ i ] == '*' ) continue ; ret . push_back ( i ); } ret . push_back ( i ); return ret ; } bool singleMatch ( const string & src , const string & pat ) { if ( pat [ 0 ] == '.' ) { if ( pat . size () == 1 ) return src . size () == 1 ; return true ; } if ( pat . size () == 1 ) return src . size () == 1 && src [ 0 ] == pat [ 0 ]; for ( auto & c : src ) if ( c != pat [ 0 ]) return false ; return true ; }","title":"regular expression matching"},{"location":"PART2/dp/rematch/#wildcard-matching","text":"Given an input string ( s ) and a pattern ( p ), implement wildcard pattern matching with support for '?' and ' ' . Examples: Input : s = \"adceb\", p = \"*a*b\" Output : true Input : s = \"\", p = \"*\" Output *: true Note: - '?' Matches any single character. - '*' Matches any sequence of characters (including the empty sequence). - s could be empty and contains only lowercase letters a-z. - p could be empty and contains only lowercase letters a-z, and characters like ? or *. (Source: LeetCode 44) \u7c7b\u4f3c\u4e8e\u4e0a\u9762\u4e00\u9898\uff0c\u6b64\u9898\u4e5f\u53ef\u4ee5\u901a\u8fc7 DP \u89e3\u51b3\uff0c\u601d\u8def\u57fa\u672c\u4e00\u6837\uff0c\u4f46\u8fd9\u91cc\u9700\u8981\u4f18\u5316\u4e00\u4e0b\u3002 Code: DP (Only Doing Time Optimization) bool isMatch ( string s , string p ) { p = \"a\" + p ; s = \"a\" + s ; int M = s . size (), N = p . size (); bool dp [ M ][ N ]; bool tagp [ M ], tagc [ M ]; bool * tagpre = tagp , * tagcur = tagc ; dp [ 0 ][ 0 ] = true ; tagpre [ 0 ] = true ; for ( int i = 1 ; i < M ; ++ i ) { dp [ i ][ 0 ] = false ; tagpre [ i ] = true ; } for ( int j = 1 ; j < N ; ++ j ) { bool havetrue = false ; for ( int i = 0 ; i < M ; ++ i ) { bool t = false ; if ( p [ j ] == '*' ) { t = tagpre [ i ]; } else if ( i != 0 ) { t = dp [ i - 1 ][ j - 1 ] && singleMatch ( s . substr ( i , 1 ), p [ j ]); } dp [ i ][ j ] = t ; if ( t ) havetrue = true ; tagcur [ i ] = havetrue ; } bool * tmp = tagcur ; tagpre = tagcur ; tagcur = tmp ; } return dp [ M - 1 ][ N - 1 ]; } bool singleMatch ( const string & src , char & pat ) { if ( pat == '*' ) return true ; if ( pat == '?' ) return src . size () == 1 ; return src . size () == 1 && src [ 0 ] == pat ; } \u2003\u4f46\u6b64\u9898\u53ef\u7528\u8d2a\u5fc3\u89e3\u51b3\uff0c\u4e24\u79cd\u65b9\u6cd5\u7684\u6548\u7387\u7684\u5dee\u522b\u4f53\u73b0\u5728\u5bf9 $*$ \u7684\u5904\u7406\u4e0a\u3002 \u2003\u4e3b\u4f53\u601d\u8def\u662f\uff0c\u4ece\u5de6\u5411\u53f3\u626b\u63cf $\\mathrm{s}$ \u548c $\\mathrm{p}$\uff0c\u5f53\u9047\u5230 $\\mathrm{p}$ \u4e2d\u7684 $*$ \u65f6\uff0c\u8bb0\u5f55\u5b83\u7684\u4f4d\u7f6e\uff0c\u6682\u4ee4\u5176\u5339\u914d $\\mathrm{s}$ \u4e2d\u957f\u5ea6\u4e3a $x$ \u7684\u4e32\uff1b\u82e5\u540e\u9762\u7684\u5339\u914d\u8fc7\u7a0b\u6210\u529f\uff0c\u5219\u8fd4\u56de $true$\uff1b\u5426\u5219\uff0c\u56de\u6eaf\u5230\u8bb0\u5f55\u7684\u4f4d\u7f6e\uff0c\u518d\u5c1d\u8bd5\u4ee4 $*$ \u5339\u914d\u957f\u4e3a $x+1$ \u7684\u4e32\uff0c\u5982\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u6210\u529f\u6216\u5931\u8d25\u3002 \u2003\u8d2a\u5fc3\u6027\u8d28\u7684\u4f53\u73b0\u5728\u4e8e\uff0c\u56de\u6eaf\u53ea\u9700\u8981\u56de\u6eaf\u5230\u8ddd $\\mathrm{p}$ \u4e2d\u6307\u9488\u6700\u8fd1\u7684\u4e00\u4e2a $*$ \u5373\u53ef\u3002 \u7ed3\u8bba\uff1a\u8bbe $\\mathrm{s}=s_1s_2s_3, \\mathrm{p}=p_1*s_2*p_3$\uff0c\u5176\u4e2d $s_{ij}\\in\\lbrace a...z\\rbrace$\uff0c$p_{ij}\\in\\lbrace a...z\\rbrace\\cup\\lbrace*, ?\\rbrace$\uff0c\u82e5 $\\mathrm{s}$ \u4e0e $\\mathrm{p}$ \u5339 \u2003\u2003\u2003\u914d\u4e14 $s_1s_2$ \u4e0e $p_1*s_2$ \u5339\u914d\uff0c\u90a3\u4e48 $s_3$ \u4e00\u5b9a\u4e0e $*\\ p_3$ \u5339\u914d\u3002 \u8bf4\u660e\uff1a\u5047\u8bbe $s_3$ \u4e0d\u4e0e $*p_3$ \u5339\u914d\uff0c\u90a3\u4e48\u56de\u6eaf\u5230 $s_2$ \u4e4b\u524d\u7684\u90a3\u4e2a $*$\uff0c\u4ee4\u5176\u5339\u914d\u66f4\u591a\u7684\u5143\u7d20\uff0c\u540c\u65f6\u8fd8\u8981\u5728 $\\mathrm{s}$ \u4e2d\u7684\u4e00\u4e2a\u65b0\u7684\u4f4d\u7f6e\u5339\u914d $s_2$ (\u5047\u8bbe\u6b64\u4f4d\u7f6e\u5b58\u5728)\uff0c$\\mathrm{s}$ \u5269\u4e0b\u7684\u90e8\u5206\u8bb0\u4e3a $s_3[i...]$\u3002\u7531 $s_3$ \u4e0d\u4e0e $*p_3$ \u5339\u914d\uff0c\u5219\u5de6\u4fa7\u622a\u53bb\u4e00\u90e8\u5206\u540e\u4e5f\u4e0d\u5339\u914d (\u7531\u4e8e $p_3$ \u524d\u9762\u7684 $*$ \u53ef\u5438\u6536\u4e00\u5207\u5b57\u7b26)\uff0c\u5219 $\\mathrm{s}$ \u4e0e $\\mathrm{p}$ \u4e0d\u5339\u914d\uff0c\u77db\u76fe\u4ea7\u751f\u3002 Code: Greedy // ver1 // the behavior equals to ver2 bool isMatch ( string s , string p ) { s += \"-\" , p += \"-\" ; int i = 0 , j = 0 , pi = - 1 , pj = - 1 ; while ( i < s . size ()) { if ( s [ i ] == p [ j ] || p [ j ] == '?' ) { ++ i , ++ j ; } else if ( p [ j ] == '*' ) { pi = i ; pj = j ++ ; } else if ( pi >= 0 ) { i = ++ pi ; j = pj + 1 ; } else return false ; } return j == p . size (); } // ver2 // i j \u540c\u65f6\u626b\u63cf\u5b8c\uff1a\u6210\u529f\u9000\u51fa // i \u5148\u626b\u63cf\u5b8c\uff0c\u5219\u9700\u8981\u5224\u65ad j \u5269\u4e0b\u7684\u90e8\u5206\u662f\u5426\u90fd\u662f * // j \u5148\u626b\u63cf\u5b8c\uff0c\u5931\u914d\uff0c\u8fdb\u5165 case3\uff0c\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a * \u7684\u4f4d\u7f6e (*p3 <--> s3) bool isMatch ( string s , string p ) { int i = 0 , j = 0 , pi = - 1 , pj = - 1 ; while ( i < s . size ()) { if (( s [ i ] == p [ j ] || p [ j ] == '?' ) && j < p . size ()) { // case1 ++ i , ++ j ; } else if ( j < p . size () && p [ j ] == '*' ) { // case2 pi = i ; pj = j ++ ; } else if ( pi >= 0 ) { // case3 i = ++ pi ; j = pj + 1 ; } else return false ; // case4 } while ( j < p . size () && p [ j ] == '*' ) ++ j ; return j == p . size (); } \u5f53 $i$ \u5148\u8d8a\u754c\uff0c\u8bbe $\\mathrm{p}$ \u5269\u4e0b\u7684\u4e32\u4e3a $r$\uff0c\u4ecd\u6cbf\u7528\u7ed3\u8bba\u4e2d\u7684\u7b26\u53f7\uff0c\u8bf4\u660e $s_3$ \u548c $*p_3$(\u53ef\u4ee5\u5047\u8bbe $*$ \u5b58\u5728\u4e14 $p_3$ \u4e0d\u4e3a\u7a7a) \u5339\u914d\u3002\u7531\u4e8e $p_3$ \u4e2d\u5728\u6b64\u5904\u4e0d\u5305\u542b $*$\uff0c\u56e0\u6b64 $\\mathrm{s}$ \u4e0e $\\mathrm{p}$ \u5339\u914d\u7b49\u4ef7\u4e8e $r$ \u4e2d\u5143\u7d20\u5168\u662f $*$\u3002","title":"wildcard matching (\u901a\u914d\u7b26\u5339\u914d)"},{"location":"PART2/dp/scramblestr/","text":"Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively. To scramble the string, we may choose any non-leaf node and swap its two children. Below is one possible representation of s1 = \"great\". For example, if we choose the node \"gr\" and \"eat\" and \"at\", it produces a scrambled string \"rgtae\". great rgtae / \\ / \\ gr eat rg tae / \\ / \\ --> / \\ / \\ g r e at r g ta e / \\ /\\ a t t a (Source: LeetCode 87) \u76f4\u63a5\u9012\u5f52 \u2003\u4efb\u4e00\u5b57\u7b26\u4e32\u90fd\u53ef\u80fd\u5728\u4e2d\u95f4\u7684\u4efb\u4e00\u4f4d\u7f6e\u88ab\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u4e32\uff0c\u56e0\u6b64\u5b83\u6709\u591a\u79cd\u4e8c\u53c9\u6811\u7684\u8868\u793a\u65b9\u6cd5\u3002\u5982\u679c\u67d0\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ee1\u8db3\u6270\u4e71\u5b57\u7b26\u4e32\u7684\u5224\u5b9a\uff0c\u5b83\u4eec\u7684\u5de6\u53f3\u5b69\u5b50\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u6837\u7684\u5224\u5b9a\uff0c\u56e0\u6b64\u76f4\u63a5\u7684\u601d\u8def\u662f\u901a\u8fc7\u9012\u5f52\u89e3\u51b3\u3002\u6ce8\u610f\u8003\u8651\u5f53\u524d\u7ed3\u70b9\u88ab\u6270\u4e71\u7684\u60c5\u51b5\u3002 Code bool isScramble ( string s1 , string s2 ) { if ( s1 . length () != s2 . length ()) return false ; if ( s1 . length () == 1 ) return s1 [ 0 ] == s2 [ 0 ]; // heuristic int f1 = 0 , f2 = 0 ; for ( int i = 0 ; i < s1 . length (); ++ i ) f1 += s1 [ i ], f2 += s2 [ i ]; if ( f1 != f2 ) return false ; for ( int i = 0 ; i < s1 . length () - 1 ; ++ i ) { string t1 = s1 . substr ( 0 , i + 1 ), t2 = s1 . substr ( i + 1 , s1 . length () - i - 1 ); if ( isScramble ( t1 , s2 . substr ( 0 , i + 1 )) && isScramble ( t2 , s2 . substr ( i + 1 , s1 . length () - i - 1 ))) return true ; if ( isScramble ( t2 , s2 . substr ( 0 , s1 . length () - i - 1 )) && isScramble ( t1 , s2 . substr ( s1 . length () - i - 1 , i + 1 ))) return true ; } return false ; } \u7531\u4e8e\u9012\u5f52\u8fc7\u7a0b\u4e2d\u6709\u91cd\u590d\u5b50\u95ee\u9898\uff0c\u5176\u65f6\u95f4\u6d88\u8017\u5f88\u5927\u3002\u7531 $\\small T(n)=2\\cdot (T(1) + ... + T(n - 1) + O(1))$ \u53ef\u77e5\uff0c\u5176\u590d\u6742\u6027\u662f\u6307\u6570\u7ea7\u7684\u3002 \u52a8\u6001\u89c4\u5212 \u53d7\u9012\u5f52\u8fc7\u7a0b\u7684\u542f\u53d1\uff0c\u53ef\u6309\u5982\u4e0b\u65b9\u5f0f\u5212\u5206\u95ee\u9898\u3002 \u4ee4 $\\small \\mathrm{dp}[i][j][k]$ \u8868\u793a $\\small s1[i, i+k)$ \u548c $\\small s2[j, j+k)$ \u662f\u5426\u6ee1\u8db3\u6270\u4e71\u5b57\u7b26\u4e32\u7684\u5224\u5b9a\u3002 \u2460 \u5f53\u524d\u7ed3\u70b9\u672a\u88ab\u6270\u4e71\uff1a $$ \\small\\mathrm{dp}[i][j][k]=\\bigvee_{n\\in [1,k-1]} \\mathrm{dp}[i][j][n] \\ \\&\\&\\ \\mathrm{dp}[i+n][j+n][k-n] $$ \u2461 \u5f53\u524d\u7ed3\u70b9\u88ab\u6270\u4e71\uff1a $$ \\small\\mathrm{dp}[i][j][k]=\\bigvee_{n\\in [1,k-1]} \\mathrm{dp}[i][j+k-n][n] \\ \\&\\&\\ \\mathrm{dp}[i+n][j][k-n] $$ Code bool isScramble ( string s1 , string s2 ) { if ( s1 . length () != s2 . length ()) return false ; int L = s1 . length (); bool dp [ L ][ L ][ L + 1 ]; for ( int i = 0 ; i < L ; ++ i ) for ( int j = 0 ; j < L ; ++ j ) dp [ i ][ j ][ 1 ] = s1 [ i ] == s2 [ j ]; for ( int k = 2 ; k <= L ; ++ k ) { for ( int i = 0 ; i < L - k + 1 ; ++ i ) { for ( int j = 0 ; j < L - k + 1 ; ++ j ) { bool t = false ; for ( int n = 1 ; n < k ; ++ n ) { t |= dp [ i ][ j ][ n ] & dp [ i + n ][ j + n ][ k - n ]; t |= dp [ i ][ j + k - n ][ n ] & dp [ i + n ][ j ][ k - n ]; if ( t ) break ; } dp [ i ][ j ][ k ] = t ; } } } return dp [ 0 ][ 0 ][ L ]; } \u65f6\u95f4\uff1a$\\small O(n^4)$\uff0c\u7a7a\u95f4\uff1a$\\small O(n^3)$\u3002","title":"scramble string"},{"location":"PART2/dp/scramblestr/#_1","text":"\u4efb\u4e00\u5b57\u7b26\u4e32\u90fd\u53ef\u80fd\u5728\u4e2d\u95f4\u7684\u4efb\u4e00\u4f4d\u7f6e\u88ab\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u4e32\uff0c\u56e0\u6b64\u5b83\u6709\u591a\u79cd\u4e8c\u53c9\u6811\u7684\u8868\u793a\u65b9\u6cd5\u3002\u5982\u679c\u67d0\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ee1\u8db3\u6270\u4e71\u5b57\u7b26\u4e32\u7684\u5224\u5b9a\uff0c\u5b83\u4eec\u7684\u5de6\u53f3\u5b69\u5b50\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u6837\u7684\u5224\u5b9a\uff0c\u56e0\u6b64\u76f4\u63a5\u7684\u601d\u8def\u662f\u901a\u8fc7\u9012\u5f52\u89e3\u51b3\u3002\u6ce8\u610f\u8003\u8651\u5f53\u524d\u7ed3\u70b9\u88ab\u6270\u4e71\u7684\u60c5\u51b5\u3002 Code bool isScramble ( string s1 , string s2 ) { if ( s1 . length () != s2 . length ()) return false ; if ( s1 . length () == 1 ) return s1 [ 0 ] == s2 [ 0 ]; // heuristic int f1 = 0 , f2 = 0 ; for ( int i = 0 ; i < s1 . length (); ++ i ) f1 += s1 [ i ], f2 += s2 [ i ]; if ( f1 != f2 ) return false ; for ( int i = 0 ; i < s1 . length () - 1 ; ++ i ) { string t1 = s1 . substr ( 0 , i + 1 ), t2 = s1 . substr ( i + 1 , s1 . length () - i - 1 ); if ( isScramble ( t1 , s2 . substr ( 0 , i + 1 )) && isScramble ( t2 , s2 . substr ( i + 1 , s1 . length () - i - 1 ))) return true ; if ( isScramble ( t2 , s2 . substr ( 0 , s1 . length () - i - 1 )) && isScramble ( t1 , s2 . substr ( s1 . length () - i - 1 , i + 1 ))) return true ; } return false ; } \u7531\u4e8e\u9012\u5f52\u8fc7\u7a0b\u4e2d\u6709\u91cd\u590d\u5b50\u95ee\u9898\uff0c\u5176\u65f6\u95f4\u6d88\u8017\u5f88\u5927\u3002\u7531 $\\small T(n)=2\\cdot (T(1) + ... + T(n - 1) + O(1))$ \u53ef\u77e5\uff0c\u5176\u590d\u6742\u6027\u662f\u6307\u6570\u7ea7\u7684\u3002","title":"\u76f4\u63a5\u9012\u5f52"},{"location":"PART2/dp/scramblestr/#_2","text":"\u53d7\u9012\u5f52\u8fc7\u7a0b\u7684\u542f\u53d1\uff0c\u53ef\u6309\u5982\u4e0b\u65b9\u5f0f\u5212\u5206\u95ee\u9898\u3002 \u4ee4 $\\small \\mathrm{dp}[i][j][k]$ \u8868\u793a $\\small s1[i, i+k)$ \u548c $\\small s2[j, j+k)$ \u662f\u5426\u6ee1\u8db3\u6270\u4e71\u5b57\u7b26\u4e32\u7684\u5224\u5b9a\u3002 \u2460 \u5f53\u524d\u7ed3\u70b9\u672a\u88ab\u6270\u4e71\uff1a $$ \\small\\mathrm{dp}[i][j][k]=\\bigvee_{n\\in [1,k-1]} \\mathrm{dp}[i][j][n] \\ \\&\\&\\ \\mathrm{dp}[i+n][j+n][k-n] $$ \u2461 \u5f53\u524d\u7ed3\u70b9\u88ab\u6270\u4e71\uff1a $$ \\small\\mathrm{dp}[i][j][k]=\\bigvee_{n\\in [1,k-1]} \\mathrm{dp}[i][j+k-n][n] \\ \\&\\&\\ \\mathrm{dp}[i+n][j][k-n] $$ Code bool isScramble ( string s1 , string s2 ) { if ( s1 . length () != s2 . length ()) return false ; int L = s1 . length (); bool dp [ L ][ L ][ L + 1 ]; for ( int i = 0 ; i < L ; ++ i ) for ( int j = 0 ; j < L ; ++ j ) dp [ i ][ j ][ 1 ] = s1 [ i ] == s2 [ j ]; for ( int k = 2 ; k <= L ; ++ k ) { for ( int i = 0 ; i < L - k + 1 ; ++ i ) { for ( int j = 0 ; j < L - k + 1 ; ++ j ) { bool t = false ; for ( int n = 1 ; n < k ; ++ n ) { t |= dp [ i ][ j ][ n ] & dp [ i + n ][ j + n ][ k - n ]; t |= dp [ i ][ j + k - n ][ n ] & dp [ i + n ][ j ][ k - n ]; if ( t ) break ; } dp [ i ][ j ][ k ] = t ; } } } return dp [ 0 ][ 0 ][ L ]; } \u65f6\u95f4\uff1a$\\small O(n^4)$\uff0c\u7a7a\u95f4\uff1a$\\small O(n^3)$\u3002","title":"\u52a8\u6001\u89c4\u5212"},{"location":"PART2/intervaltree/1/","text":"Given a list of axis-aligned rectangles . Each rectanges[i] = [x1, y1, x2, y2] , where [x1, y1] are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the $i_{th}$ rectangle. Find the total area coverd by all rectangles in the plane. Since the answer may be too large, return it modulo 10 ^ 9 + 7. Examples: Input : [[0,0,2,2],[1,0,2,3],[1,0,3,1]] Output : 6 Input : [[0,0,1000000000,1000000000]] Output : 49 Explanation : The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2 = (-7)^2 = 49. Note: - 1 <= rectangles.length <= 200 - rectangles[i].length = 4 - 0 <= rectangles[i][j] <= 10^9 - the total area coverd by all rectangles will never exceed 2^63-1 and thus will fit in a 64-bit signed integer. \u89e3\u9898\u6b65\u9aa4 (1). Sweep Line \u7b97\u6cd5 \u2003\u89c6 $x$ \u8f74\u88ab\u77e9\u5f62\u7684\u7ad6\u8fb9\u5212\u5206\u82e5\u5e72\u4e2a\u533a\u57df\uff0c\u5047\u8bbe\u6709\u4e00\u6761\u5e73\u884c\u4e8e $y$ \u8f74\u7684\u626b\u63cf\u7ebf\u4ece\u6700\u5de6\u4fa7\u5f00\u59cb\u626b\u63cf\uff0c\u76ee\u7684\u662f\u6bcf\u626b\u63cf\u5230\u4e00\u4e2a\u533a\u57df\u5c31\u8ba1\u7b97\u51fa\u6709\u6548\u9762\u79ef\uff0c\u6700\u540e\u628a\u6240\u6709\u503c\u7d2f\u52a0\u5f97\u5230\u7ed3\u679c\u3002 \u2003\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u6bcf\u5f53\u626b\u63cf\u7ebf\u4f4d\u4e8e\u4e00\u4e2a\u533a\u57df\u4e2d\u65f6\uff0c\u88ab\u626b\u63cf\u7ebf\u7a7f\u8fc7\u7684\u77e9\u5f62\u5de6\u4fa7\u8fb9\u4e00\u5b9a\u88ab\u626b\u63cf\u8fc7\uff0c\u4e14\u53f3\u4fa7\u8fb9\u4e00\u5b9a\u672a\u88ab\u626b\u63cf\uff0c\u56e0\u6b64\u6bcf\u4e2a\u533a\u57df\u7684\u9762\u79ef = \u88ab\u7a7f\u8fc7\u7684\u77e9\u5f62\u7684\u5de6\u8fb9\u5728 $y$ \u8f74\u6295\u5f71\u7684\u5e76\u96c6 \u00d7 \u533a\u57df\u7684\u5bbd\u3002 Steps of Sweep-Line: \u628a\u7ad6\u8fb9\u6392\u5e8f\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u626b\u63cf\u3002 1. line = \u5f53\u524d\u626b\u5230\u7684\u8fb9 2. area += \u4e24\u8fb9\u4e4b\u5dee \u00d7 \u53e6\u4e00\u8fb9\u6295\u5f71\u7684\u5e76\u96c6\u957f\u5ea6 3. if line \u662f\u5de6\u4fa7\u8fb9\uff1aline \u7684\u6bcf\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u8986\u76d6\u6b21\u6570\u52a0\u4e00 4. else: line \u7684\u6bcf\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u8986\u76d6\u6b21\u6570\u51cf\u4e00 \u56e0\u6b64\uff0c\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u52a8\u6001\u7ef4\u62a4\u533a\u95f4\u7684\u8986\u76d6\u4fe1\u606f\uff0c\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 (2). \u7ebf\u6bb5\u6811 \u6b64\u9898\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u9650\u5236\u6709\uff1a \u533a\u95f4\u8de8\u5ea6\u5927\u4e14\u5206\u6563\uff0c\u9700\u8981\u79bb\u6563\u5316\uff1b \u9700\u8981\u533a\u95f4\u4fee\u6539\uff0c\u4e14\u4e00\u6b21\u52a0\u4e00\u4e00\u5b9a\u5bf9\u5e94\u4e00\u6b21\u51cf\u4e00\uff1b \u6bcf\u4e2a\u7ed3\u70b9\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u5185\u88ab\u8986\u76d6\u5355\u4f4d\u7684\u5e76\u96c6\u957f\u5ea6\uff1b \u53ea\u6709\u6839\u7ed3\u70b9\u9700\u8981\u88ab\u67e5\u8be2\u3002 \u56e0\u6b64\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e24\u4e2a\u5c5e\u6027\uff1a\u5e76\u96c6\u957f\u5ea6\u548c\u4fee\u6539\u7684\u6807\u8bb0\u3002\u8fd9\u91cc\u4f7f\u7528\u6c38\u4e45\u5316\u6807\u8bb0\u7684\u65b9\u6cd5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u4f46\u7531\u4e8e\u8981\u7ef4\u62a4\u5e76\u96c6\u957f\u5ea6\uff0c\u9700\u8981\u989d\u5916\u6ce8\u610f\uff1a \u53ea\u6709\u5728\u5f53\u524d\u7ed3\u70b9\u672a\u88ab\u6807\u8bb0\u7684\u60c5\u51b5\u4e0b\uff0c\u904d\u5386\u5b83\u7684\u5de6\u53f3\u5b50\u6811\u4e4b\u540e\uff0c\u624d\u9700\u8981\u66f4\u65b0\u5b83\u7684\u5e76\u96c6\u957f\u5ea6\u5c5e\u6027\uff1b \u5f53\u4fee\u6539\u4e00\u6bb5\u76ee\u7684\u533a\u95f4\u7684\u6807\u8bb0\u503c\u540e\uff0c\u9700\u8981\u5224\u65ad\u5b83\u662f\u5426\u521a\u597d\u88ab\u6807\u8bb0\u4e00\u6b21 \u6216 \u6807\u8bb0\u521a\u597d\u88ab\u5220\u9664\u5e72\u51c0\uff0c\u4f9d\u6b64\u5224\u65ad\u5982\u4f55\u66f4\u65b0\u5176\u5e76\u96c6\u957f\u5ea6\u5c5e\u6027\uff1b\u5982\u679c\u662f\u540e\u8005\uff0c\u8fd8\u8981\u6ce8\u610f\u662f\u5426\u4e3a\u53f6\u7ed3\u70b9\u3002 \u4ee3\u7801 code: LeetCode 850 #include <iostream> #include <vector> #include <set> #include <algorithm> #include <cstdlib> #include <cstdio> using namespace std ; const int LEFT = 1 , RIGHT = 2 ; struct Line { int direction , y1 , y2 , x ; Line ( int direction , int y1 , int y2 , int x ) { this -> direction = direction ; this -> y1 = y1 ; this -> y2 = y2 ; this -> x = x ; } bool operator < ( Line line ) { if ( this -> x < line . x ) return true ; return false ; } }; struct SegTree { int * tree ; unsigned char * addsum ; vector < int > ymap ; SegTree ( set < int > ycoords ) { ymap = vector < int > ( ycoords . begin (), ycoords . end ()); tree = ( int * ) malloc ( sizeof ( int ) * ymap . size () * 4 ); addsum = ( unsigned char * ) malloc ( sizeof ( char ) * ymap . size () * 4 ); build ( 0 , 0 , ymap . size ()); } void build ( int index , int l , int r ) { tree [ index ] = addsum [ index ] = 0 ; if ( l == r - 1 ) return ; int mid = l + ( r - l ) / 2 ; build ( index * 2 + 1 , l , mid ); build ( index * 2 + 2 , mid , r ); } int query_tree () { return tree [ 0 ]; } void modify_tree ( Line line ) { auto beg = ymap . begin (), end = ymap . end (); auto it1 = lower_bound ( beg , end , line . y1 ); auto it2 = lower_bound ( beg , end , line . y2 ); int leftval = ( line . direction == LEFT ) ? ( 1 ) : ( - 1 ); modify ( 0 , 0 , ymap . size (), ( int )( it1 - beg ), ( int )( it2 - beg ), leftval ); } void modify ( int index , int lc , int rc , int ls , int rs , int val ) { if ( lc >= ls && rc <= rs ) { addsum [ index ] += val ; if ( addsum [ index ] == 1 ) { tree [ index ] = ymap [ rc ] - ymap [ lc ]; } else if ( addsum [ index ] == 0 ) { if ( lc != rc - 1 ) tree [ index ] = tree [ 2 * index + 1 ] + tree [ 2 * index + 2 ]; else tree [ index ] = 0 ; } return ; } int mid = lc + ( rc - lc ) / 2 ; if ( ls < mid ) modify ( index * 2 + 1 , lc , mid , ls , rs , val ); if ( rs > mid ) modify ( index * 2 + 2 , mid , rc , ls , rs , val ); if ( addsum [ index ] == 0 ) tree [ index ] = tree [ 2 * index + 1 ] + tree [ 2 * index + 2 ]; } }; class Solution { public : int rectangleArea ( vector < vector < int >>& rectangles ) { int size = rectangles . size () * 2 ; set < int > ylinenum ; if ( size == 0 ) return 0 ; vector < Line > lines ; lines . reserve ( size ); for ( vector < int > & rect : rectangles ) { lines . emplace_back ( LEFT , rect [ 1 ], rect [ 3 ], rect [ 0 ]); lines . emplace_back ( RIGHT , rect [ 1 ], rect [ 3 ], rect [ 2 ]); ylinenum . insert ( rect [ 1 ]); ylinenum . insert ( rect [ 3 ]); } sort ( lines . begin (), lines . end ()); long long area = 0 ; SegTree tree ( ylinenum ); tree . modify_tree ( lines [ 0 ]); int last = lines [ 0 ]. x ; for ( auto it = lines . begin () + 1 ; it != lines . end (); ++ it ) { area += ( it -> x - last ) * ( long long )( tree . query_tree ()); tree . modify_tree ( * it ); last = it -> x ; } return area % 1000000007 ; } };","title":"rect area"},{"location":"PART2/intervaltree/1/#_1","text":"","title":"\u89e3\u9898\u6b65\u9aa4"},{"location":"PART2/intervaltree/1/#1-sweep-line","text":"\u89c6 $x$ \u8f74\u88ab\u77e9\u5f62\u7684\u7ad6\u8fb9\u5212\u5206\u82e5\u5e72\u4e2a\u533a\u57df\uff0c\u5047\u8bbe\u6709\u4e00\u6761\u5e73\u884c\u4e8e $y$ \u8f74\u7684\u626b\u63cf\u7ebf\u4ece\u6700\u5de6\u4fa7\u5f00\u59cb\u626b\u63cf\uff0c\u76ee\u7684\u662f\u6bcf\u626b\u63cf\u5230\u4e00\u4e2a\u533a\u57df\u5c31\u8ba1\u7b97\u51fa\u6709\u6548\u9762\u79ef\uff0c\u6700\u540e\u628a\u6240\u6709\u503c\u7d2f\u52a0\u5f97\u5230\u7ed3\u679c\u3002 \u2003\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u6bcf\u5f53\u626b\u63cf\u7ebf\u4f4d\u4e8e\u4e00\u4e2a\u533a\u57df\u4e2d\u65f6\uff0c\u88ab\u626b\u63cf\u7ebf\u7a7f\u8fc7\u7684\u77e9\u5f62\u5de6\u4fa7\u8fb9\u4e00\u5b9a\u88ab\u626b\u63cf\u8fc7\uff0c\u4e14\u53f3\u4fa7\u8fb9\u4e00\u5b9a\u672a\u88ab\u626b\u63cf\uff0c\u56e0\u6b64\u6bcf\u4e2a\u533a\u57df\u7684\u9762\u79ef = \u88ab\u7a7f\u8fc7\u7684\u77e9\u5f62\u7684\u5de6\u8fb9\u5728 $y$ \u8f74\u6295\u5f71\u7684\u5e76\u96c6 \u00d7 \u533a\u57df\u7684\u5bbd\u3002 Steps of Sweep-Line: \u628a\u7ad6\u8fb9\u6392\u5e8f\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u626b\u63cf\u3002 1. line = \u5f53\u524d\u626b\u5230\u7684\u8fb9 2. area += \u4e24\u8fb9\u4e4b\u5dee \u00d7 \u53e6\u4e00\u8fb9\u6295\u5f71\u7684\u5e76\u96c6\u957f\u5ea6 3. if line \u662f\u5de6\u4fa7\u8fb9\uff1aline \u7684\u6bcf\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u8986\u76d6\u6b21\u6570\u52a0\u4e00 4. else: line \u7684\u6bcf\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u8986\u76d6\u6b21\u6570\u51cf\u4e00 \u56e0\u6b64\uff0c\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u52a8\u6001\u7ef4\u62a4\u533a\u95f4\u7684\u8986\u76d6\u4fe1\u606f\uff0c\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002","title":"(1). Sweep Line \u7b97\u6cd5"},{"location":"PART2/intervaltree/1/#2","text":"\u6b64\u9898\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u9650\u5236\u6709\uff1a \u533a\u95f4\u8de8\u5ea6\u5927\u4e14\u5206\u6563\uff0c\u9700\u8981\u79bb\u6563\u5316\uff1b \u9700\u8981\u533a\u95f4\u4fee\u6539\uff0c\u4e14\u4e00\u6b21\u52a0\u4e00\u4e00\u5b9a\u5bf9\u5e94\u4e00\u6b21\u51cf\u4e00\uff1b \u6bcf\u4e2a\u7ed3\u70b9\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u5185\u88ab\u8986\u76d6\u5355\u4f4d\u7684\u5e76\u96c6\u957f\u5ea6\uff1b \u53ea\u6709\u6839\u7ed3\u70b9\u9700\u8981\u88ab\u67e5\u8be2\u3002 \u56e0\u6b64\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e24\u4e2a\u5c5e\u6027\uff1a\u5e76\u96c6\u957f\u5ea6\u548c\u4fee\u6539\u7684\u6807\u8bb0\u3002\u8fd9\u91cc\u4f7f\u7528\u6c38\u4e45\u5316\u6807\u8bb0\u7684\u65b9\u6cd5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u4f46\u7531\u4e8e\u8981\u7ef4\u62a4\u5e76\u96c6\u957f\u5ea6\uff0c\u9700\u8981\u989d\u5916\u6ce8\u610f\uff1a \u53ea\u6709\u5728\u5f53\u524d\u7ed3\u70b9\u672a\u88ab\u6807\u8bb0\u7684\u60c5\u51b5\u4e0b\uff0c\u904d\u5386\u5b83\u7684\u5de6\u53f3\u5b50\u6811\u4e4b\u540e\uff0c\u624d\u9700\u8981\u66f4\u65b0\u5b83\u7684\u5e76\u96c6\u957f\u5ea6\u5c5e\u6027\uff1b \u5f53\u4fee\u6539\u4e00\u6bb5\u76ee\u7684\u533a\u95f4\u7684\u6807\u8bb0\u503c\u540e\uff0c\u9700\u8981\u5224\u65ad\u5b83\u662f\u5426\u521a\u597d\u88ab\u6807\u8bb0\u4e00\u6b21 \u6216 \u6807\u8bb0\u521a\u597d\u88ab\u5220\u9664\u5e72\u51c0\uff0c\u4f9d\u6b64\u5224\u65ad\u5982\u4f55\u66f4\u65b0\u5176\u5e76\u96c6\u957f\u5ea6\u5c5e\u6027\uff1b\u5982\u679c\u662f\u540e\u8005\uff0c\u8fd8\u8981\u6ce8\u610f\u662f\u5426\u4e3a\u53f6\u7ed3\u70b9\u3002","title":"(2). \u7ebf\u6bb5\u6811"},{"location":"PART2/intervaltree/1/#_2","text":"code: LeetCode 850 #include <iostream> #include <vector> #include <set> #include <algorithm> #include <cstdlib> #include <cstdio> using namespace std ; const int LEFT = 1 , RIGHT = 2 ; struct Line { int direction , y1 , y2 , x ; Line ( int direction , int y1 , int y2 , int x ) { this -> direction = direction ; this -> y1 = y1 ; this -> y2 = y2 ; this -> x = x ; } bool operator < ( Line line ) { if ( this -> x < line . x ) return true ; return false ; } }; struct SegTree { int * tree ; unsigned char * addsum ; vector < int > ymap ; SegTree ( set < int > ycoords ) { ymap = vector < int > ( ycoords . begin (), ycoords . end ()); tree = ( int * ) malloc ( sizeof ( int ) * ymap . size () * 4 ); addsum = ( unsigned char * ) malloc ( sizeof ( char ) * ymap . size () * 4 ); build ( 0 , 0 , ymap . size ()); } void build ( int index , int l , int r ) { tree [ index ] = addsum [ index ] = 0 ; if ( l == r - 1 ) return ; int mid = l + ( r - l ) / 2 ; build ( index * 2 + 1 , l , mid ); build ( index * 2 + 2 , mid , r ); } int query_tree () { return tree [ 0 ]; } void modify_tree ( Line line ) { auto beg = ymap . begin (), end = ymap . end (); auto it1 = lower_bound ( beg , end , line . y1 ); auto it2 = lower_bound ( beg , end , line . y2 ); int leftval = ( line . direction == LEFT ) ? ( 1 ) : ( - 1 ); modify ( 0 , 0 , ymap . size (), ( int )( it1 - beg ), ( int )( it2 - beg ), leftval ); } void modify ( int index , int lc , int rc , int ls , int rs , int val ) { if ( lc >= ls && rc <= rs ) { addsum [ index ] += val ; if ( addsum [ index ] == 1 ) { tree [ index ] = ymap [ rc ] - ymap [ lc ]; } else if ( addsum [ index ] == 0 ) { if ( lc != rc - 1 ) tree [ index ] = tree [ 2 * index + 1 ] + tree [ 2 * index + 2 ]; else tree [ index ] = 0 ; } return ; } int mid = lc + ( rc - lc ) / 2 ; if ( ls < mid ) modify ( index * 2 + 1 , lc , mid , ls , rs , val ); if ( rs > mid ) modify ( index * 2 + 2 , mid , rc , ls , rs , val ); if ( addsum [ index ] == 0 ) tree [ index ] = tree [ 2 * index + 1 ] + tree [ 2 * index + 2 ]; } }; class Solution { public : int rectangleArea ( vector < vector < int >>& rectangles ) { int size = rectangles . size () * 2 ; set < int > ylinenum ; if ( size == 0 ) return 0 ; vector < Line > lines ; lines . reserve ( size ); for ( vector < int > & rect : rectangles ) { lines . emplace_back ( LEFT , rect [ 1 ], rect [ 3 ], rect [ 0 ]); lines . emplace_back ( RIGHT , rect [ 1 ], rect [ 3 ], rect [ 2 ]); ylinenum . insert ( rect [ 1 ]); ylinenum . insert ( rect [ 3 ]); } sort ( lines . begin (), lines . end ()); long long area = 0 ; SegTree tree ( ylinenum ); tree . modify_tree ( lines [ 0 ]); int last = lines [ 0 ]. x ; for ( auto it = lines . begin () + 1 ; it != lines . end (); ++ it ) { area += ( it -> x - last ) * ( long long )( tree . query_tree ()); tree . modify_tree ( * it ); last = it -> x ; } return area % 1000000007 ; } };","title":"\u4ee3\u7801"},{"location":"PART2/ufset/1/","text":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Examples: Input : [100, 4, 200, 1, 3, 2] Output : 4 Explanation : The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. (LeetCode 128) 1. Hash + DP \u2003\u56e0\u4e3a\u8981\u9ad8\u6548\u8bbf\u95ee\u201c nums[i-1]/nums[i+1] \u662f\u5426\u51fa\u73b0\u5728\u67d0\u6bb5\u8303\u56f4\u5185\u201d\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6545\u9700\u8981\u4f7f\u7528 Hash ;\u904d\u5386 nums \uff0c\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230 Map \u4e2d\uff0c\u5e76\u4ee4 Map(k, v) \u7684\u542b\u4e49\u4e3a\u5f53\u524d\u54c8\u5e0c\u8868\u4e2d\u4ee5 k \u4e3a\u533a\u95f4\u7aef\u70b9\u7684\u6700\u5927\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\u4e3a v \uff0c\u7136\u540e\u82e5 nums[i] \u662f\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\uff0c\u6267\u884c\u5982\u4e0b\u8fc7\u7a0b\uff1a \u5982\u679c\u53ea\u6709 nums[i] - 1 \u5df2\u51fa\u73b0\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u66f4\u65b0 Map[nums[i]] \u548c Map[nums[i] - llen] \uff1b \u5982\u679c\u53ea\u6709 nums[i] + 1 \u5df2\u51fa\u73b0\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fc7\u7a0b\u548c\u4e0a\u9762\u7c7b\u4f3c\uff1b \u5982\u679c\u4e8c\u8005\u5747\u51fa\u73b0\uff0c\u5219\u66f4\u65b0 Map[nums[i] - llen] \u548c Map[nums[i] + rlen] \u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c Map(k, v) \u5185\u53ea\u6709\u5f53\u524d k \u662f\u67d0\u8fde\u7eed\u5e8f\u5217\u7684\u5de6\u53f3\u7aef\u70b9\u65f6\uff0c v \u624d\u662f\u6709\u6548\u7684\uff0c\u800c\u4e0a\u8ff0\u8fc7\u7a0b\u88ab\u8bbf\u95ee\u7684\u4e00\u5b9a\u662f\u7aef\u70b9\u3002 Code: Hash + DP class Solution { public : int longestConsecutive ( vector < int >& nums ) { int max = 0 ; unordered_map < int , int > rmap ; for ( int i = 0 ; i < nums . size (); ++ i ) { if ( rmap . count ( nums [ i ])) continue ; int res = 1 ; int c1 = rmap . count ( nums [ i ] - 1 ), c2 = rmap . count ( nums [ i ] + 1 ); if ( c1 == 1 && c2 == 1 ) { int llen = rmap [ nums [ i ] + 1 ], rlen = rmap [ nums [ i ] - 1 ]; res = rmap [ nums [ i ] + llen ] = rmap [ nums [ i ] - rlen ] = llen + rlen + 1 ; } else if ( c1 == 1 ) { res = rmap [ nums [ i ] - rmap [ nums [ i ] - 1 ]] = rmap [ nums [ i ] - 1 ] + 1 ; } else if ( c2 == 1 ) { res = rmap [ nums [ i ] + rmap [ nums [ i ] + 1 ]] = rmap [ nums [ i ] + 1 ] + 1 ; } rmap . insert ({ nums [ i ], res }); if ( res > max ) max = res ; } return max ; } }; 2. Hash + Union-Find Set \u2003\u5728\u628a\u5143\u7d20\u6dfb\u52a0\u8fdb\u54c8\u5e0c\u8868\u5e76\u52a0\u4ee5\u5224\u65ad\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u4e5f\u7c7b\u4f3c\u4e8e\u628a\u76f8\u90bb\u5143\u7d20\u4f5c\u4e3a\u96c6\u5408\u5408\u5e76\u8d77\u6765\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u3002\u4f46\u7531\u4e8e\u6b64\u9898\u7684\u7279\u6b8a\u6027\uff0c\u53ef\u80fd\u4ec5\u4ec5\u9700\u8981\u5c11\u91cf\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u65b9\u6cd5 1 \u66f4\u597d\u4e00\u4e9b\u3002 Code: Hash + UFSet struct UFSet { int * nodes , * rankt , * sum , size ; int max = 1 ; UFSet ( int size ) { nodes = ( int * ) malloc ( sizeof ( int ) * size ); rank = ( int * ) malloc ( sizeof ( int ) * size ); sum = ( int * ) malloc ( sizeof ( int ) * size ); this -> size = size ; } void init () { for ( int i = 0 ; i < size ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 0 ; sum [ i ] = 1 ; } } int find ( int x ) { return ( nodes [ x ] == x ) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; sum [ rx ] += sum [ ry ]; if ( sum [ rx ] > max ) max = sum [ rx ]; } else { nodes [ rx ] = ry ; sum [ ry ] += sum [ rx ]; if ( sum [ ry ] > max ) max = sum [ ry ]; if ( rank [ rx ] == rank [ ry ]) ++ rank [ ry ]; } } }; class Solution { public : int longestConsecutive ( vector < int >& nums ) { if ( nums . empty ()) return 0 ; unordered_map < int , int > nmap ; // input array -> index in UFSet array for ( int i = 0 ; i < nums . size (); ++ i ) { nmap . insert ({ nums [ i ], i }); } UFSet uset ( nums . size ()); uset . init (); for ( auto it = nmap . begin (); it != nmap . end (); ++ it ) { int num = it -> first , numi = it -> second ; if ( nmap . count ( num + 1 ) == 1 ) { uset . merge ( nmap [ num + 1 ], numi ); } } return uset . max ; } };","title":"longest consec seq"},{"location":"PART2/ufset/1/#1-hash-dp","text":"\u56e0\u4e3a\u8981\u9ad8\u6548\u8bbf\u95ee\u201c nums[i-1]/nums[i+1] \u662f\u5426\u51fa\u73b0\u5728\u67d0\u6bb5\u8303\u56f4\u5185\u201d\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6545\u9700\u8981\u4f7f\u7528 Hash ;\u904d\u5386 nums \uff0c\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230 Map \u4e2d\uff0c\u5e76\u4ee4 Map(k, v) \u7684\u542b\u4e49\u4e3a\u5f53\u524d\u54c8\u5e0c\u8868\u4e2d\u4ee5 k \u4e3a\u533a\u95f4\u7aef\u70b9\u7684\u6700\u5927\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\u4e3a v \uff0c\u7136\u540e\u82e5 nums[i] \u662f\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\uff0c\u6267\u884c\u5982\u4e0b\u8fc7\u7a0b\uff1a \u5982\u679c\u53ea\u6709 nums[i] - 1 \u5df2\u51fa\u73b0\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u66f4\u65b0 Map[nums[i]] \u548c Map[nums[i] - llen] \uff1b \u5982\u679c\u53ea\u6709 nums[i] + 1 \u5df2\u51fa\u73b0\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fc7\u7a0b\u548c\u4e0a\u9762\u7c7b\u4f3c\uff1b \u5982\u679c\u4e8c\u8005\u5747\u51fa\u73b0\uff0c\u5219\u66f4\u65b0 Map[nums[i] - llen] \u548c Map[nums[i] + rlen] \u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c Map(k, v) \u5185\u53ea\u6709\u5f53\u524d k \u662f\u67d0\u8fde\u7eed\u5e8f\u5217\u7684\u5de6\u53f3\u7aef\u70b9\u65f6\uff0c v \u624d\u662f\u6709\u6548\u7684\uff0c\u800c\u4e0a\u8ff0\u8fc7\u7a0b\u88ab\u8bbf\u95ee\u7684\u4e00\u5b9a\u662f\u7aef\u70b9\u3002 Code: Hash + DP class Solution { public : int longestConsecutive ( vector < int >& nums ) { int max = 0 ; unordered_map < int , int > rmap ; for ( int i = 0 ; i < nums . size (); ++ i ) { if ( rmap . count ( nums [ i ])) continue ; int res = 1 ; int c1 = rmap . count ( nums [ i ] - 1 ), c2 = rmap . count ( nums [ i ] + 1 ); if ( c1 == 1 && c2 == 1 ) { int llen = rmap [ nums [ i ] + 1 ], rlen = rmap [ nums [ i ] - 1 ]; res = rmap [ nums [ i ] + llen ] = rmap [ nums [ i ] - rlen ] = llen + rlen + 1 ; } else if ( c1 == 1 ) { res = rmap [ nums [ i ] - rmap [ nums [ i ] - 1 ]] = rmap [ nums [ i ] - 1 ] + 1 ; } else if ( c2 == 1 ) { res = rmap [ nums [ i ] + rmap [ nums [ i ] + 1 ]] = rmap [ nums [ i ] + 1 ] + 1 ; } rmap . insert ({ nums [ i ], res }); if ( res > max ) max = res ; } return max ; } };","title":"1. Hash + DP"},{"location":"PART2/ufset/1/#2-hash-union-find-set","text":"\u5728\u628a\u5143\u7d20\u6dfb\u52a0\u8fdb\u54c8\u5e0c\u8868\u5e76\u52a0\u4ee5\u5224\u65ad\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u4e5f\u7c7b\u4f3c\u4e8e\u628a\u76f8\u90bb\u5143\u7d20\u4f5c\u4e3a\u96c6\u5408\u5408\u5e76\u8d77\u6765\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u3002\u4f46\u7531\u4e8e\u6b64\u9898\u7684\u7279\u6b8a\u6027\uff0c\u53ef\u80fd\u4ec5\u4ec5\u9700\u8981\u5c11\u91cf\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u65b9\u6cd5 1 \u66f4\u597d\u4e00\u4e9b\u3002 Code: Hash + UFSet struct UFSet { int * nodes , * rankt , * sum , size ; int max = 1 ; UFSet ( int size ) { nodes = ( int * ) malloc ( sizeof ( int ) * size ); rank = ( int * ) malloc ( sizeof ( int ) * size ); sum = ( int * ) malloc ( sizeof ( int ) * size ); this -> size = size ; } void init () { for ( int i = 0 ; i < size ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 0 ; sum [ i ] = 1 ; } } int find ( int x ) { return ( nodes [ x ] == x ) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; sum [ rx ] += sum [ ry ]; if ( sum [ rx ] > max ) max = sum [ rx ]; } else { nodes [ rx ] = ry ; sum [ ry ] += sum [ rx ]; if ( sum [ ry ] > max ) max = sum [ ry ]; if ( rank [ rx ] == rank [ ry ]) ++ rank [ ry ]; } } }; class Solution { public : int longestConsecutive ( vector < int >& nums ) { if ( nums . empty ()) return 0 ; unordered_map < int , int > nmap ; // input array -> index in UFSet array for ( int i = 0 ; i < nums . size (); ++ i ) { nmap . insert ({ nums [ i ], i }); } UFSet uset ( nums . size ()); uset . init (); for ( auto it = nmap . begin (); it != nmap . end (); ++ it ) { int num = it -> first , numi = it -> second ; if ( nmap . count ( num + 1 ) == 1 ) { uset . merge ( nmap [ num + 1 ], numi ); } } return uset . max ; } };","title":"2. Hash + Union-Find Set"},{"location":"PART2/ufset/eg/","text":"Smallest String With Swaps You can swap the characters at any pair of indices in the given pairs any number of times. Return the lexicographically smallest string that s can be changed to after using the swaps. Examples: Input : s = \"dcab\", pairs = [[0,3],[1,2]] Output : \"bacd\" Explanation : Swap s[0] and s[3], s = \"bcad\" Swap s[1] and s[2], s = \"bacd\" Note: - 1 <= s.length <= 10^5 - 0 <= pairs.length <= 10^5 - 0 <= pairs[i][0], pairs[i][1] < s.length - s only contains lower case English letters. (LeetCode 1202) Code struct UFSet { int * nodes ; int * rank ; int setsum ; UFSet ( int size ) { nodes = ( int * ) malloc ( sizeof ( int ) * size ); rank = ( int * ) malloc ( sizeof ( int ) * size ); setsum = size ; for ( int i = 0 ; i < size ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 1 ; } } int find ( int x ) { return ( x == nodes [ x ]) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rx == ry ) return ; if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; } else { nodes [ rx ] = ry ; if ( rank [ rx ] == rank [ ry ]) ++ rank [ ry ]; } setsum -- ; } }; struct Solution { string smallestStringWithSwaps ( string s , vector < vector < int >>& pairs ) { UFSet uset ( s . size ()); for ( auto & pair : pairs ) uset . merge ( pair [ 0 ], pair [ 1 ]); unordered_map < int , pair < vector < int > , vector < char >>> dict ; for ( int i = 0 ; i < s . size (); ++ i ) { int root = uset . find ( uset . nodes [ i ]); dict [ root ]. first . push_back ( i ); dict [ root ]. second . push_back ( s [ i ]); } for ( auto it = dict . begin (); it != dict . end (); ++ it ) { auto & chars = it -> second . second ; sort ( chars . begin (), chars . end ()); for ( int i = 0 ; i < chars . size (); ++ i ) s [ it -> second . first [ i ]] = chars [ i ]; } return s ; } }; Regions Cut By Slashes In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, \\, or blank space. These characters divide the square into contiguous regions. Examples: Input : [\"/\\\\\", \"\\\\/\"] Output : 5 Explanation : paint corresponding 2x2 grid (backslash is represented as '\\\\') Note: - 1 <= grid.length == grid[0].length <= 30 - grid[i][j] is either '/', '\\', or ' ' (LeetCode 959) Code struct UFSet { short * nodes ; short * rank ; short circles ; UFSet ( int size ) { nodes = ( short * ) malloc ( sizeof ( short ) * size ); rank = ( short * ) malloc ( sizeof ( short ) * size ); circles = size ; for ( short i = 0 ; i < size ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 1 ; } } short find ( short x ) { return ( x == nodes [ x ]) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( short x , short y ) { short rx = find ( x ), ry = find ( y ); if ( rx == ry ) return ; if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; } else { nodes [ rx ] = ry ; if ( rank [ rx ] == rank [ ry ]) ++ rank [ ry ]; } circles -- ; } }; struct Solution { int regionsBySlashes ( vector < string >& grid ) { int size = grid . size (); UFSet uset ( size * size * 4 ); for ( int i = 0 ; i < size ; ++ i ) { for ( int j = 0 ; j < size ; ++ j ) { procGrid ( grid , i , j , uset ); if ( i != size - 1 ) uset . merge ( getIndex ( i , j , size , 3 ), getIndex ( i + 1 , j , size , 1 )); if ( j != size - 1 ) uset . merge ( getIndex ( i , j , size , 2 ), getIndex ( i , j + 1 , size , 0 )); } } return uset . circles ; } void procGrid ( vector < string >& grid , int i , int j , UFSet & uset ) { int fi = getIndex ( i , j , grid . size (), 0 ); if ( grid [ i ][ j ] == ' ' ) { uset . merge ( fi , fi + 1 ); uset . merge ( fi + 1 , fi + 2 ); uset . merge ( fi + 2 , fi + 3 ); } else if ( grid [ i ][ j ] == '/' ) { uset . merge ( fi , fi + 1 ); uset . merge ( fi + 2 , fi + 3 ); } else { uset . merge ( fi , fi + 3 ); uset . merge ( fi + 1 , fi + 2 ); } } short getIndex ( int i , int j , int size , int seq ) { return 4 * ( i * size + j ) + seq ; } };","title":"some examples"},{"location":"PART2/ufset/eg/#smallest-string-with-swaps","text":"You can swap the characters at any pair of indices in the given pairs any number of times. Return the lexicographically smallest string that s can be changed to after using the swaps. Examples: Input : s = \"dcab\", pairs = [[0,3],[1,2]] Output : \"bacd\" Explanation : Swap s[0] and s[3], s = \"bcad\" Swap s[1] and s[2], s = \"bacd\" Note: - 1 <= s.length <= 10^5 - 0 <= pairs.length <= 10^5 - 0 <= pairs[i][0], pairs[i][1] < s.length - s only contains lower case English letters. (LeetCode 1202) Code struct UFSet { int * nodes ; int * rank ; int setsum ; UFSet ( int size ) { nodes = ( int * ) malloc ( sizeof ( int ) * size ); rank = ( int * ) malloc ( sizeof ( int ) * size ); setsum = size ; for ( int i = 0 ; i < size ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 1 ; } } int find ( int x ) { return ( x == nodes [ x ]) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rx == ry ) return ; if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; } else { nodes [ rx ] = ry ; if ( rank [ rx ] == rank [ ry ]) ++ rank [ ry ]; } setsum -- ; } }; struct Solution { string smallestStringWithSwaps ( string s , vector < vector < int >>& pairs ) { UFSet uset ( s . size ()); for ( auto & pair : pairs ) uset . merge ( pair [ 0 ], pair [ 1 ]); unordered_map < int , pair < vector < int > , vector < char >>> dict ; for ( int i = 0 ; i < s . size (); ++ i ) { int root = uset . find ( uset . nodes [ i ]); dict [ root ]. first . push_back ( i ); dict [ root ]. second . push_back ( s [ i ]); } for ( auto it = dict . begin (); it != dict . end (); ++ it ) { auto & chars = it -> second . second ; sort ( chars . begin (), chars . end ()); for ( int i = 0 ; i < chars . size (); ++ i ) s [ it -> second . first [ i ]] = chars [ i ]; } return s ; } };","title":"Smallest String With Swaps"},{"location":"PART2/ufset/eg/#regions-cut-by-slashes","text":"In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, \\, or blank space. These characters divide the square into contiguous regions. Examples: Input : [\"/\\\\\", \"\\\\/\"] Output : 5 Explanation : paint corresponding 2x2 grid (backslash is represented as '\\\\') Note: - 1 <= grid.length == grid[0].length <= 30 - grid[i][j] is either '/', '\\', or ' ' (LeetCode 959) Code struct UFSet { short * nodes ; short * rank ; short circles ; UFSet ( int size ) { nodes = ( short * ) malloc ( sizeof ( short ) * size ); rank = ( short * ) malloc ( sizeof ( short ) * size ); circles = size ; for ( short i = 0 ; i < size ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 1 ; } } short find ( short x ) { return ( x == nodes [ x ]) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( short x , short y ) { short rx = find ( x ), ry = find ( y ); if ( rx == ry ) return ; if ( rank [ rx ] > rank [ ry ]) { nodes [ ry ] = rx ; } else { nodes [ rx ] = ry ; if ( rank [ rx ] == rank [ ry ]) ++ rank [ ry ]; } circles -- ; } }; struct Solution { int regionsBySlashes ( vector < string >& grid ) { int size = grid . size (); UFSet uset ( size * size * 4 ); for ( int i = 0 ; i < size ; ++ i ) { for ( int j = 0 ; j < size ; ++ j ) { procGrid ( grid , i , j , uset ); if ( i != size - 1 ) uset . merge ( getIndex ( i , j , size , 3 ), getIndex ( i + 1 , j , size , 1 )); if ( j != size - 1 ) uset . merge ( getIndex ( i , j , size , 2 ), getIndex ( i , j + 1 , size , 0 )); } } return uset . circles ; } void procGrid ( vector < string >& grid , int i , int j , UFSet & uset ) { int fi = getIndex ( i , j , grid . size (), 0 ); if ( grid [ i ][ j ] == ' ' ) { uset . merge ( fi , fi + 1 ); uset . merge ( fi + 1 , fi + 2 ); uset . merge ( fi + 2 , fi + 3 ); } else if ( grid [ i ][ j ] == '/' ) { uset . merge ( fi , fi + 1 ); uset . merge ( fi + 2 , fi + 3 ); } else { uset . merge ( fi , fi + 3 ); uset . merge ( fi + 1 , fi + 2 ); } } short getIndex ( int i , int j , int size , int seq ) { return 4 * ( i * size + j ) + seq ; } };","title":"Regions Cut By Slashes"},{"location":"PART2/ufset/hitbricks/","text":"We have a grid of 1s and 0s; the 1s in a cell represent bricks. A brick will not drop if and only if it is directly connected to the top of the grid, or at least one of its (4-way) adjacent bricks will not drop. We will do some erasures sequentially. Each time we want to do the erasure at the location (i, j), the brick (if it exists) on that location will disappear, and then some other bricks may drop because of that erasure. Return an array representing the number of bricks that will drop after each erasure in sequence. Examples: Input : grid = [[1,0,0,0],[1,1,1,0]] hits = [[1,0]] Output : [2] Explanation :If we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So we should return 2. Input : grid = [[1,0,0,0],[1,1,0,0]] hits = [[1,1],[1,0]] Output : [0, 0] Explanation : When we erase the brick at (1, 0), the brick at (1, 1) has already disappeared due to the last move. So each erasure will cause no bricks dropping. Note that the erased brick (1, 0) will not be counted as a dropped brick. Note: - The number of rows and columns in the grid will be in the range [1, 200]. - The number of erasures will not exceed the area of the grid. - It is guaranteed that each erasure will be different from any other erasure, and located inside the grid. - An erasure may refer to a location with no brick - if it does, no bricks drop. (LeetCode 803) \u89e3\u9898\u6b65\u9aa4 \u2003\u6574\u4f53\u7684\u601d\u8def\u4e3a\uff1a\u628a\u4e0e\u6240\u6709\u4e0e\u9876\u7aef\u8fde\u63a5\u7684\u7816\u5757\u89c6\u4f5c\u4e00\u4e2a\u96c6\u5408 $B$\uff1b\u6bcf\u6b21 hit \u53ef\u80fd\u4ece $B$ \u4e2d\u5206\u79bb\u51fa\u4e00\u4e2a\u5b50\u96c6\uff0c\u56e0\u6b64\u9006\u5411\u601d\u7ef4\u8003\u8651\uff0c\u98a0\u5012 hit \u6570\u7ec4\uff0c\u4ece\u672b\u72b6\u6001\u586b\u8865\u7816\u5757\uff0c\u82e5\u586b\u8865\u4f7f\u5f97 $B$ \u591a\u4e86 $n$ \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684 hit \u5c31\u4e00\u5b9a\u4f7f\u5f97 $B$ \u5c11\u4e86 $n$ \u4e2a\u5143\u7d20\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u5e76\u67e5\u96c6\u5bf9\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c\u3002 Steps: 1. \u904d\u5386 hits \uff0c \u628a\u5176\u4e2d\u5bf9\u5e94\u7684\u7816\u5757\u6e05\u9664 \uff0c \u5f97\u672b\u72b6\u6001\u7684 grid ( \u6ce8\u610f\u5904\u7406\u65e0\u6548\u7684 hit ); 2. \u904d\u5386 grid \u7684\u7b2c\u4e00\u884c \uff0c \u628a\u6709\u7816\u7684\u7ed3\u70b9\u5e76\u5165\u9876\u7aef\u96c6\u5408 B ; 3. \u904d\u5386 grid \u5269\u4e0b\u7684\u884c \uff0c \u628a\u6bcf\u5757\u7816\u4e0e\u5176\u4e0a\u4e0b\u5de6\u53f3\u7684\u7816\u5408\u5e76\u4e3a\u4e00\u4e2a\u96c6\u5408 ( \u5982\u679c\u6709 ); 4. \u9006\u5411\u904d\u5386 hits \uff0c \u586b\u8865\u7816\u5757 ( grid [ i ][ j ]= 1 ) \uff0c \u7edf\u8ba1\u6bcf\u4e2a\u64cd\u4f5c\u4f7f\u96c6\u5408 B \u6dfb\u52a0\u7684\u7ed3\u70b9\u6570 \u3002 \u7ec6\u8282\u90e8\u5206\uff1a \u4f7f\u7528\u6309\u6570\u91cf\u5408\u5e76\u548c\u8def\u5f84\u538b\u7f29\u4f18\u5316\uff1b \u4e3a\u4e86\u65b9\u4fbf\u67e5\u8be2 $B$ \u4e2d\u5143\u7d20\u6570\u76ee\uff0c\u8ba9\u6b64\u96c6\u5408\u7684\u6839\u8282\u70b9\u6052\u4e3a\u7ed3\u70b9 $r$\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5f53\u88ab\u5408\u5e76\u7684\u4e24\u4e2a\u7ed3\u70b9\u6709 $r$ \u65f6\uff0c\u8981\u5ffd\u7565\u6309\u6570\u91cf\u5408\u5e76\uff1b \u6ce8\u610f\u5904\u7406\u65e0\u6548 hit \uff1b\u6ce8\u610f\u586b\u8865\u7684\u7816\u5757\u4e3a\u9876\u90e8\u7816\u5757\u7684\u60c5\u51b5\uff1b Code struct UFSet { int * nodes , * rank ; int ROOF ; UFSet ( int size ) { nodes = ( int * ) malloc ( sizeof ( int ) * ( size + 1 )); rank = ( int * ) malloc ( sizeof ( int ) * ( size + 1 )); ROOF = size ; for ( int i = 0 ; i < size + 1 ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 1 ; } } int find ( int x ) { return ( x == nodes [ x ]) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rx == ry ) return ; if ( ry != ROOF && ( rx == ROOF || rank [ rx ] > rank [ ry ])) { nodes [ ry ] = rx ; rank [ rx ] += rank [ ry ]; } else { nodes [ rx ] = ry ; rank [ ry ] += rank [ rx ]; } } }; class Solution { const int DIR [ 4 ][ 2 ] = {{ - 1 , 0 }, { 1 , 0 }, { 0 , - 1 }, { 0 , 1 }}; public : vector < int > hitBricks ( vector < vector < int >>& grid , vector < vector < int >>& hits ) { int size1 = grid . size (), size2 = grid [ 0 ]. size (); UFSet uset ( size1 * size2 ); for ( int i = 0 ; i < hits . size (); ++ i ) { int x = hits [ i ][ 0 ], y = hits [ i ][ 1 ]; if ( grid [ x ][ y ] == 0 ) hits [ i ][ 0 ] = - 1 ; // mark invalid hit grid [ x ][ y ] = 0 ; } for ( int i = 0 ; i < size2 ; ++ i ) if ( grid [ 0 ][ i ] == 1 ) uset . merge ( i , uset . ROOF ); for ( int i = 1 ; i < size1 ; ++ i ) { for ( int j = 0 ; j < size2 ; ++ j ) { if ( grid [ i ][ j ] == 1 ) { extend ( uset , i , j , size1 , size2 , grid ); } } } vector < int > res ( hits . size ()); for ( int i = hits . size () - 1 ; i >= 0 ; -- i ) { int x = hits [ i ][ 0 ], y = hits [ i ][ 1 ]; if ( x == - 1 ) // invalid hit continue ; int pre = uset . rank [ uset . ROOF ]; if ( x == 0 ) uset . merge ( y , uset . ROOF ); extend ( uset , x , y , size1 , size2 , grid ); int t = uset . rank [ uset . ROOF ] - pre - 1 ; res [ i ] = ( t < 0 ) ? 0 : t ; // 0: adding 0 or 1 grid [ x ][ y ] = 1 ; // padding } return res ; } void extend ( UFSet u , int i , int j , int ei , int ej , vector < vector < int >>& grid ) { for ( auto & dir : DIR ) { int ni = i + dir [ 0 ], nj = j + dir [ 1 ]; if ( ni >= 0 && ni < ei && nj >= 0 && nj < ej && grid [ ni ][ nj ] == 1 ) u . merge ( ej * i + j , ej * ni + nj ); } } };","title":"hit bricks"},{"location":"PART2/ufset/hitbricks/#_1","text":"\u6574\u4f53\u7684\u601d\u8def\u4e3a\uff1a\u628a\u4e0e\u6240\u6709\u4e0e\u9876\u7aef\u8fde\u63a5\u7684\u7816\u5757\u89c6\u4f5c\u4e00\u4e2a\u96c6\u5408 $B$\uff1b\u6bcf\u6b21 hit \u53ef\u80fd\u4ece $B$ \u4e2d\u5206\u79bb\u51fa\u4e00\u4e2a\u5b50\u96c6\uff0c\u56e0\u6b64\u9006\u5411\u601d\u7ef4\u8003\u8651\uff0c\u98a0\u5012 hit \u6570\u7ec4\uff0c\u4ece\u672b\u72b6\u6001\u586b\u8865\u7816\u5757\uff0c\u82e5\u586b\u8865\u4f7f\u5f97 $B$ \u591a\u4e86 $n$ \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684 hit \u5c31\u4e00\u5b9a\u4f7f\u5f97 $B$ \u5c11\u4e86 $n$ \u4e2a\u5143\u7d20\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u5e76\u67e5\u96c6\u5bf9\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c\u3002 Steps: 1. \u904d\u5386 hits \uff0c \u628a\u5176\u4e2d\u5bf9\u5e94\u7684\u7816\u5757\u6e05\u9664 \uff0c \u5f97\u672b\u72b6\u6001\u7684 grid ( \u6ce8\u610f\u5904\u7406\u65e0\u6548\u7684 hit ); 2. \u904d\u5386 grid \u7684\u7b2c\u4e00\u884c \uff0c \u628a\u6709\u7816\u7684\u7ed3\u70b9\u5e76\u5165\u9876\u7aef\u96c6\u5408 B ; 3. \u904d\u5386 grid \u5269\u4e0b\u7684\u884c \uff0c \u628a\u6bcf\u5757\u7816\u4e0e\u5176\u4e0a\u4e0b\u5de6\u53f3\u7684\u7816\u5408\u5e76\u4e3a\u4e00\u4e2a\u96c6\u5408 ( \u5982\u679c\u6709 ); 4. \u9006\u5411\u904d\u5386 hits \uff0c \u586b\u8865\u7816\u5757 ( grid [ i ][ j ]= 1 ) \uff0c \u7edf\u8ba1\u6bcf\u4e2a\u64cd\u4f5c\u4f7f\u96c6\u5408 B \u6dfb\u52a0\u7684\u7ed3\u70b9\u6570 \u3002 \u7ec6\u8282\u90e8\u5206\uff1a \u4f7f\u7528\u6309\u6570\u91cf\u5408\u5e76\u548c\u8def\u5f84\u538b\u7f29\u4f18\u5316\uff1b \u4e3a\u4e86\u65b9\u4fbf\u67e5\u8be2 $B$ \u4e2d\u5143\u7d20\u6570\u76ee\uff0c\u8ba9\u6b64\u96c6\u5408\u7684\u6839\u8282\u70b9\u6052\u4e3a\u7ed3\u70b9 $r$\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5f53\u88ab\u5408\u5e76\u7684\u4e24\u4e2a\u7ed3\u70b9\u6709 $r$ \u65f6\uff0c\u8981\u5ffd\u7565\u6309\u6570\u91cf\u5408\u5e76\uff1b \u6ce8\u610f\u5904\u7406\u65e0\u6548 hit \uff1b\u6ce8\u610f\u586b\u8865\u7684\u7816\u5757\u4e3a\u9876\u90e8\u7816\u5757\u7684\u60c5\u51b5\uff1b Code struct UFSet { int * nodes , * rank ; int ROOF ; UFSet ( int size ) { nodes = ( int * ) malloc ( sizeof ( int ) * ( size + 1 )); rank = ( int * ) malloc ( sizeof ( int ) * ( size + 1 )); ROOF = size ; for ( int i = 0 ; i < size + 1 ; ++ i ) { nodes [ i ] = i ; rank [ i ] = 1 ; } } int find ( int x ) { return ( x == nodes [ x ]) ? ( x ) : ( nodes [ x ] = find ( nodes [ x ])); } void merge ( int x , int y ) { int rx = find ( x ), ry = find ( y ); if ( rx == ry ) return ; if ( ry != ROOF && ( rx == ROOF || rank [ rx ] > rank [ ry ])) { nodes [ ry ] = rx ; rank [ rx ] += rank [ ry ]; } else { nodes [ rx ] = ry ; rank [ ry ] += rank [ rx ]; } } }; class Solution { const int DIR [ 4 ][ 2 ] = {{ - 1 , 0 }, { 1 , 0 }, { 0 , - 1 }, { 0 , 1 }}; public : vector < int > hitBricks ( vector < vector < int >>& grid , vector < vector < int >>& hits ) { int size1 = grid . size (), size2 = grid [ 0 ]. size (); UFSet uset ( size1 * size2 ); for ( int i = 0 ; i < hits . size (); ++ i ) { int x = hits [ i ][ 0 ], y = hits [ i ][ 1 ]; if ( grid [ x ][ y ] == 0 ) hits [ i ][ 0 ] = - 1 ; // mark invalid hit grid [ x ][ y ] = 0 ; } for ( int i = 0 ; i < size2 ; ++ i ) if ( grid [ 0 ][ i ] == 1 ) uset . merge ( i , uset . ROOF ); for ( int i = 1 ; i < size1 ; ++ i ) { for ( int j = 0 ; j < size2 ; ++ j ) { if ( grid [ i ][ j ] == 1 ) { extend ( uset , i , j , size1 , size2 , grid ); } } } vector < int > res ( hits . size ()); for ( int i = hits . size () - 1 ; i >= 0 ; -- i ) { int x = hits [ i ][ 0 ], y = hits [ i ][ 1 ]; if ( x == - 1 ) // invalid hit continue ; int pre = uset . rank [ uset . ROOF ]; if ( x == 0 ) uset . merge ( y , uset . ROOF ); extend ( uset , x , y , size1 , size2 , grid ); int t = uset . rank [ uset . ROOF ] - pre - 1 ; res [ i ] = ( t < 0 ) ? 0 : t ; // 0: adding 0 or 1 grid [ x ][ y ] = 1 ; // padding } return res ; } void extend ( UFSet u , int i , int j , int ei , int ej , vector < vector < int >>& grid ) { for ( auto & dir : DIR ) { int ni = i + dir [ 0 ], nj = j + dir [ 1 ]; if ( ni >= 0 && ni < ei && nj >= 0 && nj < ej && grid [ ni ][ nj ] == 1 ) u . merge ( ej * i + j , ej * ni + nj ); } } };","title":"\u89e3\u9898\u6b65\u9aa4"}]}