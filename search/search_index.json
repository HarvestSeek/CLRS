{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1-Fundamentals/1.1/","text":"1. \u5206\u6790\u7b97\u6cd5\uff1a \u8ba1\u7b97\u65f6\u95f4 \u2003\u4ee5\u4e0b\u7684\u6a21\u578b\u57fa\u4e8e\u5355\u5904\u7406\u5668\u8ba1\u7b97\u6a21\u578b\u2014\u2014 RAM \u6a21\u578b\u8fdb\u884c\u8ba8\u8bba\u3002\u5b83\u6ca1\u6709\u5e76\u53d1\u64cd\u4f5c\uff0c\u4e14\u6307\u4ee4\u96c6\u53ea\u5305\u542b\u4e00\u822c\u8ba1\u7b97\u673a\u7684\u5e38\u89c1\u6307\u4ee4\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u4e0e\u8f93\u5165\u89c4\u6a21\u540c\u6b65\u589e\u957f\uff0c\u6240\u4ee5\u901a\u5e38\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u6210\u5176\u8f93\u5165\u89c4\u6a21\u7684\u51fd\u6570\u3002 \u2003\u8f93\u5165\u89c4\u6a21( input size )\u7684\u6700\u4f73\u6982\u5ff5\u4f9d\u8d56\u4e8e\u6240\u7814\u7a76\u7684\u95ee\u9898\uff1b\u4e00\u4e2a\u7b97\u6cd5\u5728\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4( running time )\u6307\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6216\u6b65\u6570\u3002 \u2003\u4ee5\u63d2\u5165\u6392\u5e8f\u4e3a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 INSERTION - SORT ( A ) for j = 2 to A . length key = A [ j ] // Insert A [ j ] into the sorted sequence A [ 1 .. j - 1 ] i = j - 1 while i > 0 and A [ i ] > key A [ i + 1 ] = A [ i ] i = i - 1 A [ i + 1 ] = key \u2003\u8fd0\u884c\u65f6\u95f4\u4f30\u8ba1\uff1a \u884c\u6570 \u4ee3\u4ef7 \u6b21\u6570 2 $c_1$ $n$ 3 $c_2$ $n-1$ 5 $c_4$ $n-1$ 6 $c_5$ $\\sum_{j=2}^nt_j$ 7 $c_6$ $\\sum_{j=2}^n(t_j - 1)$ 8 $c_7$ $\\sum_{j=2}^n(t_j - 1)$ 9 $c_8$ $n-1$ \u2003\u6267\u884c\u6bcf\u884c\u4f2a\u4ee3\u7801\u9700\u8981\u5e38\u91cf\u65f6\u95f4\uff0c\u4e14\u4e0d\u540c\u884c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u4e0e RAM \u6a21\u578b\u662f\u4e00\u81f4\u7684\u3002 \u2003\u82e5\u53ea\u8003\u8651\u6700\u4f73\u60c5\u51b5\uff0c\u5373\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\uff1a $$ \\begin{aligned} T(n) & =c_1n+c_2(n-1)+c_4(n-1)+c_5(n-1)+c_8(n-1) \\\\ & =(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)\\\\ \\end{aligned} $$ 2. \u589e\u957f\u91cf\u7ea7 \u2003\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5ffd\u7565\u9ad8\u9636\u9879\u7cfb\u6570\u548c\u4f4e\u9636\u9879\uff0c\u800c\u662f\u53ea\u5173\u5fc3\u589e\u957f\u91cf\u7ea7( order of growth )\u3002","title":"1.analysis"},{"location":"1-Fundamentals/1.1/#1","text":"\u4ee5\u4e0b\u7684\u6a21\u578b\u57fa\u4e8e\u5355\u5904\u7406\u5668\u8ba1\u7b97\u6a21\u578b\u2014\u2014 RAM \u6a21\u578b\u8fdb\u884c\u8ba8\u8bba\u3002\u5b83\u6ca1\u6709\u5e76\u53d1\u64cd\u4f5c\uff0c\u4e14\u6307\u4ee4\u96c6\u53ea\u5305\u542b\u4e00\u822c\u8ba1\u7b97\u673a\u7684\u5e38\u89c1\u6307\u4ee4\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u4e0e\u8f93\u5165\u89c4\u6a21\u540c\u6b65\u589e\u957f\uff0c\u6240\u4ee5\u901a\u5e38\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u8868\u793a\u6210\u5176\u8f93\u5165\u89c4\u6a21\u7684\u51fd\u6570\u3002 \u2003\u8f93\u5165\u89c4\u6a21( input size )\u7684\u6700\u4f73\u6982\u5ff5\u4f9d\u8d56\u4e8e\u6240\u7814\u7a76\u7684\u95ee\u9898\uff1b\u4e00\u4e2a\u7b97\u6cd5\u5728\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4( running time )\u6307\u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6216\u6b65\u6570\u3002 \u2003\u4ee5\u63d2\u5165\u6392\u5e8f\u4e3a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 INSERTION - SORT ( A ) for j = 2 to A . length key = A [ j ] // Insert A [ j ] into the sorted sequence A [ 1 .. j - 1 ] i = j - 1 while i > 0 and A [ i ] > key A [ i + 1 ] = A [ i ] i = i - 1 A [ i + 1 ] = key \u2003\u8fd0\u884c\u65f6\u95f4\u4f30\u8ba1\uff1a \u884c\u6570 \u4ee3\u4ef7 \u6b21\u6570 2 $c_1$ $n$ 3 $c_2$ $n-1$ 5 $c_4$ $n-1$ 6 $c_5$ $\\sum_{j=2}^nt_j$ 7 $c_6$ $\\sum_{j=2}^n(t_j - 1)$ 8 $c_7$ $\\sum_{j=2}^n(t_j - 1)$ 9 $c_8$ $n-1$ \u2003\u6267\u884c\u6bcf\u884c\u4f2a\u4ee3\u7801\u9700\u8981\u5e38\u91cf\u65f6\u95f4\uff0c\u4e14\u4e0d\u540c\u884c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u4e0e RAM \u6a21\u578b\u662f\u4e00\u81f4\u7684\u3002 \u2003\u82e5\u53ea\u8003\u8651\u6700\u4f73\u60c5\u51b5\uff0c\u5373\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\uff1a $$ \\begin{aligned} T(n) & =c_1n+c_2(n-1)+c_4(n-1)+c_5(n-1)+c_8(n-1) \\\\ & =(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)\\\\ \\end{aligned} $$","title":"1. \u5206\u6790\u7b97\u6cd5\uff1a \u8ba1\u7b97\u65f6\u95f4"},{"location":"1-Fundamentals/1.1/#2","text":"\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5ffd\u7565\u9ad8\u9636\u9879\u7cfb\u6570\u548c\u4f4e\u9636\u9879\uff0c\u800c\u662f\u53ea\u5173\u5fc3\u589e\u957f\u91cf\u7ea7( order of growth )\u3002","title":"2. \u589e\u957f\u91cf\u7ea7"},{"location":"1-Fundamentals/1.2/","text":"1.\u589e\u957f\u7684\u9636 $ \\Theta(1) < \\Theta(lgn) < \\Theta(\\sqrt n) < \\Theta(n) < \\Theta(nlgn) < \\Theta(n^2) < \\Theta(n^3) < \\Theta(2^n) < \\Theta(n!) $ 2.\u540c\u9636\u51fd\u6570\u96c6\u5408 $ \\Theta(g(n)) = \\lbrace \\ f(n) \\ | \\ \\exists c_1 \\text{\u3001} c_2 > 0, \\ n_0 ,\\ \\forall n \\geq n_0, \\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\rbrace $ \u5982\u679c$f(n) \\in \\Theta(g(n)), \\ g(n) $\u4e0e$f(n)$\u540c\u9636\uff0c\u8bb0\u4f5c$ f(n) = \\Theta (g(n))$ 3.\u4f4e\u9636\u51fd\u6570\u96c6\u5408 $O(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) \\leq cg(n)\\rbrace$ 4.\u9ad8\u9636\u51fd\u6570\u96c6\u5408 $\\Omega(g(n))=\\lbrace \\ f(n) \\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq cg(n) \\leq f(n) \\rbrace$ 5.\u4e25\u683c\u4f4e\u9636 $o(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\forall c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) < cg(n)\\rbrace$ 6.\u6ce8 \u2460 $f(n)=\\Theta(g(n)) \\Rightarrow f(n)=O(g(n))$\uff0c\u0398 \u6807\u8bb0\u5f3a\u4e8e O \u6807\u8bb0 \u2461 big O \u6807\u8bb0\u53ef\u80fd\u4e0d\u662f\u7d27\u7684\uff0c\u4f8b\u5982 $2n^2=O(n^2)$\u662f\u7d27\u7684\uff0c\u4f46 $2n=O(n^2)$\u4e0d\u662f \u2462 small o \u6807\u8bb0\u7528\u4e8e\u6807\u8bb0\u4e0a\u754c\u4f46\u4e0d\u662f\u7d27\u7684\u7684\u60c5\u51b5\uff0c\u4f8b\u5982 $2n^2 \\ne o(n^2)$","title":"2.asymptotic complexity"},{"location":"1-Fundamentals/1.2/#1","text":"$ \\Theta(1) < \\Theta(lgn) < \\Theta(\\sqrt n) < \\Theta(n) < \\Theta(nlgn) < \\Theta(n^2) < \\Theta(n^3) < \\Theta(2^n) < \\Theta(n!) $","title":"1.\u589e\u957f\u7684\u9636"},{"location":"1-Fundamentals/1.2/#2","text":"$ \\Theta(g(n)) = \\lbrace \\ f(n) \\ | \\ \\exists c_1 \\text{\u3001} c_2 > 0, \\ n_0 ,\\ \\forall n \\geq n_0, \\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\rbrace $ \u5982\u679c$f(n) \\in \\Theta(g(n)), \\ g(n) $\u4e0e$f(n)$\u540c\u9636\uff0c\u8bb0\u4f5c$ f(n) = \\Theta (g(n))$","title":"2.\u540c\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#3","text":"$O(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) \\leq cg(n)\\rbrace$","title":"3.\u4f4e\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#4","text":"$\\Omega(g(n))=\\lbrace \\ f(n) \\ \\mid \\ \\exists c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq cg(n) \\leq f(n) \\rbrace$","title":"4.\u9ad8\u9636\u51fd\u6570\u96c6\u5408"},{"location":"1-Fundamentals/1.2/#5","text":"$o(g(n))=\\lbrace \\ f(n)\\ \\mid \\ \\forall c > 0, \\ n_0, \\ \\forall n \\geq n_0, \\ 0 \\leq f(n) < cg(n)\\rbrace$","title":"5.\u4e25\u683c\u4f4e\u9636"},{"location":"1-Fundamentals/1.2/#6","text":"\u2460 $f(n)=\\Theta(g(n)) \\Rightarrow f(n)=O(g(n))$\uff0c\u0398 \u6807\u8bb0\u5f3a\u4e8e O \u6807\u8bb0 \u2461 big O \u6807\u8bb0\u53ef\u80fd\u4e0d\u662f\u7d27\u7684\uff0c\u4f8b\u5982 $2n^2=O(n^2)$\u662f\u7d27\u7684\uff0c\u4f46 $2n=O(n^2)$\u4e0d\u662f \u2462 small o \u6807\u8bb0\u7528\u4e8e\u6807\u8bb0\u4e0a\u754c\u4f46\u4e0d\u662f\u7d27\u7684\u7684\u60c5\u51b5\uff0c\u4f8b\u5982 $2n^2 \\ne o(n^2)$","title":"6.\u6ce8"},{"location":"1-Fundamentals/1.3/","text":"1.\u66ff\u6362\u65b9\u6cd5( Substitution method ) Steps: \u2460 \u731c\u6d4b\u89e3\u7684\u5f62\u5f0f \u2461 \u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6c42\u51fa\u89e3\u7684\u5e38\u6570\uff0c\u5e76\u8bc1\u660e\u89e3\u662f\u6b63\u786e\u7684\u3002 e.g.1 $ \\ \\ \\ T(n)=2T(\\lfloor n/2 \\rfloor)+n$ \u731c\u6d4b $T(n)=O(nlgn)$\uff0c\u4ee3\u5165\u5f97\uff1a $$ \\begin{aligned} T(n) & \\leq 2(c\\lfloor n/2 \\rfloor lg(\\lfloor n/2 \\rfloor))+n \\leq cn \\ lg(n/2)+n \\\\ & = cn\\ lgn-cn\\ lg2+n=cn\\ lgn-cn+n \\\\ &\\leq cn\\ lgn \\end{aligned} $$ (a). \u731c\u6d4b\u7684\u65b9\u6cd5 \u2460 \u901a\u8fc7\u548c\u5df2\u7ecf\u89c1\u8fc7\u7684\u9012\u5f52\u5f0f\u6bd4\u8f83\uff0c\u5982 $T(n)=2T(\\lfloor n/2 \\rfloor+17)+n$ \u4e2d17\u8d77\u5230\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u5927 \u2461 \u5148\u8bc1\u660e\u8f83\u4f4e\u7684\u4e0a\u754c\u6216\u4e0b\u754c (b). \u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879 e.g. $\\ \\ \\ T(n)=T(\\lfloor n/2 \\rfloor)+T(\\lceil n/2 \\rceil)+1$ \u731c\u6d4b $T(n)=O(n)$\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor + c\\lceil n/2 \\rceil + 1=cn+1$\uff0c\u89e3\u4e0d\u51fa\u6765\u3002 \u76f4\u89c9\u4e0a\u5e94\u8be5\u5c1d\u8bd5\u66f4\u5927\u7684\u754c $O(n^2)$\uff0c\u4f46\u539f\u6765\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u505a\u51fa\u66f4\u5f3a\u7684\u5f52\u7eb3\u5047\u8bbe\uff1a\u7531\u4e8e\u548c\u7ed3\u679c\u53ea\u5dee\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u4e0d\u7b49\u5f0f\uff0c\u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879\uff0c\u731c\u6d4b $T(n)\\leq cn-d$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor - d + c\\lceil n/2 \\rceil - d + 1=cn-2d+1\\leq cn-d$\u3002 (c). \u53d8\u91cf\u4ee3\u6362 e.g. $ \\ \\ \\ T(n)=2T(\\sqrt n)+lgn$ \u4ee4 $m=lgn$\uff0c\u5f97 $T(2^m)=2T(2^{m/2})+m$\uff1b\u91cd\u547d\u540d $S(m)=T(2^m)$\uff0c\u5f97 $S(m)=2S(m/2)+m$\u3002 \u6700\u540e $T(n)=T(2^m)=S(m)=O(mlgm)=O(lgn\u00b7lglgn)$ 2.\u9012\u5f52\u6811\u6cd5( recursion-tree method ) \u2003\u5bf9\u9012\u5f52\u5f0f\u8fdb\u884c\u9010\u7ea7\u5c55\u5f00\uff0c\u5f80\u5f80\u8981\u5fcd\u53d7\u4e00\u4e9b\u4e0d\u7cbe\u786e\uff0c\u901a\u5e38\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c\u6216\u4e0b\u754c\uff0c\u914d\u5408\u4ee3\u5165\u6cd5\u4f7f\u7528\u3002 3.\u4e3b\u65b9\u6cd5( master method ) \u4e3b\u5b9a\u7406\uff1a \u4ee4 $a\\geq 1$ \u548c $ b>1 $ \u662f\u5e38\u6570\uff0c$f(n)$ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c$T(n)$ \u662f\u5b9a\u4e49\u5728\u975e\u8d1f\u6574\u6570\u4e0a\u7684\u9012\u5f52\u5f0f\uff1a$T(n)=aT(n/b)+f(n)$\uff0c\u90a3\u4e48\uff1a \u2003\u2460 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=O(n^{log_ba-\\epsilon})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba})$ \u2003\u2461 \u82e5 $f(n)=O(n^{log_ba})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba}\u00b7lgn)$ \u2003\u2462 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=\\Omega(n^{log_ba+\\epsilon})$\uff0c\u4e14\u5bf9\u5145\u5206\u5927\u7684 $n$ \u6709 $af(n/b)\\leq cf(n)$\uff0c\u5219 $T(n)=\\Theta(f(n))$","title":"3.solving recurrences"},{"location":"1-Fundamentals/1.3/#1substitution-method","text":"Steps: \u2460 \u731c\u6d4b\u89e3\u7684\u5f62\u5f0f \u2461 \u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6c42\u51fa\u89e3\u7684\u5e38\u6570\uff0c\u5e76\u8bc1\u660e\u89e3\u662f\u6b63\u786e\u7684\u3002 e.g.1 $ \\ \\ \\ T(n)=2T(\\lfloor n/2 \\rfloor)+n$ \u731c\u6d4b $T(n)=O(nlgn)$\uff0c\u4ee3\u5165\u5f97\uff1a $$ \\begin{aligned} T(n) & \\leq 2(c\\lfloor n/2 \\rfloor lg(\\lfloor n/2 \\rfloor))+n \\leq cn \\ lg(n/2)+n \\\\ & = cn\\ lgn-cn\\ lg2+n=cn\\ lgn-cn+n \\\\ &\\leq cn\\ lgn \\end{aligned} $$","title":"1.\u66ff\u6362\u65b9\u6cd5(Substitution method)"},{"location":"1-Fundamentals/1.3/#a","text":"\u2460 \u901a\u8fc7\u548c\u5df2\u7ecf\u89c1\u8fc7\u7684\u9012\u5f52\u5f0f\u6bd4\u8f83\uff0c\u5982 $T(n)=2T(\\lfloor n/2 \\rfloor+17)+n$ \u4e2d17\u8d77\u5230\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u5927 \u2461 \u5148\u8bc1\u660e\u8f83\u4f4e\u7684\u4e0a\u754c\u6216\u4e0b\u754c","title":"(a). \u731c\u6d4b\u7684\u65b9\u6cd5"},{"location":"1-Fundamentals/1.3/#b","text":"e.g. $\\ \\ \\ T(n)=T(\\lfloor n/2 \\rfloor)+T(\\lceil n/2 \\rceil)+1$ \u731c\u6d4b $T(n)=O(n)$\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor + c\\lceil n/2 \\rceil + 1=cn+1$\uff0c\u89e3\u4e0d\u51fa\u6765\u3002 \u76f4\u89c9\u4e0a\u5e94\u8be5\u5c1d\u8bd5\u66f4\u5927\u7684\u754c $O(n^2)$\uff0c\u4f46\u539f\u6765\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u505a\u51fa\u66f4\u5f3a\u7684\u5f52\u7eb3\u5047\u8bbe\uff1a\u7531\u4e8e\u548c\u7ed3\u679c\u53ea\u5dee\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u4e0d\u7b49\u5f0f\uff0c\u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879\uff0c\u731c\u6d4b $T(n)\\leq cn-d$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a$T(n)\\leq c\\lfloor n/2 \\rfloor - d + c\\lceil n/2 \\rceil - d + 1=cn-2d+1\\leq cn-d$\u3002","title":"(b). \u51cf\u53bb\u4e00\u4e2a\u4f4e\u9636\u9879"},{"location":"1-Fundamentals/1.3/#c","text":"e.g. $ \\ \\ \\ T(n)=2T(\\sqrt n)+lgn$ \u4ee4 $m=lgn$\uff0c\u5f97 $T(2^m)=2T(2^{m/2})+m$\uff1b\u91cd\u547d\u540d $S(m)=T(2^m)$\uff0c\u5f97 $S(m)=2S(m/2)+m$\u3002 \u6700\u540e $T(n)=T(2^m)=S(m)=O(mlgm)=O(lgn\u00b7lglgn)$","title":"(c). \u53d8\u91cf\u4ee3\u6362"},{"location":"1-Fundamentals/1.3/#2recursion-tree-method","text":"\u5bf9\u9012\u5f52\u5f0f\u8fdb\u884c\u9010\u7ea7\u5c55\u5f00\uff0c\u5f80\u5f80\u8981\u5fcd\u53d7\u4e00\u4e9b\u4e0d\u7cbe\u786e\uff0c\u901a\u5e38\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c\u6216\u4e0b\u754c\uff0c\u914d\u5408\u4ee3\u5165\u6cd5\u4f7f\u7528\u3002","title":"2.\u9012\u5f52\u6811\u6cd5(recursion-tree method)"},{"location":"1-Fundamentals/1.3/#3master-method","text":"\u4e3b\u5b9a\u7406\uff1a \u4ee4 $a\\geq 1$ \u548c $ b>1 $ \u662f\u5e38\u6570\uff0c$f(n)$ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c$T(n)$ \u662f\u5b9a\u4e49\u5728\u975e\u8d1f\u6574\u6570\u4e0a\u7684\u9012\u5f52\u5f0f\uff1a$T(n)=aT(n/b)+f(n)$\uff0c\u90a3\u4e48\uff1a \u2003\u2460 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=O(n^{log_ba-\\epsilon})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba})$ \u2003\u2461 \u82e5 $f(n)=O(n^{log_ba})$\uff0c\u5219 $T(n)=\\Theta(n^{log_ba}\u00b7lgn)$ \u2003\u2462 \u82e5\u5bf9\u67d0\u4e2a $\\epsilon>0$\uff0c\u6709 $f(n)=\\Omega(n^{log_ba+\\epsilon})$\uff0c\u4e14\u5bf9\u5145\u5206\u5927\u7684 $n$ \u6709 $af(n/b)\\leq cf(n)$\uff0c\u5219 $T(n)=\\Theta(f(n))$","title":"3.\u4e3b\u65b9\u6cd5(master method)"},{"location":"2-sort/2.1/","text":"","title":"1.Simple Sort"},{"location":"2-sort/2.2/","text":"","title":"2.Mergesort"},{"location":"2-sort/2.3/","text":"1.\u5806\u7684\u5b9a\u4e49 (1). \u4e8c\u53c9\u5806\uff1a\u4e00\u4e2a\u7528\u6570\u7ec4\u8868\u793a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811( complete binary tree ) (2). \u6700\u5927\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\geq A[i]$ (3). \u6700\u5c0f\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\leq A[i]$ (4). \u7ed3\u70b9\u7684\u9ad8\u5ea6\uff1a\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u6700\u957f\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee (5). \u5806\u7684\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6 2.\u57fa\u672c\u64cd\u4f5c \u2460 MAX-HEAPIFY(A, i) : \u2003\u5047\u8bbe\u5f53\u524d\u5806\u4ee5 LEFT(i) \u548c RIGHT(i) \u4e3a\u6839\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u90fd\u662f\u6700\u5927\u5806\uff0c A[i] \u4e0e\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u8be5\u64cd\u4f5c\u7528\u4e8e\u7ef4\u62a4\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void MaxHeapify ( Heap * H , int i ) { int father = i ; int child = 2 * i ; int root = H -> A [ i ]; while ( child <= H -> size ) { if ( child < H -> size && H -> A [ child ] < H -> A [ child + 1 ]) { child ++ ; } if ( H -> A [ child ] < root ) { break ; } H -> A [ father ] = H -> A [ child ]; father = child ; child *= 2 ; } H -> A [ father ] = root ; } $T(n)=O(lgn)=O(h)$ \u2461 BUILD-MAX-HEAP(A) : \u2003\u5efa\u5806 1 2 3 4 5 6 void BuildMaxHeap ( Heap * H ) { int i ; for ( i = H -> size / 2 ; i >= 1 ; i -- ) { MaxHeapify ( H , i ); } } \u81ea\u5e95\u5411\u4e0a\uff0c\u8fed\u4ee3\u901a\u8fc7 MaxHeapify(A, i) \u8c03\u6574\u6700\u5927\u5806\u3002 $T(n)=O(n)$\uff0c\u6700\u5927\u8c03\u6574\u6b21\u6570\u4e3a\u5404\u7ed3\u70b9\u9ad8\u5ea6\u548c\u3002 \u2462 HEAP-INCREASE-KEY(A, i, key) : \u2003\u589e\u5927\u5806\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u4e3a\u589e\u5927 A[i] \u540e\uff0c\u6700\u5927\u5806\u7684\u6027\u8d28\u53ef\u80fd\u88ab\u8fdd\u80cc\uff0c\u5728\u5176\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4e0d\u65ad\u4e0e\u5176\u7236\u7ed3\u70b9\u6bd4\u8f83\u5e76\u4ea4\u6362\uff0c\u5bfb\u627e\u9002\u5f53\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 void HeapIncreaseKey ( Heap * H , int i , int key ) { if ( key < H -> A [ i ]) { printf ( \"error: new key is smaller\" ); } while ( i > 1 && H -> A [ i / 2 ] < key ) { H -> A [ i ] = H -> A [ i / 2 ]; i = i / 2 ; } H -> A [ i ] = key ; } $T(n)=O(lgn)$ 3.\u5806\u6392\u5e8f \u5148\u5efa\u5806\uff0c\u968f\u540e\u4e0d\u65ad\u628a\u5806\u9876\u5143\u7d20\u4ea4\u6362\u5230\u672b\u5c3e\u3001\u7f29\u5c0f\u5806\u5e76\u8c03\u6574\uff0c\u76f4\u5230\u6392\u597d\u5e8f\u3002 1 2 3 4 5 6 7 8 9 void HeapSort ( Heap * H ) { BuildMaxHeap ( H ); int i ; for ( i = H -> size ; i >= 2 ; i -- ) { swap ( & H -> A [ i ], & H -> A [ 1 ]); H -> size -- ; MaxHeapify ( H , 1 ); } } \u76f8\u6bd4\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u65e0\u8bba\u597d\u574f\u60c5\u51b5\uff0c\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\uff0c\u4f46\u662f\u5b83\u7684\u590d\u6742\u5ea6\u4e2d\u7684\u5e38\u6570\u8f83\u5927\uff0c\u56e0\u6b64\u901a\u5e38\u6bd4\u5feb\u6392\u6162\u3002 \u5806\u6392\u5e8f\u7684\u7279\u70b9\uff1a \u2460 \u5806\u6392\u5e8f\u4e0d\u7a33\u5b9a \u2461 \u5bf9\u7f13\u5b58\u4e0d\u53cb\u597d \u2462 \u65e0\u6240\u8c13\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\uff0c\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$ (\u5f53\u6240\u6709\u5143\u7d20\u76f8\u540c\u65f6\u4e3a $O(n)$) 4.\u4f18\u5148\u961f\u5217( priority queue ) \u4e00\u4e2a\u6700\u5927\u4f18\u5148\u961f\u5217\u5e94\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u2003\u2460 INSERT(S, x) : \u628a\u5143\u7d20 x \u63d2\u5165\u96c6\u5408 S \u3002 \u2003\u2461 MAXIMUM(S) : \u8fd4\u56de S \u4e2d\u5177\u6709\u6700\u5927\u5173\u952e\u5b57\u7684\u5143\u7d20\u3002 \u2003\u2462 EXTRACT-MAX(S) : \u53bb\u6389\u5e76\u8fd4\u56de S \u4e2d\u6700\u5927\u5173\u952e\u5b57\u5143\u7d20\u3002 \u2003\u2463 INCREASE-KEY(s, x, k) : \u628a x \u7684\u503c\u589e\u52a0\u5230 k \u3002 1 2 3 4 5 void MaxHeapInsert ( Heap * H , int key ) { H -> size ++ ; H -> A [ H -> size ] = - INF ; HeapIncreaseKey ( H , H -> size , key ); } $T(n)=O(lgn)$ 1 2 3 4 5 6 7 8 9 10 int HeapExtractMax ( Heap * H ) { if ( H -> size < 1 ) { printf ( \"heap underflow\" ); } int max = H -> A [ 1 ]; H -> A [ 1 ] = H -> A [ H -> size ]; H -> size -- ; MaxHeapify ( H , 1 ); return max ; } $T(n)=O(lgn)$","title":"3.Heap and Heapsort"},{"location":"2-sort/2.3/#1","text":"(1). \u4e8c\u53c9\u5806\uff1a\u4e00\u4e2a\u7528\u6570\u7ec4\u8868\u793a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811( complete binary tree ) (2). \u6700\u5927\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\geq A[i]$ (3). \u6700\u5c0f\u5806\uff1a\u9664\u4e86\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u6240\u6709\u7ed3\u70b9 $i$ \u90fd\u6ee1\u8db3 $A[PARENT(i)] \\leq A[i]$ (4). \u7ed3\u70b9\u7684\u9ad8\u5ea6\uff1a\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u6700\u957f\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee (5). \u5806\u7684\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6","title":"1.\u5806\u7684\u5b9a\u4e49"},{"location":"2-sort/2.3/#2","text":"\u2460 MAX-HEAPIFY(A, i) : \u2003\u5047\u8bbe\u5f53\u524d\u5806\u4ee5 LEFT(i) \u548c RIGHT(i) \u4e3a\u6839\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u90fd\u662f\u6700\u5927\u5806\uff0c A[i] \u4e0e\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u8be5\u64cd\u4f5c\u7528\u4e8e\u7ef4\u62a4\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void MaxHeapify ( Heap * H , int i ) { int father = i ; int child = 2 * i ; int root = H -> A [ i ]; while ( child <= H -> size ) { if ( child < H -> size && H -> A [ child ] < H -> A [ child + 1 ]) { child ++ ; } if ( H -> A [ child ] < root ) { break ; } H -> A [ father ] = H -> A [ child ]; father = child ; child *= 2 ; } H -> A [ father ] = root ; } $T(n)=O(lgn)=O(h)$ \u2461 BUILD-MAX-HEAP(A) : \u2003\u5efa\u5806 1 2 3 4 5 6 void BuildMaxHeap ( Heap * H ) { int i ; for ( i = H -> size / 2 ; i >= 1 ; i -- ) { MaxHeapify ( H , i ); } } \u81ea\u5e95\u5411\u4e0a\uff0c\u8fed\u4ee3\u901a\u8fc7 MaxHeapify(A, i) \u8c03\u6574\u6700\u5927\u5806\u3002 $T(n)=O(n)$\uff0c\u6700\u5927\u8c03\u6574\u6b21\u6570\u4e3a\u5404\u7ed3\u70b9\u9ad8\u5ea6\u548c\u3002 \u2462 HEAP-INCREASE-KEY(A, i, key) : \u2003\u589e\u5927\u5806\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u4e3a\u589e\u5927 A[i] \u540e\uff0c\u6700\u5927\u5806\u7684\u6027\u8d28\u53ef\u80fd\u88ab\u8fdd\u80cc\uff0c\u5728\u5176\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4e0d\u65ad\u4e0e\u5176\u7236\u7ed3\u70b9\u6bd4\u8f83\u5e76\u4ea4\u6362\uff0c\u5bfb\u627e\u9002\u5f53\u7684\u63d2\u5165\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 void HeapIncreaseKey ( Heap * H , int i , int key ) { if ( key < H -> A [ i ]) { printf ( \"error: new key is smaller\" ); } while ( i > 1 && H -> A [ i / 2 ] < key ) { H -> A [ i ] = H -> A [ i / 2 ]; i = i / 2 ; } H -> A [ i ] = key ; } $T(n)=O(lgn)$","title":"2.\u57fa\u672c\u64cd\u4f5c"},{"location":"2-sort/2.3/#3","text":"\u5148\u5efa\u5806\uff0c\u968f\u540e\u4e0d\u65ad\u628a\u5806\u9876\u5143\u7d20\u4ea4\u6362\u5230\u672b\u5c3e\u3001\u7f29\u5c0f\u5806\u5e76\u8c03\u6574\uff0c\u76f4\u5230\u6392\u597d\u5e8f\u3002 1 2 3 4 5 6 7 8 9 void HeapSort ( Heap * H ) { BuildMaxHeap ( H ); int i ; for ( i = H -> size ; i >= 2 ; i -- ) { swap ( & H -> A [ i ], & H -> A [ 1 ]); H -> size -- ; MaxHeapify ( H , 1 ); } } \u76f8\u6bd4\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u65e0\u8bba\u597d\u574f\u60c5\u51b5\uff0c\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\uff0c\u4f46\u662f\u5b83\u7684\u590d\u6742\u5ea6\u4e2d\u7684\u5e38\u6570\u8f83\u5927\uff0c\u56e0\u6b64\u901a\u5e38\u6bd4\u5feb\u6392\u6162\u3002 \u5806\u6392\u5e8f\u7684\u7279\u70b9\uff1a \u2460 \u5806\u6392\u5e8f\u4e0d\u7a33\u5b9a \u2461 \u5bf9\u7f13\u5b58\u4e0d\u53cb\u597d \u2462 \u65e0\u6240\u8c13\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\uff0c\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$ (\u5f53\u6240\u6709\u5143\u7d20\u76f8\u540c\u65f6\u4e3a $O(n)$)","title":"3.\u5806\u6392\u5e8f"},{"location":"2-sort/2.3/#4priority-queue","text":"\u4e00\u4e2a\u6700\u5927\u4f18\u5148\u961f\u5217\u5e94\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u2003\u2460 INSERT(S, x) : \u628a\u5143\u7d20 x \u63d2\u5165\u96c6\u5408 S \u3002 \u2003\u2461 MAXIMUM(S) : \u8fd4\u56de S \u4e2d\u5177\u6709\u6700\u5927\u5173\u952e\u5b57\u7684\u5143\u7d20\u3002 \u2003\u2462 EXTRACT-MAX(S) : \u53bb\u6389\u5e76\u8fd4\u56de S \u4e2d\u6700\u5927\u5173\u952e\u5b57\u5143\u7d20\u3002 \u2003\u2463 INCREASE-KEY(s, x, k) : \u628a x \u7684\u503c\u589e\u52a0\u5230 k \u3002 1 2 3 4 5 void MaxHeapInsert ( Heap * H , int key ) { H -> size ++ ; H -> A [ H -> size ] = - INF ; HeapIncreaseKey ( H , H -> size , key ); } $T(n)=O(lgn)$ 1 2 3 4 5 6 7 8 9 10 int HeapExtractMax ( Heap * H ) { if ( H -> size < 1 ) { printf ( \"heap underflow\" ); } int max = H -> A [ 1 ]; H -> A [ 1 ] = H -> A [ H -> size ]; H -> size -- ; MaxHeapify ( H , 1 ); return max ; } $T(n)=O(lgn)$","title":"4.\u4f18\u5148\u961f\u5217(priority queue)"},{"location":"2-sort/2.4/","text":"1. \u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u63cf\u8ff0 \u2460 QUICKSORT(A, l, r) : \u2003\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\u5206\u6cbb\u3002 1 2 3 4 5 6 7 void QuickSort ( int A [], int left , int right ) { if ( left < right ) { int i = partition ( A , left , right ); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } } \u2461 PARTITION(A, l, r) : \u5feb\u901f\u6392\u5e8f\u7684\u6838\u5fc3\u662f\u5212\u5206\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u9009\u53d6\u4e3b\u5143( pivot element )\uff0c\u901a\u8fc7\u4e3b\u5143\u518d\u628a\u6392\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\u3002\u4ee5\u4e0b\u4ee3\u7801\u4ee5 pivot=A[r] \u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int partition ( int A [], int left , int right ) { int pivot = A [ right ]; int i = left - 1 ; int j ; for ( j = left ; j <= right - 1 ; j ++ ) { if ( A [ j ] <= pivot ) { i ++ ; swap ( & A [ i ], & A [ j ]); } } swap ( & A [ i + 1 ], & A [ right ]); return i + 1 ; } \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6570\u7ec4\u88ab\u5212\u5206\u4e3a\u56db\u4e2a\u533a\u57df\uff0c\u6bcf\u4e00\u4e2a\u533a\u57df\u90fd\u6ee1\u8db3\u4e00\u5b9a\u6027\u8d28\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5faa\u73af\u4e0d\u53d8\u91cf\u3002 \u6bcf\u4e00\u8f6e\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u5bf9\u4efb\u610f\u6570\u7ec4\u4e0b\u6807 k \uff0c\u6709\uff1a \u20031. \u82e5 l \u2264 k \u2264 i \uff0c\u5219 A[k] \u2264 pivot \u3002 \u20032. \u82e5 i + 1 \u2264 k \u2264 j - 1 \uff0c\u5219 A[k] > pivot \u3002 2. \u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u5206\u6790 (1). \u6700\u574f\u60c5\u51b5 \u2003\u5f53\u5212\u5206\u4ea7\u751f\u7684\u4e24\u4e2a\u5b50\u95ee\u9898\u5206\u522b\u5305\u542bn-1\u4e2a\u5143\u7d20\u548c0\u4e2a\u5143\u7d20\u65f6\uff0c$T(0)=\\Theta(1)$\uff0c\u56e0\u6b64\u6709\uff1a $T(n)=T(n-1)+\\Theta(n)$\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u590d\u6742\u5ea6\u7684\u7ed3\u679c\u4e3a\u7ea7\u6570\u7684\u548c\uff0c\u5373 $\\Theta(n^2)$\u3002 (2). \u5e73\u8861\u5212\u5206 \u2003\u5728\u53ef\u80fd\u6700\u5e73\u8861\u7684\u5212\u5206\u4e2d\uff0c\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5206\u522b\u4e3a $\\lfloor n/2 \\rfloor$ \u548c $\\lceil n/2 \\rceil-1$\uff0c\u4e8e\u662f\u6709\u9012\u5f52\u5f0f\uff1a$T(n)=2T(n/2)+\\Theta(n)$\uff0c\u89e3\u4e3a $T(n)=\\Theta(nlgn)$\u3002 \u2003\u5b9e\u9645\u4e0a\uff0c\u5feb\u6392\u7684\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u66f4\u63a5\u8fd1\u6700\u597d\u60c5\u51b5\u800c\u975e\u6700\u574f\u60c5\u51b5\u3002 \u2003\u5bf9\u4e8e\u4efb\u4f55\u4e00\u79cd\u5e38\u6570\u6bd4\u4f8b\u7684\u5212\u5206\uff0c\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\u3002\u4ee5 $T(n)=T(9n/10)+T(n/10)+cn$ \u4e3a\u4f8b\uff0c\u753b\u51fa\u9012\u5f52\u6811\u53ef\u5f97\u6bcf\u5c42\u7684\u4ee3\u4ef7\u90fd\u662f $cn$ \uff0c\u5176\u6df1\u5ea6\u4e3a $log_{10/9}n$\u3002 (3). \u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\u5206\u6790 \u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5373\u4e3b\u5143\u968f\u673a\u9009\u53d6 1 2 3 4 RANDOMIZED - PARTITION ( A , left , right ) i = RANDOM ( left , right ) exchange A [ right ] with A [ i ] return PARTITION ( A , left , right ) \u63a8\u5bfc\u524d\u7684\u51c6\u5907\uff1a \u2460 \u5f53\u5728\u5143\u7d20\u4e2a\u6570\u4e3a n \u7684\u6570\u7ec4\u4e0a\u8fd0\u884c QUICKSORT \u65f6\uff0c\u5047\u8bbe\u5728 PARTITION \u5904\u7684\u6bd4\u8f83\u6b21\u6570\u4e3a $X$\uff0c\u5219 QUICKSORT \u7684\u8fd0\u884c\u65f6\u95f4\u4e3a $O(n+X)$\u3002 \u2003- \u81f3\u591a\u8c03\u7528 PARTITION $n$ \u6b21\uff0c\u8c03\u7528\u65f6\u95f4\u4e3a $O(n)$ \u52a0\u4e0a\u8fed\u4ee3\u65f6\u95f4(\u6bd4\u8f83\u6b21\u6570)\u3002 \u2461 \u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u4e0e\u4e3b\u5143\u6bd4\u8f83\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u5bf9\u5143\u7d20\uff0c\u5b83\u4eec\u81f3\u591a\u6bd4\u8f83\u4e00\u6b21 \u2462 \u4e00\u65e6\u4e3b\u5143 $z_i<pivot<z_j$ \u88ab\u9009\u62e9\uff0c\u88ab\u5212\u5206\u7684 $z_i$ \u4e0e $z_j$ \u4e0d\u53ef\u80fd\u518d\u6bd4\u8f83(\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u4e92\u5f02) \u63a8\u5bfc\uff1a \u2003\u8bbe $X_{ij}= \\begin{cases} 1& if\\ z_i\\ compares\\ with\\ z_j\\\\ 0& else \\end{cases}$\uff0c$X= \\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}$ \u2003\u5219\u6709 $$\\begin{aligned} E(X)=E[\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}]&=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u4e0e}z_j\\text{\u6bd4\u8f83}\\rbrace) \\\\ &=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u6216}z_j\\text{\u662f\u96c6\u5408}Z_{ij}\u4e2d\u9009\u51fa\u7684\u7b2c\u4e00\u4e2a\u4e3b\u5143\\rbrace) \\\\ &=\\sum\\sum(\\frac{1}{j+i-1}+\\frac{1}{j+i-1})=\\sum\\frac{2}{j+i-1} \\\\ &< \\sum_{i=1}^{n-1}\\sum_{n}^{k=1} \\frac{2}{k}=O(nlgn) \\end{aligned}$$ \u2003\u6545\u5f97\u51fa\u7ed3\u8bba\uff1a\u4f7f\u7528\u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5728\u8f93\u5165\u5143\u7d20\u4e92\u5f02\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u6392\u7684\u671f\u671b\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$\u3002 (4). \u5feb\u6392\u7279\u70b9 \u2460 \u671f\u671b\u590d\u6742\u5ea6\u4e3a $\\Theta(nlgn)$\uff0c\u4e0e\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u76f8\u540c\uff0c\u4f46\u5176\u5e38\u6570\u66f4\u5c0f\uff0c\u901f\u5ea6\u66f4\u5feb \u2461 \u5feb\u6392\u662f\u4e0d\u7a33\u5b9a\u7684 3. \u4e09\u6570\u53d6\u4e2d\u5212\u5206 \u4ece\u5b50\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u53d6\u4e09\u4e2a\u5143\u7d20\uff0c\u53d6\u5176\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u4e3b\u5143\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int median3 ( int A [], int left , int right ) { int center = ( left + right ) / 2 ; if ( A [ left ] > A [ right ]) { swap ( & A [ left ], & A [ right ]); } if ( A [ left ] > A [ center ]) { swap ( & A [ left ], & A [ center ]); } i f ( A [ center ] > A [ right ]) { swap ( & A [ center ], & A [ right ]); } swap ( & A [ center ], & A [ right - 1 ]); return A [ right - 1 ]; } \u5728\u4ee3\u7801\u4e0a\uff0c\u8981\u6ce8\u610f\u5f53\u95ee\u9898\u89c4\u6a21\u4e3a2\u65f6\u8981\u5355\u72ec\u8003\u8651\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void QuickSort ( int A [], int left , int right ) { if ( right > left + 1 ) { int pivot = median3 ( A , left , right ); int i = left ; int j = right - 1 ; while ( 1 ) { while ( A [ ++ i ] < pivot ){ } // less or equal cannot fit that the pivot needn`t move while ( A [ -- j ] > pivot ){ } // for i should stop at the pivot if ( j > i ) swap ( & A [ i ], & A [ j ]); else break ; } swap ( & A [ i ], & A [ right - 1 ]); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } else { if ( A [ right ] < A [ left ]) { swap ( & A [ right ], & A [ left ]); } } }","title":"4.Quicksort"},{"location":"2-sort/2.4/#1","text":"\u2460 QUICKSORT(A, l, r) : \u2003\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\u5206\u6cbb\u3002 1 2 3 4 5 6 7 void QuickSort ( int A [], int left , int right ) { if ( left < right ) { int i = partition ( A , left , right ); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } } \u2461 PARTITION(A, l, r) : \u5feb\u901f\u6392\u5e8f\u7684\u6838\u5fc3\u662f\u5212\u5206\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u9009\u53d6\u4e3b\u5143( pivot element )\uff0c\u901a\u8fc7\u4e3b\u5143\u518d\u628a\u6392\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\u3002\u4ee5\u4e0b\u4ee3\u7801\u4ee5 pivot=A[r] \u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int partition ( int A [], int left , int right ) { int pivot = A [ right ]; int i = left - 1 ; int j ; for ( j = left ; j <= right - 1 ; j ++ ) { if ( A [ j ] <= pivot ) { i ++ ; swap ( & A [ i ], & A [ j ]); } } swap ( & A [ i + 1 ], & A [ right ]); return i + 1 ; } \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6570\u7ec4\u88ab\u5212\u5206\u4e3a\u56db\u4e2a\u533a\u57df\uff0c\u6bcf\u4e00\u4e2a\u533a\u57df\u90fd\u6ee1\u8db3\u4e00\u5b9a\u6027\u8d28\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5faa\u73af\u4e0d\u53d8\u91cf\u3002 \u6bcf\u4e00\u8f6e\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u5bf9\u4efb\u610f\u6570\u7ec4\u4e0b\u6807 k \uff0c\u6709\uff1a \u20031. \u82e5 l \u2264 k \u2264 i \uff0c\u5219 A[k] \u2264 pivot \u3002 \u20032. \u82e5 i + 1 \u2264 k \u2264 j - 1 \uff0c\u5219 A[k] > pivot \u3002","title":"1. \u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u63cf\u8ff0"},{"location":"2-sort/2.4/#2","text":"","title":"2. \u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u5206\u6790"},{"location":"2-sort/2.4/#1_1","text":"\u5f53\u5212\u5206\u4ea7\u751f\u7684\u4e24\u4e2a\u5b50\u95ee\u9898\u5206\u522b\u5305\u542bn-1\u4e2a\u5143\u7d20\u548c0\u4e2a\u5143\u7d20\u65f6\uff0c$T(0)=\\Theta(1)$\uff0c\u56e0\u6b64\u6709\uff1a $T(n)=T(n-1)+\\Theta(n)$\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u590d\u6742\u5ea6\u7684\u7ed3\u679c\u4e3a\u7ea7\u6570\u7684\u548c\uff0c\u5373 $\\Theta(n^2)$\u3002","title":"(1). \u6700\u574f\u60c5\u51b5"},{"location":"2-sort/2.4/#2_1","text":"\u5728\u53ef\u80fd\u6700\u5e73\u8861\u7684\u5212\u5206\u4e2d\uff0c\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5206\u522b\u4e3a $\\lfloor n/2 \\rfloor$ \u548c $\\lceil n/2 \\rceil-1$\uff0c\u4e8e\u662f\u6709\u9012\u5f52\u5f0f\uff1a$T(n)=2T(n/2)+\\Theta(n)$\uff0c\u89e3\u4e3a $T(n)=\\Theta(nlgn)$\u3002 \u2003\u5b9e\u9645\u4e0a\uff0c\u5feb\u6392\u7684\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u66f4\u63a5\u8fd1\u6700\u597d\u60c5\u51b5\u800c\u975e\u6700\u574f\u60c5\u51b5\u3002 \u2003\u5bf9\u4e8e\u4efb\u4f55\u4e00\u79cd\u5e38\u6570\u6bd4\u4f8b\u7684\u5212\u5206\uff0c\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(nlgn)$\u3002\u4ee5 $T(n)=T(9n/10)+T(n/10)+cn$ \u4e3a\u4f8b\uff0c\u753b\u51fa\u9012\u5f52\u6811\u53ef\u5f97\u6bcf\u5c42\u7684\u4ee3\u4ef7\u90fd\u662f $cn$ \uff0c\u5176\u6df1\u5ea6\u4e3a $log_{10/9}n$\u3002","title":"(2). \u5e73\u8861\u5212\u5206"},{"location":"2-sort/2.4/#3","text":"\u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5373\u4e3b\u5143\u968f\u673a\u9009\u53d6 1 2 3 4 RANDOMIZED - PARTITION ( A , left , right ) i = RANDOM ( left , right ) exchange A [ right ] with A [ i ] return PARTITION ( A , left , right ) \u63a8\u5bfc\u524d\u7684\u51c6\u5907\uff1a \u2460 \u5f53\u5728\u5143\u7d20\u4e2a\u6570\u4e3a n \u7684\u6570\u7ec4\u4e0a\u8fd0\u884c QUICKSORT \u65f6\uff0c\u5047\u8bbe\u5728 PARTITION \u5904\u7684\u6bd4\u8f83\u6b21\u6570\u4e3a $X$\uff0c\u5219 QUICKSORT \u7684\u8fd0\u884c\u65f6\u95f4\u4e3a $O(n+X)$\u3002 \u2003- \u81f3\u591a\u8c03\u7528 PARTITION $n$ \u6b21\uff0c\u8c03\u7528\u65f6\u95f4\u4e3a $O(n)$ \u52a0\u4e0a\u8fed\u4ee3\u65f6\u95f4(\u6bd4\u8f83\u6b21\u6570)\u3002 \u2461 \u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u4e0e\u4e3b\u5143\u6bd4\u8f83\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u5bf9\u5143\u7d20\uff0c\u5b83\u4eec\u81f3\u591a\u6bd4\u8f83\u4e00\u6b21 \u2462 \u4e00\u65e6\u4e3b\u5143 $z_i<pivot<z_j$ \u88ab\u9009\u62e9\uff0c\u88ab\u5212\u5206\u7684 $z_i$ \u4e0e $z_j$ \u4e0d\u53ef\u80fd\u518d\u6bd4\u8f83(\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u4e92\u5f02) \u63a8\u5bfc\uff1a \u2003\u8bbe $X_{ij}= \\begin{cases} 1& if\\ z_i\\ compares\\ with\\ z_j\\\\ 0& else \\end{cases}$\uff0c$X= \\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}$ \u2003\u5219\u6709 $$\\begin{aligned} E(X)=E[\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1} X_{ij}]&=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u4e0e}z_j\\text{\u6bd4\u8f83}\\rbrace) \\\\ &=\\sum_{i=1}^{n-1}\\sum_{n}^{j=i+1}P(\\lbrace z_i\\text{\u6216}z_j\\text{\u662f\u96c6\u5408}Z_{ij}\u4e2d\u9009\u51fa\u7684\u7b2c\u4e00\u4e2a\u4e3b\u5143\\rbrace) \\\\ &=\\sum\\sum(\\frac{1}{j+i-1}+\\frac{1}{j+i-1})=\\sum\\frac{2}{j+i-1} \\\\ &< \\sum_{i=1}^{n-1}\\sum_{n}^{k=1} \\frac{2}{k}=O(nlgn) \\end{aligned}$$ \u2003\u6545\u5f97\u51fa\u7ed3\u8bba\uff1a\u4f7f\u7528\u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\uff0c\u5728\u8f93\u5165\u5143\u7d20\u4e92\u5f02\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u6392\u7684\u671f\u671b\u8fd0\u884c\u65f6\u95f4\u4e3a $O(nlgn)$\u3002","title":"(3). \u968f\u673a\u5316\u5feb\u901f\u6392\u5e8f\u5206\u6790"},{"location":"2-sort/2.4/#4","text":"\u2460 \u671f\u671b\u590d\u6742\u5ea6\u4e3a $\\Theta(nlgn)$\uff0c\u4e0e\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u76f8\u540c\uff0c\u4f46\u5176\u5e38\u6570\u66f4\u5c0f\uff0c\u901f\u5ea6\u66f4\u5feb \u2461 \u5feb\u6392\u662f\u4e0d\u7a33\u5b9a\u7684","title":"(4). \u5feb\u6392\u7279\u70b9"},{"location":"2-sort/2.4/#3_1","text":"\u4ece\u5b50\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u53d6\u4e09\u4e2a\u5143\u7d20\uff0c\u53d6\u5176\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u4e3b\u5143\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int median3 ( int A [], int left , int right ) { int center = ( left + right ) / 2 ; if ( A [ left ] > A [ right ]) { swap ( & A [ left ], & A [ right ]); } if ( A [ left ] > A [ center ]) { swap ( & A [ left ], & A [ center ]); } i f ( A [ center ] > A [ right ]) { swap ( & A [ center ], & A [ right ]); } swap ( & A [ center ], & A [ right - 1 ]); return A [ right - 1 ]; } \u5728\u4ee3\u7801\u4e0a\uff0c\u8981\u6ce8\u610f\u5f53\u95ee\u9898\u89c4\u6a21\u4e3a2\u65f6\u8981\u5355\u72ec\u8003\u8651\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void QuickSort ( int A [], int left , int right ) { if ( right > left + 1 ) { int pivot = median3 ( A , left , right ); int i = left ; int j = right - 1 ; while ( 1 ) { while ( A [ ++ i ] < pivot ){ } // less or equal cannot fit that the pivot needn`t move while ( A [ -- j ] > pivot ){ } // for i should stop at the pivot if ( j > i ) swap ( & A [ i ], & A [ j ]); else break ; } swap ( & A [ i ], & A [ right - 1 ]); QuickSort ( A , left , i - 1 ); QuickSort ( A , i + 1 , right ); } else { if ( A [ right ] < A [ left ]) { swap ( & A [ right ], & A [ left ]); } } }","title":"3. \u4e09\u6570\u53d6\u4e2d\u5212\u5206"},{"location":"2-sort/2.5/","text":"1. \u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c \u2003\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u53ef\u4ee5\u88ab\u62bd\u8c61\u4e3a\u4e00\u68f5\u51b3\u7b56\u6811( decision tree )\uff0c\u4e0b\u56fe\u4e3a\u4e09\u4e2a\u5143\u7d20\u7684\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u51b3\u7b56\u6811\u3002\u5728\u51b3\u7b56\u6811\u4e2d\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u53ef\u8fbe\u53f6\u7ed3\u70b9\u4e2d\u6700\u957f\u7b80\u5355\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8868\u793a\u5bf9\u5e94\u6392\u5e8f\u7b97\u6cd5\u4e2d\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u5373\u51b3\u7b56\u6811\u7684\u9ad8\u5ea6\uff1b\u8f93\u5165\u89c4\u6a21 $n$ \u5bf9\u5e94\u7684 $n!$ \u4e2d\u6392\u5217\u81f3\u5c11\u90fd\u5e94\u8be5\u51fa\u73b0\u5728\u51b3\u7b56\u6811\u7684\u53f6\u7ed3\u70b9\u4e2d\u3002\u56e0\u6b64\uff0c\u51b3\u7b56\u6811\u9ad8\u5ea6\u7684\u4e0b\u754c\u5c31\u662f\u6bd4\u8f83\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u7684\u4e0b\u754c\u3002 \u2003 \u5b9a\u7406\uff1a \u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u9700\u8981\u505a $\\Omega(nlgn)$ \u6b21\u6bd4\u8f83\u3002 \u2003 \u8bbe\u51b3\u7b56\u6811\u9ad8\u4e3a $h$, \u5177\u6709 $l$ \u4e2a\u53ef\u8fbe\u7684\u53f6\u7ed3\u70b9\u3002\u7531 $n!\\leq l\\leq 2^h$\uff0c\u6211\u4eec\u6709 $h\\geq lg(n!)=\\Omega(nlgn)$ \u2003\u7531\u6b64\uff0c\u5806\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u90fd\u662f\u6e10\u8fdb\u6700\u4f18\u7684\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u3002 2. \u8ba1\u6570\u6392\u5e8f \u2003\u5047\u8bbe $n$ \u4e2a\u5143\u7d20\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5728 $[0,\\ k)$ \u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5f53 $k=O(n)$ \u65f6\uff0c\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(n)$\u3002 \u2003 COUNTING-SORT(A, B, k) : A \u4e3a\u5f85\u6392\u5e8f\u6570\u7ec4\uff0c B \u4e3a\u7ed3\u679c\u6570\u7ec4\uff0c k \u4e3a\u6574\u6570\u8303\u56f4\u3002\u9996\u5148\u5728\u4e34\u65f6\u6570\u7ec4 C \u4e2d\u7edf\u8ba1\u5c0f\u4e8e\u7b49\u4e8e\u76f8\u5e94\u4e0b\u6807\u7684\u5bf9\u5e94\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6839\u636e\u5176\u786e\u5b9a A \u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void CountingSort ( int A [], int B [], int k , int len ) { int C [ k ]; int i ; for ( i = 0 ; i < k ; i ++ ) { C [ i ] = 0 ; } for ( i = 0 ; i < len ; i ++ ) { C [ A [ i ]] ++ ; } for ( i = 1 ; i < k ; i ++ ) { C [ i ] += C [ i - 1 ]; } for ( i = len - 1 ; i >= 0 ; i -- ) { B [ C [ A [ i ]] - 1 ] = A [ i ]; C [ A [ i ]] -- ; } } \u2003\u8ba1\u6570\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\u662f\u5b83\u662f\u7a33\u5b9a\u7684\u3002\u5404\u5143\u7d20\u4e2a\u6570\u5df2\u77e5\uff0c\u53ef\u4ee5\u63a7\u5236\u5176\u76f8\u5bf9\u6b21\u5e8f\u4e0d\u6539\u53d8\u3002","title":"5.Sorting in linear time"},{"location":"2-sort/2.5/#1","text":"\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u53ef\u4ee5\u88ab\u62bd\u8c61\u4e3a\u4e00\u68f5\u51b3\u7b56\u6811( decision tree )\uff0c\u4e0b\u56fe\u4e3a\u4e09\u4e2a\u5143\u7d20\u7684\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u51b3\u7b56\u6811\u3002\u5728\u51b3\u7b56\u6811\u4e2d\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u53ef\u8fbe\u53f6\u7ed3\u70b9\u4e2d\u6700\u957f\u7b80\u5355\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8868\u793a\u5bf9\u5e94\u6392\u5e8f\u7b97\u6cd5\u4e2d\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u5373\u51b3\u7b56\u6811\u7684\u9ad8\u5ea6\uff1b\u8f93\u5165\u89c4\u6a21 $n$ \u5bf9\u5e94\u7684 $n!$ \u4e2d\u6392\u5217\u81f3\u5c11\u90fd\u5e94\u8be5\u51fa\u73b0\u5728\u51b3\u7b56\u6811\u7684\u53f6\u7ed3\u70b9\u4e2d\u3002\u56e0\u6b64\uff0c\u51b3\u7b56\u6811\u9ad8\u5ea6\u7684\u4e0b\u754c\u5c31\u662f\u6bd4\u8f83\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u7684\u4e0b\u754c\u3002 \u2003 \u5b9a\u7406\uff1a \u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u90fd\u9700\u8981\u505a $\\Omega(nlgn)$ \u6b21\u6bd4\u8f83\u3002 \u2003 \u8bbe\u51b3\u7b56\u6811\u9ad8\u4e3a $h$, \u5177\u6709 $l$ \u4e2a\u53ef\u8fbe\u7684\u53f6\u7ed3\u70b9\u3002\u7531 $n!\\leq l\\leq 2^h$\uff0c\u6211\u4eec\u6709 $h\\geq lg(n!)=\\Omega(nlgn)$ \u2003\u7531\u6b64\uff0c\u5806\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u90fd\u662f\u6e10\u8fdb\u6700\u4f18\u7684\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u3002","title":"1. \u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c"},{"location":"2-sort/2.5/#2","text":"\u5047\u8bbe $n$ \u4e2a\u5143\u7d20\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5728 $[0,\\ k)$ \u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5f53 $k=O(n)$ \u65f6\uff0c\u6392\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a $\\Theta(n)$\u3002 \u2003 COUNTING-SORT(A, B, k) : A \u4e3a\u5f85\u6392\u5e8f\u6570\u7ec4\uff0c B \u4e3a\u7ed3\u679c\u6570\u7ec4\uff0c k \u4e3a\u6574\u6570\u8303\u56f4\u3002\u9996\u5148\u5728\u4e34\u65f6\u6570\u7ec4 C \u4e2d\u7edf\u8ba1\u5c0f\u4e8e\u7b49\u4e8e\u76f8\u5e94\u4e0b\u6807\u7684\u5bf9\u5e94\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6839\u636e\u5176\u786e\u5b9a A \u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void CountingSort ( int A [], int B [], int k , int len ) { int C [ k ]; int i ; for ( i = 0 ; i < k ; i ++ ) { C [ i ] = 0 ; } for ( i = 0 ; i < len ; i ++ ) { C [ A [ i ]] ++ ; } for ( i = 1 ; i < k ; i ++ ) { C [ i ] += C [ i - 1 ]; } for ( i = len - 1 ; i >= 0 ; i -- ) { B [ C [ A [ i ]] - 1 ] = A [ i ]; C [ A [ i ]] -- ; } } \u2003\u8ba1\u6570\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\u662f\u5b83\u662f\u7a33\u5b9a\u7684\u3002\u5404\u5143\u7d20\u4e2a\u6570\u5df2\u77e5\uff0c\u53ef\u4ee5\u63a7\u5236\u5176\u76f8\u5bf9\u6b21\u5e8f\u4e0d\u6539\u53d8\u3002","title":"2. \u8ba1\u6570\u6392\u5e8f"}]}